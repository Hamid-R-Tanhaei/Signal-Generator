
Signal_Generator_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800417c  0800417c  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800417c  0800417c  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800417c  0800417c  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08004184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  200001a0  08004324  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e94  08004324  00020e94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126ee  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003240  00000000  00000000  000328b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006824  00000000  00000000  00035af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000008c8  00000000  00000000  0003c320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001178  00000000  00000000  0003cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000167c1  00000000  00000000  0003dd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c1d9  00000000  00000000  00054521  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006d3f8  00000000  00000000  000606fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cdaf2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017bc  00000000  00000000  000cdb70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a0 	.word	0x200001a0
 800012c:	00000000 	.word	0x00000000
 8000130:	080040e8 	.word	0x080040e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001a4 	.word	0x200001a4
 800014c:	080040e8 	.word	0x080040e8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <HAL_InitTick+0x3c>)
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_InitTick+0x40>)
 8000936:	7809      	ldrb	r1, [r1, #0]
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800093e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000940:	fbb2 f0f3 	udiv	r0, r2, r3
 8000944:	f000 f8a2 	bl	8000a8c <HAL_SYSTICK_Config>
 8000948:	b908      	cbnz	r0, 800094e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	2d0f      	cmp	r5, #15
 800094c:	d901      	bls.n	8000952 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800094e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000950:	bd38      	pop	{r3, r4, r5, pc}
 8000952:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	4602      	mov	r2, r0
 8000956:	4629      	mov	r1, r5
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f852 	bl	8000a04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_InitTick+0x44>)
 8000962:	4620      	mov	r0, r4
 8000964:	601d      	str	r5, [r3, #0]
}
 8000966:	bd38      	pop	{r3, r4, r5, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000118 	.word	0x20000118
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_Init+0x20>)
{
 8000976:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000982:	f000 f82d 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ffd0 	bl	800092c <HAL_InitTick>
  HAL_MspInit();
 800098c:	f003 f870 	bl	8003a70 <HAL_MspInit>
}
 8000990:	2000      	movs	r0, #0
 8000992:	bd08      	pop	{r3, pc}
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <HAL_IncTick+0x10>)
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_IncTick+0x14>)
 800099c:	6811      	ldr	r1, [r2, #0]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	440b      	add	r3, r1
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000220 	.word	0x20000220
 80009ac:	20000000 	.word	0x20000000

080009b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <HAL_GetTick+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000220 	.word	0x20000220

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b538      	push	{r3, r4, r5, lr}
 80009be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff fff6 	bl	80009b0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80009c6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80009c8:	d002      	beq.n	80009d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <HAL_Delay+0x20>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d0:	f7ff ffee 	bl	80009b0 <HAL_GetTick>
 80009d4:	1b40      	subs	r0, r0, r5
 80009d6:	42a0      	cmp	r0, r4
 80009d8:	d3fa      	bcc.n	80009d0 <HAL_Delay+0x14>
  {
  }
}
 80009da:	bd38      	pop	{r3, r4, r5, pc}
 80009dc:	20000000 	.word	0x20000000

080009e0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	400b      	ands	r3, r1
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80009f8:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009fa:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a06:	b430      	push	{r4, r5}
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0e:	f1c3 0507 	rsb	r5, r3, #7
 8000a12:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a14:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	bf28      	it	cs
 8000a1a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1c:	2c06      	cmp	r4, #6
 8000a1e:	d919      	bls.n	8000a54 <HAL_NVIC_SetPriority+0x50>
 8000a20:	f04f 34ff 	mov.w	r4, #4294967295
 8000a24:	3b03      	subs	r3, #3
 8000a26:	409c      	lsls	r4, r3
 8000a28:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	40aa      	lsls	r2, r5
 8000a32:	ea21 0102 	bic.w	r1, r1, r2
 8000a36:	fa01 f203 	lsl.w	r2, r1, r3
 8000a3a:	4322      	orrs	r2, r4
 8000a3c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	db0a      	blt.n	8000a5a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a48:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a4c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a50:	bc30      	pop	{r4, r5}
 8000a52:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a54:	2400      	movs	r4, #0
 8000a56:	4623      	mov	r3, r4
 8000a58:	e7e8      	b.n	8000a2c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <HAL_NVIC_SetPriority+0x68>)
 8000a5c:	f000 000f 	and.w	r0, r0, #15
 8000a60:	4403      	add	r3, r0
 8000a62:	761a      	strb	r2, [r3, #24]
 8000a64:	bc30      	pop	{r4, r5}
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	e000ecfc 	.word	0xe000ecfc

08000a70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a70:	2800      	cmp	r0, #0
 8000a72:	db07      	blt.n	8000a84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a74:	2301      	movs	r3, #1
 8000a76:	f000 011f 	and.w	r1, r0, #31
 8000a7a:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <HAL_NVIC_EnableIRQ+0x18>)
 8000a7c:	408b      	lsls	r3, r1
 8000a7e:	0940      	lsrs	r0, r0, #5
 8000a80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000e100 	.word	0xe000e100

08000a8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a92:	d20d      	bcs.n	8000ab0 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a94:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a98:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	4c06      	ldr	r4, [pc, #24]	; (8000ab8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa6:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000aa8:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aaa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aac:	6019      	str	r1, [r3, #0]
 8000aae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e010 	.word	0xe000e010
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abc:	680a      	ldr	r2, [r1, #0]
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	f000 80db 	beq.w	8000c7a <HAL_GPIO_Init+0x1be>
{
 8000ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8000ac8:	f04f 0a00 	mov.w	sl, #0
{
 8000acc:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8000ace:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad0:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8000ca4 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad4:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8000ca8 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad8:	4f6d      	ldr	r7, [pc, #436]	; (8000c90 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ada:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000cac <HAL_GPIO_Init+0x1f0>
 8000ade:	e003      	b.n	8000ae8 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000ae0:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	fa32 f305 	lsrs.w	r3, r2, r5
 8000ae6:	d078      	beq.n	8000bda <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 8000ae8:	2301      	movs	r3, #1
 8000aea:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aec:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	d1f5      	bne.n	8000ae0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000af4:	684a      	ldr	r2, [r1, #4]
 8000af6:	2a12      	cmp	r2, #18
 8000af8:	f000 809e 	beq.w	8000c38 <HAL_GPIO_Init+0x17c>
 8000afc:	f200 8087 	bhi.w	8000c0e <HAL_GPIO_Init+0x152>
 8000b00:	2a02      	cmp	r2, #2
 8000b02:	f000 809d 	beq.w	8000c40 <HAL_GPIO_Init+0x184>
 8000b06:	d97c      	bls.n	8000c02 <HAL_GPIO_Init+0x146>
 8000b08:	2a03      	cmp	r2, #3
 8000b0a:	d069      	beq.n	8000be0 <HAL_GPIO_Init+0x124>
 8000b0c:	2a11      	cmp	r2, #17
 8000b0e:	d102      	bne.n	8000b16 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b10:	68cb      	ldr	r3, [r1, #12]
 8000b12:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b16:	2cff      	cmp	r4, #255	; 0xff
 8000b18:	d866      	bhi.n	8000be8 <HAL_GPIO_Init+0x12c>
 8000b1a:	4681      	mov	r9, r0
 8000b1c:	6803      	ldr	r3, [r0, #0]
 8000b1e:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b20:	260f      	movs	r6, #15
 8000b22:	fa06 fb02 	lsl.w	fp, r6, r2
 8000b26:	ea23 030b 	bic.w	r3, r3, fp
 8000b2a:	fa0a f202 	lsl.w	r2, sl, r2
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b34:	684a      	ldr	r2, [r1, #4]
 8000b36:	00d3      	lsls	r3, r2, #3
 8000b38:	d561      	bpl.n	8000bfe <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8000b3e:	f025 0303 	bic.w	r3, r5, #3
 8000b42:	f049 0901 	orr.w	r9, r9, #1
 8000b46:	f8cc 9018 	str.w	r9, [ip, #24]
 8000b4a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8000b4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b52:	f009 0901 	and.w	r9, r9, #1
 8000b56:	f8cd 900c 	str.w	r9, [sp, #12]
 8000b5a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b5e:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b62:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b66:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000b6a:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b6e:	fa06 f609 	lsl.w	r6, r6, r9
 8000b72:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b76:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b78:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b7a:	d011      	beq.n	8000ba0 <HAL_GPIO_Init+0xe4>
 8000b7c:	4540      	cmp	r0, r8
 8000b7e:	d063      	beq.n	8000c48 <HAL_GPIO_Init+0x18c>
 8000b80:	4e44      	ldr	r6, [pc, #272]	; (8000c94 <HAL_GPIO_Init+0x1d8>)
 8000b82:	42b0      	cmp	r0, r6
 8000b84:	d07a      	beq.n	8000c7c <HAL_GPIO_Init+0x1c0>
 8000b86:	4e44      	ldr	r6, [pc, #272]	; (8000c98 <HAL_GPIO_Init+0x1dc>)
 8000b88:	42b0      	cmp	r0, r6
 8000b8a:	bf0c      	ite	eq
 8000b8c:	f04f 0b03 	moveq.w	fp, #3
 8000b90:	f04f 0b04 	movne.w	fp, #4
 8000b94:	9e01      	ldr	r6, [sp, #4]
 8000b96:	fa0b f909 	lsl.w	r9, fp, r9
 8000b9a:	ea46 0609 	orr.w	r6, r6, r9
 8000b9e:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ba0:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba2:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba4:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba6:	bf4c      	ite	mi
 8000ba8:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000baa:	43a3      	bicpl	r3, r4
 8000bac:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000bae:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb2:	bf4c      	ite	mi
 8000bb4:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bb6:	43a3      	bicpl	r3, r4
 8000bb8:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bba:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bbc:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bbe:	bf4c      	ite	mi
 8000bc0:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bc2:	43a3      	bicpl	r3, r4
 8000bc4:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc6:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bca:	d515      	bpl.n	8000bf8 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bcc:	431c      	orrs	r4, r3
 8000bce:	60fc      	str	r4, [r7, #12]
 8000bd0:	680a      	ldr	r2, [r1, #0]
	position++;
 8000bd2:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd4:	fa32 f305 	lsrs.w	r3, r2, r5
 8000bd8:	d186      	bne.n	8000ae8 <HAL_GPIO_Init+0x2c>
  }
}
 8000bda:	b005      	add	sp, #20
 8000bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be0:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000be2:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be6:	d998      	bls.n	8000b1a <HAL_GPIO_Init+0x5e>
 8000be8:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8000bec:	3a08      	subs	r2, #8
 8000bee:	6843      	ldr	r3, [r0, #4]
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	f100 0904 	add.w	r9, r0, #4
 8000bf6:	e793      	b.n	8000b20 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bf8:	ea23 0404 	bic.w	r4, r3, r4
 8000bfc:	60fc      	str	r4, [r7, #12]
 8000bfe:	680a      	ldr	r2, [r1, #0]
 8000c00:	e76e      	b.n	8000ae0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000c02:	b1a2      	cbz	r2, 8000c2e <HAL_GPIO_Init+0x172>
 8000c04:	2a01      	cmp	r2, #1
 8000c06:	d186      	bne.n	8000b16 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c08:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000c0c:	e783      	b.n	8000b16 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8000c0e:	4e23      	ldr	r6, [pc, #140]	; (8000c9c <HAL_GPIO_Init+0x1e0>)
 8000c10:	42b2      	cmp	r2, r6
 8000c12:	d00c      	beq.n	8000c2e <HAL_GPIO_Init+0x172>
 8000c14:	d920      	bls.n	8000c58 <HAL_GPIO_Init+0x19c>
 8000c16:	4e22      	ldr	r6, [pc, #136]	; (8000ca0 <HAL_GPIO_Init+0x1e4>)
 8000c18:	42b2      	cmp	r2, r6
 8000c1a:	d008      	beq.n	8000c2e <HAL_GPIO_Init+0x172>
 8000c1c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000c20:	42b2      	cmp	r2, r6
 8000c22:	d004      	beq.n	8000c2e <HAL_GPIO_Init+0x172>
 8000c24:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8000c28:	42b2      	cmp	r2, r6
 8000c2a:	f47f af74 	bne.w	8000b16 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c2e:	688a      	ldr	r2, [r1, #8]
 8000c30:	b9e2      	cbnz	r2, 8000c6c <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c32:	f04f 0a04 	mov.w	sl, #4
 8000c36:	e76e      	b.n	8000b16 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c38:	68cb      	ldr	r3, [r1, #12]
 8000c3a:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8000c3e:	e76a      	b.n	8000b16 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c40:	68cb      	ldr	r3, [r1, #12]
 8000c42:	f103 0a08 	add.w	sl, r3, #8
          break;
 8000c46:	e766      	b.n	8000b16 <HAL_GPIO_Init+0x5a>
 8000c48:	f04f 0b01 	mov.w	fp, #1
 8000c4c:	fa0b f909 	lsl.w	r9, fp, r9
 8000c50:	ea46 0609 	orr.w	r6, r6, r9
 8000c54:	9601      	str	r6, [sp, #4]
 8000c56:	e7a3      	b.n	8000ba0 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 8000c58:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8000c5c:	42b2      	cmp	r2, r6
 8000c5e:	d0e6      	beq.n	8000c2e <HAL_GPIO_Init+0x172>
 8000c60:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000c64:	42b2      	cmp	r2, r6
 8000c66:	f47f af56 	bne.w	8000b16 <HAL_GPIO_Init+0x5a>
 8000c6a:	e7e0      	b.n	8000c2e <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c6c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000c6e:	bf0c      	ite	eq
 8000c70:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c72:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c74:	f04f 0a08 	mov.w	sl, #8
 8000c78:	e74d      	b.n	8000b16 <HAL_GPIO_Init+0x5a>
 8000c7a:	4770      	bx	lr
 8000c7c:	f04f 0b02 	mov.w	fp, #2
 8000c80:	9e01      	ldr	r6, [sp, #4]
 8000c82:	fa0b f909 	lsl.w	r9, fp, r9
 8000c86:	ea46 0609 	orr.w	r6, r6, r9
 8000c8a:	9601      	str	r6, [sp, #4]
 8000c8c:	e788      	b.n	8000ba0 <HAL_GPIO_Init+0xe4>
 8000c8e:	bf00      	nop
 8000c90:	40010400 	.word	0x40010400
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	10210000 	.word	0x10210000
 8000ca0:	10310000 	.word	0x10310000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40010c00 	.word	0x40010c00

08000cb0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  //assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000cb0:	68c3      	ldr	r3, [r0, #12]
 8000cb2:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb4:	bf14      	ite	ne
 8000cb6:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb8:	6101      	streq	r1, [r0, #16]
  }
}
 8000cba:	4770      	bx	lr

08000cbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbe:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d074      	beq.n	8000dae <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cc4:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000cc8:	4604      	mov	r4, r0
 8000cca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d068      	beq.n	8000da4 <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cd2:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cd4:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cd6:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8000cda:	6820      	ldr	r0, [r4, #0]
 8000cdc:	f000 ff8a 	bl	8001bf4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ce0:	f856 cb10 	ldr.w	ip, [r6], #16
 8000ce4:	466d      	mov	r5, sp
 8000ce6:	4637      	mov	r7, r6
 8000ce8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	1d27      	adds	r7, r4, #4
 8000cf0:	602b      	str	r3, [r5, #0]
 8000cf2:	4660      	mov	r0, ip
 8000cf4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000cf8:	f000 ff6a 	bl	8001bd0 <USB_CoreInit>
 8000cfc:	4605      	mov	r5, r0
 8000cfe:	b130      	cbz	r0, 8000d0e <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d00:	2302      	movs	r3, #2
    return HAL_ERROR;
 8000d02:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d04:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000d08:	4628      	mov	r0, r5
 8000d0a:	b007      	add	sp, #28
 8000d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d0e:	4601      	mov	r1, r0
 8000d10:	6820      	ldr	r0, [r4, #0]
 8000d12:	f000 ff79 	bl	8001c08 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d16:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000d1a:	f1bc 0f00 	cmp.w	ip, #0
 8000d1e:	d029      	beq.n	8000d74 <HAL_PCD_Init+0xb8>
 8000d20:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 8000d22:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d26:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 8000d28:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d2c:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 8000d2e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d32:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d34:	b2e8      	uxtb	r0, r5
 8000d36:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 8000d38:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d3c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d40:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d44:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d46:	d3ef      	bcc.n	8000d28 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d48:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d50:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d52:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 8000d56:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d5a:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d5c:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d5e:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 8000d60:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d64:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d68:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d6c:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d70:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d72:	d3eb      	bcc.n	8000d4c <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d76:	466d      	mov	r5, sp
 8000d78:	f8d4 c000 	ldr.w	ip, [r4]
 8000d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7e:	6833      	ldr	r3, [r6, #0]
 8000d80:	4660      	mov	r0, ip
 8000d82:	602b      	str	r3, [r5, #0]
 8000d84:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000d88:	f000 ff40 	bl	8001c0c <USB_DevInit>
 8000d8c:	4605      	mov	r5, r0
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d1b6      	bne.n	8000d00 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8000d92:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000d94:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d98:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d9a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d9e:	f001 fb53 	bl	8002448 <USB_DevDisconnect>
  return HAL_OK;
 8000da2:	e7b1      	b.n	8000d08 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 8000da4:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8000da8:	f002 feee 	bl	8003b88 <HAL_PCD_MspInit>
 8000dac:	e791      	b.n	8000cd2 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8000dae:	2501      	movs	r5, #1
}
 8000db0:	4628      	mov	r0, r5
 8000db2:	b007      	add	sp, #28
 8000db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db6:	bf00      	nop

08000db8 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000db8:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d010      	beq.n	8000de2 <HAL_PCD_Start+0x2a>
 8000dc0:	2101      	movs	r1, #1
{
 8000dc2:	b510      	push	{r4, lr}
 8000dc4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000dc6:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000dca:	f002 ffff 	bl	8003dcc <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	f001 fb38 	bl	8002444 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dd4:	6820      	ldr	r0, [r4, #0]
 8000dd6:	f000 ff03 	bl	8001be0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8000de0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000de2:	2002      	movs	r0, #2
}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dec:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000dee:	6800      	ldr	r0, [r0, #0]
 8000df0:	f001 fb2c 	bl	800244c <USB_ReadInterrupts>
 8000df4:	0401      	lsls	r1, r0, #16
 8000df6:	6822      	ldr	r2, [r4, #0]
 8000df8:	d443      	bmi.n	8000e82 <HAL_PCD_IRQHandler+0x9a>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	f001 fb26 	bl	800244c <USB_ReadInterrupts>
 8000e00:	0546      	lsls	r6, r0, #21
 8000e02:	f100 8171 	bmi.w	80010e8 <HAL_PCD_IRQHandler+0x300>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e06:	6820      	ldr	r0, [r4, #0]
 8000e08:	f001 fb20 	bl	800244c <USB_ReadInterrupts>
 8000e0c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e10:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e12:	d007      	beq.n	8000e24 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e14:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e24:	f001 fb12 	bl	800244c <USB_ReadInterrupts>
 8000e28:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e2c:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e2e:	d007      	beq.n	8000e40 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e30:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	0c1b      	lsrs	r3, r3, #16
 8000e3c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e40:	f001 fb04 	bl	800244c <USB_ReadInterrupts>
 8000e44:	04c5      	lsls	r5, r0, #19
 8000e46:	f100 8131 	bmi.w	80010ac <HAL_PCD_IRQHandler+0x2c4>
 8000e4a:	6820      	ldr	r0, [r4, #0]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e4c:	f001 fafe 	bl	800244c <USB_ReadInterrupts>
 8000e50:	0500      	lsls	r0, r0, #20
 8000e52:	f100 8104 	bmi.w	800105e <HAL_PCD_IRQHandler+0x276>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000e56:	6820      	ldr	r0, [r4, #0]
 8000e58:	f001 faf8 	bl	800244c <USB_ReadInterrupts>
 8000e5c:	0582      	lsls	r2, r0, #22
 8000e5e:	f100 80f1 	bmi.w	8001044 <HAL_PCD_IRQHandler+0x25c>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000e62:	6820      	ldr	r0, [r4, #0]
 8000e64:	f001 faf2 	bl	800244c <USB_ReadInterrupts>
 8000e68:	05c3      	lsls	r3, r0, #23
 8000e6a:	d508      	bpl.n	8000e7e <HAL_PCD_IRQHandler+0x96>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e6c:	6822      	ldr	r2, [r4, #0]
 8000e6e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8000e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e82:	f8df a414 	ldr.w	sl, [pc, #1044]	; 8001298 <HAL_PCD_IRQHandler+0x4b0>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000e86:	f8df b414 	ldr.w	fp, [pc, #1044]	; 800129c <HAL_PCD_IRQHandler+0x4b4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000e8a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e8e:	041f      	lsls	r7, r3, #16
 8000e90:	d5b3      	bpl.n	8000dfa <HAL_PCD_IRQHandler+0x12>
    wIstr = hpcd->Instance->ISTR;
 8000e92:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8000e96:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8000e98:	f011 050f 	ands.w	r5, r1, #15
 8000e9c:	d157      	bne.n	8000f4e <HAL_PCD_IRQHandler+0x166>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000e9e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ea2:	8813      	ldrh	r3, [r2, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ea4:	f000 813e 	beq.w	8001124 <HAL_PCD_IRQHandler+0x33c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000ea8:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000eaa:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8000eae:	f040 817a 	bne.w	80011a6 <HAL_PCD_IRQHandler+0x3be>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000eb2:	041b      	lsls	r3, r3, #16
 8000eb4:	d5e9      	bpl.n	8000e8a <HAL_PCD_IRQHandler+0xa2>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000eb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000eba:	8811      	ldrh	r1, [r2, #0]
 8000ebc:	400b      	ands	r3, r1
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec2:	8013      	strh	r3, [r2, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ec4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000ec8:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
 8000ecc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000ed0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000ed4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000edc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000ee0:	b19b      	cbz	r3, 8000f0a <HAL_PCD_IRQHandler+0x122>
 8000ee2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8000ee6:	b181      	cbz	r1, 8000f0a <HAL_PCD_IRQHandler+0x122>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000ee8:	4610      	mov	r0, r2
 8000eea:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000eee:	f001 fab3 	bl	8002458 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000ef2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8000ef6:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000efa:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8000efc:	4413      	add	r3, r2
 8000efe:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000f02:	4620      	mov	r0, r4
 8000f04:	f002 fe66 	bl	8003bd4 <HAL_PCD_DataOutStageCallback>
 8000f08:	6822      	ldr	r2, [r4, #0]
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f0a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000f0e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8000f18:	2900      	cmp	r1, #0
 8000f1a:	f040 8198 	bne.w	800124e <HAL_PCD_IRQHandler+0x466>
 8000f1e:	5ac1      	ldrh	r1, [r0, r3]
 8000f20:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8000f24:	0409      	lsls	r1, r1, #16
 8000f26:	0c09      	lsrs	r1, r1, #16
 8000f28:	52c1      	strh	r1, [r0, r3]
 8000f2a:	5ac1      	ldrh	r1, [r0, r3]
 8000f2c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8000f30:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000f34:	b289      	uxth	r1, r1
 8000f36:	52c1      	strh	r1, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000f38:	8811      	ldrh	r1, [r2, #0]
 8000f3a:	4bd6      	ldr	r3, [pc, #856]	; (8001294 <HAL_PCD_IRQHandler+0x4ac>)
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4a:	8013      	strh	r3, [r2, #0]
 8000f4c:	e79d      	b.n	8000e8a <HAL_PCD_IRQHandler+0xa2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000f4e:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
 8000f52:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f54:	0431      	lsls	r1, r6, #16
 8000f56:	d426      	bmi.n	8000fa6 <HAL_PCD_IRQHandler+0x1be>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000f58:	0633      	lsls	r3, r6, #24
 8000f5a:	d596      	bpl.n	8000e8a <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000f5c:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f60:	eb04 1345 	add.w	r3, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000f64:	ea0a 0101 	and.w	r1, sl, r1
 8000f68:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000f6c:	f822 1025 	strh.w	r1, [r2, r5, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f70:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000f74:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8000f78:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f7a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8000f7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000f82:	f8b1 1404 	ldrh.w	r1, [r1, #1028]	; 0x404

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000f86:	6c1d      	ldr	r5, [r3, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f88:	f3c1 0109 	ubfx	r1, r1, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8000f8c:	1846      	adds	r6, r0, r1
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f8e:	6459      	str	r1, [r3, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000f90:	63de      	str	r6, [r3, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	f040 80ef 	bne.w	8001176 <HAL_PCD_IRQHandler+0x38e>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f98:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f002 fe21 	bl	8003be4 <HAL_PCD_DataInStageCallback>
 8000fa2:	6822      	ldr	r2, [r4, #0]
 8000fa4:	e771      	b.n	8000e8a <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000fa6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000faa:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000fae:	016f      	lsls	r7, r5, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000fb0:	400b      	ands	r3, r1
 8000fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb6:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000fba:	eb04 0907 	add.w	r9, r4, r7
 8000fbe:	f899 3134 	ldrb.w	r3, [r9, #308]	; 0x134
 8000fc2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 810f 	beq.w	80011ea <HAL_PCD_IRQHandler+0x402>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000fcc:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 8000fd0:	f832 c023 	ldrh.w	ip, [r2, r3, lsl #2]
 8000fd4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8000fd8:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fdc:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 8000fe0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000fe4:	4463      	add	r3, ip
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000fe6:	f000 811b 	beq.w	8001220 <HAL_PCD_IRQHandler+0x438>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fea:	3302      	adds	r3, #2
 8000fec:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8000ff0:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 8000ff4:	f1b8 0f00 	cmp.w	r8, #0
 8000ff8:	f040 815d 	bne.w	80012b6 <HAL_PCD_IRQHandler+0x4ce>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000ffc:	880b      	ldrh	r3, [r1, #0]
 8000ffe:	ea0b 0303 	and.w	r3, fp, r3
 8001002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800100a:	800b      	strh	r3, [r1, #0]
 800100c:	4427      	add	r7, r4
        ep->xfer_count += count;
 800100e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 8001012:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001016:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
        ep->xfer_count += count;
 800101a:	4442      	add	r2, r8
        ep->xfer_buff += count;
 800101c:	4443      	add	r3, r8
        ep->xfer_count += count;
 800101e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 8001022:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001026:	2800      	cmp	r0, #0
 8001028:	f000 80f7 	beq.w	800121a <HAL_PCD_IRQHandler+0x432>
 800102c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001030:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8001034:	4590      	cmp	r8, r2
 8001036:	f080 8114 	bcs.w	8001262 <HAL_PCD_IRQHandler+0x47a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800103a:	4620      	mov	r0, r4
 800103c:	f002 fdca 	bl	8003bd4 <HAL_PCD_DataOutStageCallback>
 8001040:	6822      	ldr	r2, [r4, #0]
 8001042:	e789      	b.n	8000f58 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001044:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001046:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001048:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800104c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	0c1b      	lsrs	r3, r3, #16
 8001054:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001058:	f002 fdcc 	bl	8003bf4 <HAL_PCD_SOFCallback>
 800105c:	e701      	b.n	8000e62 <HAL_PCD_IRQHandler+0x7a>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001064:	4618      	mov	r0, r3
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001066:	f042 0208 	orr.w	r2, r2, #8
 800106a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800106e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001076:	0412      	lsls	r2, r2, #16
 8001078:	0c12      	lsrs	r2, r2, #16
 800107a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800107e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001082:	f042 0204 	orr.w	r2, r2, #4
 8001086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800108a:	f001 f9df 	bl	800244c <USB_ReadInterrupts>
 800108e:	04c1      	lsls	r1, r0, #19
 8001090:	d508      	bpl.n	80010a4 <HAL_PCD_IRQHandler+0x2bc>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001092:	6822      	ldr	r2, [r4, #0]
 8001094:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	0c1b      	lsrs	r3, r3, #16
 80010a0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80010a4:	4620      	mov	r0, r4
 80010a6:	f002 fdbb 	bl	8003c20 <HAL_PCD_SuspendCallback>
 80010aa:	e6d4      	b.n	8000e56 <HAL_PCD_IRQHandler+0x6e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010ac:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80010ae:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010b0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010c0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80010c4:	f023 0308 	bic.w	r3, r3, #8
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80010d0:	f002 fdb6 	bl	8003c40 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80010da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	0c1b      	lsrs	r3, r3, #16
 80010e2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80010e6:	e6b1      	b.n	8000e4c <HAL_PCD_IRQHandler+0x64>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010e8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80010ea:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80010f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010f4:	041b      	lsls	r3, r3, #16
 80010f6:	0c1b      	lsrs	r3, r3, #16
 80010f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80010fc:	f002 fd7e 	bl	8003bfc <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8001100:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001104:	2b01      	cmp	r3, #1
 8001106:	f43f ae7e 	beq.w	8000e06 <HAL_PCD_IRQHandler+0x1e>
  hpcd->USB_Address = address;
 800110a:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 800110c:	2301      	movs	r3, #1
  hpcd->USB_Address = address;
 800110e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8001112:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001116:	4629      	mov	r1, r5
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	f001 f98d 	bl	8002438 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800111e:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
 8001122:	e670      	b.n	8000e06 <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001124:	ea0a 0303 	and.w	r3, sl, r3
 8001128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800112c:	8013      	strh	r3, [r2, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800112e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001132:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8001136:	6be5      	ldr	r5, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001138:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800113c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001140:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001144:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001146:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800114a:	441d      	add	r5, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800114c:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800114e:	63e5      	str	r5, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001150:	f002 fd48 	bl	8003be4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001154:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001158:	b31b      	cbz	r3, 80011a2 <HAL_PCD_IRQHandler+0x3ba>
 800115a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115c:	6822      	ldr	r2, [r4, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f47f ae93 	bne.w	8000e8a <HAL_PCD_IRQHandler+0xa2>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001164:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8001168:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800116c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001170:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001174:	e689      	b.n	8000e8a <HAL_PCD_IRQHandler+0xa2>
  ep->xfer_count = 0U;
 8001176:	f04f 0c00 	mov.w	ip, #0
  ep->is_in = 1U;
 800117a:	2701      	movs	r7, #1
 800117c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001180:	4610      	mov	r0, r2
 8001182:	f003 0207 	and.w	r2, r3, #7
 8001186:	0151      	lsls	r1, r2, #5
  ep->xfer_buff = pBuf;
 8001188:	1863      	adds	r3, r4, r1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800118a:	3128      	adds	r1, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 800118c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ep->xfer_len = len;
 8001190:	e9c3 650f 	strd	r6, r5, [r3, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001194:	4421      	add	r1, r4
  ep->xfer_count = 0U;
 8001196:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
  ep->is_in = 1U;
 800119a:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800119e:	f000 ffad 	bl	80020fc <USB_EPStartXfer>
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	e671      	b.n	8000e8a <HAL_PCD_IRQHandler+0xa2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011a6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80011aa:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011ae:	4610      	mov	r0, r2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80011b4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80011b8:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011bc:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80011c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011c4:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011c8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011cc:	f001 f944 	bl	8002458 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80011d4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80011d6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011d8:	8811      	ldrh	r1, [r2, #0]
 80011da:	400b      	ands	r3, r1
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80011e2:	f002 fcf1 	bl	8003bc8 <HAL_PCD_SetupStageCallback>
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	e64f      	b.n	8000e8a <HAL_PCD_IRQHandler+0xa2>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011ea:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80011ee:	f899 1128 	ldrb.w	r1, [r9, #296]	; 0x128
 80011f2:	3306      	adds	r3, #6
 80011f4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80011f8:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 80011fc:	f3c8 0809 	ubfx	r8, r8, #0, #10
          if (count != 0U)
 8001200:	f1b8 0f00 	cmp.w	r8, #0
 8001204:	f43f af02 	beq.w	800100c <HAL_PCD_IRQHandler+0x224>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001208:	4610      	mov	r0, r2
 800120a:	4643      	mov	r3, r8
 800120c:	f8b9 212e 	ldrh.w	r2, [r9, #302]	; 0x12e
 8001210:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 8001214:	f001 f920 	bl	8002458 <USB_ReadPMA>
 8001218:	e6f8      	b.n	800100c <HAL_PCD_IRQHandler+0x224>
 800121a:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 800121e:	e70c      	b.n	800103a <HAL_PCD_IRQHandler+0x252>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001220:	3306      	adds	r3, #6
 8001222:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8001226:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 800122a:	f1b8 0f00 	cmp.w	r8, #0
 800122e:	f43f aee5 	beq.w	8000ffc <HAL_PCD_IRQHandler+0x214>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001232:	4643      	mov	r3, r8
 8001234:	4610      	mov	r0, r2
 8001236:	f8b9 2132 	ldrh.w	r2, [r9, #306]	; 0x132
 800123a:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 800123e:	f001 f90b 	bl	8002458 <USB_ReadPMA>
 8001242:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 8001246:	6821      	ldr	r1, [r4, #0]
 8001248:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800124c:	e6d6      	b.n	8000ffc <HAL_PCD_IRQHandler+0x214>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800124e:	293e      	cmp	r1, #62	; 0x3e
 8001250:	d826      	bhi.n	80012a0 <HAL_PCD_IRQHandler+0x4b8>
 8001252:	084d      	lsrs	r5, r1, #1
 8001254:	07cf      	lsls	r7, r1, #31
 8001256:	bf48      	it	mi
 8001258:	3501      	addmi	r5, #1
 800125a:	02ad      	lsls	r5, r5, #10
 800125c:	b2ad      	uxth	r5, r5
 800125e:	52c5      	strh	r5, [r0, r3]
 8001260:	e66a      	b.n	8000f38 <HAL_PCD_IRQHandler+0x150>
  ep->xfer_count = 0U;
 8001262:	f04f 0c00 	mov.w	ip, #0
 8001266:	f001 0107 	and.w	r1, r1, #7
 800126a:	014f      	lsls	r7, r1, #5
  ep->xfer_buff = pBuf;
 800126c:	19e2      	adds	r2, r4, r7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800126e:	f507 7794 	add.w	r7, r7, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 8001272:	f882 1128 	strb.w	r1, [r2, #296]	; 0x128
  ep->xfer_len = len;
 8001276:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
  ep->xfer_buff = pBuf;
 800127a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
  ep->xfer_count = 0U;
 800127e:	f8c2 c144 	str.w	ip, [r2, #324]	; 0x144
  ep->is_in = 0U;
 8001282:	f882 c129 	strb.w	ip, [r2, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001286:	19e1      	adds	r1, r4, r7
 8001288:	6820      	ldr	r0, [r4, #0]
 800128a:	f000 ff37 	bl	80020fc <USB_EPStartXfer>
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	e662      	b.n	8000f58 <HAL_PCD_IRQHandler+0x170>
 8001292:	bf00      	nop
 8001294:	ffffbf8f 	.word	0xffffbf8f
 8001298:	ffff8f0f 	.word	0xffff8f0f
 800129c:	ffff8f8f 	.word	0xffff8f8f
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012a0:	094d      	lsrs	r5, r1, #5
 80012a2:	06ce      	lsls	r6, r1, #27
 80012a4:	4906      	ldr	r1, [pc, #24]	; (80012c0 <HAL_PCD_IRQHandler+0x4d8>)
 80012a6:	bf08      	it	eq
 80012a8:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80012ac:	ea41 2585 	orr.w	r5, r1, r5, lsl #10
 80012b0:	b2ad      	uxth	r5, r5
 80012b2:	52c5      	strh	r5, [r0, r3]
 80012b4:	e640      	b.n	8000f38 <HAL_PCD_IRQHandler+0x150>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80012b6:	4610      	mov	r0, r2
 80012b8:	4643      	mov	r3, r8
 80012ba:	f8b9 2130 	ldrh.w	r2, [r9, #304]	; 0x130
 80012be:	e7bc      	b.n	800123a <HAL_PCD_IRQHandler+0x452>
 80012c0:	ffff8000 	.word	0xffff8000

080012c4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80012c4:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 80012c8:	2a01      	cmp	r2, #1
 80012ca:	d00d      	beq.n	80012e8 <HAL_PCD_SetAddress+0x24>
{
 80012cc:	b510      	push	{r4, lr}
 80012ce:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012d0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80012d2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80012d6:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012da:	6800      	ldr	r0, [r0, #0]
 80012dc:	f001 f8ac 	bl	8002438 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80012e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80012e8:	2002      	movs	r0, #2
}
 80012ea:	4770      	bx	lr

080012ec <HAL_PCD_EP_Open>:
{
 80012ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ee:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80012f2:	0609      	lsls	r1, r1, #24
 80012f4:	ea4f 1445 	mov.w	r4, r5, lsl #5
 80012f8:	d41f      	bmi.n	800133a <HAL_PCD_EP_Open+0x4e>
    ep->is_in = 0U;
 80012fa:	2700      	movs	r7, #0
 80012fc:	1906      	adds	r6, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012fe:	f504 7194 	add.w	r1, r4, #296	; 0x128
    ep->is_in = 0U;
 8001302:	f886 7129 	strb.w	r7, [r6, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001306:	4401      	add	r1, r0
  if (ep->is_in != 0U)
 8001308:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800130a:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 800130c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800130e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001310:	b104      	cbz	r4, 8001314 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8001312:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001314:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001316:	bf04      	itt	eq
 8001318:	2300      	moveq	r3, #0
 800131a:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800131c:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001320:	2b01      	cmp	r3, #1
 8001322:	d012      	beq.n	800134a <HAL_PCD_EP_Open+0x5e>
 8001324:	2301      	movs	r3, #1
 8001326:	4604      	mov	r4, r0
 8001328:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800132c:	6800      	ldr	r0, [r0, #0]
 800132e:	f000 fc87 	bl	8001c40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001332:	2000      	movs	r0, #0
 8001334:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8001338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 800133a:	2701      	movs	r7, #1
 800133c:	1906      	adds	r6, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800133e:	f104 0128 	add.w	r1, r4, #40	; 0x28
    ep->is_in = 1U;
 8001342:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001346:	4401      	add	r1, r0
 8001348:	e7de      	b.n	8001308 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800134a:	2002      	movs	r0, #2
}
 800134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800134e:	bf00      	nop

08001350 <HAL_PCD_EP_Close>:
{
 8001350:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8001354:	0609      	lsls	r1, r1, #24
{
 8001356:	b510      	push	{r4, lr}
 8001358:	ea4f 1342 	mov.w	r3, r2, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 800135c:	d416      	bmi.n	800138c <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 0U;
 800135e:	2400      	movs	r4, #0
 8001360:	18c1      	adds	r1, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001362:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 8001366:	f881 4129 	strb.w	r4, [r1, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800136a:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 800136c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800136e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001372:	2b01      	cmp	r3, #1
 8001374:	d015      	beq.n	80013a2 <HAL_PCD_EP_Close+0x52>
 8001376:	2301      	movs	r3, #1
 8001378:	4604      	mov	r4, r0
 800137a:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800137e:	6800      	ldr	r0, [r0, #0]
 8001380:	f000 fde6 	bl	8001f50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001384:	2000      	movs	r0, #0
 8001386:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 800138a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800138c:	2401      	movs	r4, #1
 800138e:	18c1      	adds	r1, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001390:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8001392:	f881 4029 	strb.w	r4, [r1, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001396:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001398:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800139a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d1e9      	bne.n	8001376 <HAL_PCD_EP_Close+0x26>
 80013a2:	2002      	movs	r0, #2
}
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	bf00      	nop

080013a8 <HAL_PCD_EP_Receive>:
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 80013aa:	2600      	movs	r6, #0
 80013ac:	f001 0107 	and.w	r1, r1, #7
 80013b0:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80013b2:	1944      	adds	r4, r0, r5
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b4:	f505 7594 	add.w	r5, r5, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b8:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep->xfer_buff = pBuf;
 80013bc:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013c0:	1941      	adds	r1, r0, r5
  ep->xfer_len = len;
 80013c2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013c6:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 80013c8:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80013cc:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013d0:	f000 fe94 	bl	80020fc <USB_EPStartXfer>
}
 80013d4:	4630      	mov	r0, r6
 80013d6:	bd70      	pop	{r4, r5, r6, pc}

080013d8 <HAL_PCD_EP_Transmit>:
{
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_count = 0U;
 80013da:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80013dc:	2701      	movs	r7, #1
 80013de:	f001 0107 	and.w	r1, r1, #7
 80013e2:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80013e4:	1944      	adds	r4, r0, r5
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013e6:	3528      	adds	r5, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_len = len;
 80013ec:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013f0:	1941      	adds	r1, r0, r5
 80013f2:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 1U;
 80013f4:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 80013f8:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013fa:	f000 fe7f 	bl	80020fc <USB_EPStartXfer>
}
 80013fe:	4630      	mov	r0, r6
 8001400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001402:	bf00      	nop

08001404 <HAL_PCD_EP_SetStall>:
{
 8001404:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001406:	6843      	ldr	r3, [r0, #4]
 8001408:	f001 0507 	and.w	r5, r1, #7
 800140c:	429d      	cmp	r5, r3
 800140e:	d81b      	bhi.n	8001448 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8001410:	060b      	lsls	r3, r1, #24
 8001412:	d41b      	bmi.n	800144c <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 8001414:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001416:	0149      	lsls	r1, r1, #5
    ep->is_in = 0U;
 8001418:	1843      	adds	r3, r0, r1
 800141a:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 800141e:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 8001420:	f501 7294 	add.w	r2, r1, #296	; 0x128
 8001424:	1881      	adds	r1, r0, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 8001426:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001428:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800142a:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 800142e:	429a      	cmp	r2, r3
 8001430:	d01b      	beq.n	800146a <HAL_PCD_EP_SetStall+0x66>
 8001432:	4604      	mov	r4, r0
 8001434:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001438:	6800      	ldr	r0, [r0, #0]
 800143a:	f000 ff87 	bl	800234c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800143e:	b1b5      	cbz	r5, 800146e <HAL_PCD_EP_SetStall+0x6a>
  __HAL_UNLOCK(hpcd);
 8001440:	2000      	movs	r0, #0
 8001442:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8001446:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001448:	2001      	movs	r0, #1
}
 800144a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800144c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800144e:	016b      	lsls	r3, r5, #5
 8001450:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8001454:	4403      	add	r3, r0
 8001456:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 800145a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800145c:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 800145e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001460:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001462:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8001466:	429a      	cmp	r2, r3
 8001468:	d1e3      	bne.n	8001432 <HAL_PCD_EP_SetStall+0x2e>
 800146a:	2002      	movs	r0, #2
}
 800146c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800146e:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8001472:	6820      	ldr	r0, [r4, #0]
 8001474:	f000 ffee 	bl	8002454 <USB_EP0_OutStart>
 8001478:	e7e2      	b.n	8001440 <HAL_PCD_EP_SetStall+0x3c>
 800147a:	bf00      	nop

0800147c <HAL_PCD_EP_ClrStall>:
{
 800147c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800147e:	6843      	ldr	r3, [r0, #4]
 8001480:	f001 020f 	and.w	r2, r1, #15
 8001484:	429a      	cmp	r2, r3
 8001486:	d81e      	bhi.n	80014c6 <HAL_PCD_EP_ClrStall+0x4a>
 8001488:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 800148c:	0609      	lsls	r1, r1, #24
 800148e:	ea4f 1342 	mov.w	r3, r2, lsl #5
 8001492:	d41a      	bmi.n	80014ca <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 0U;
 8001494:	2500      	movs	r5, #0
 8001496:	18c4      	adds	r4, r0, r3
 8001498:	f884 5129 	strb.w	r5, [r4, #297]	; 0x129
  ep->is_stall = 0U;
 800149c:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800149e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014a2:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 80014a4:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80014a6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80014a8:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d01a      	beq.n	80014e6 <HAL_PCD_EP_ClrStall+0x6a>
 80014b0:	2301      	movs	r3, #1
 80014b2:	4604      	mov	r4, r0
 80014b4:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80014b8:	6800      	ldr	r0, [r0, #0]
 80014ba:	f000 ff69 	bl	8002390 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80014be:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 80014c2:	4628      	mov	r0, r5
}
 80014c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
}
 80014c8:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80014ca:	2501      	movs	r5, #1
 80014cc:	18c4      	adds	r4, r0, r3
 80014ce:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  ep->is_stall = 0U;
 80014d2:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014d4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80014d8:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 80014da:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80014dc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80014de:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d1e4      	bne.n	80014b0 <HAL_PCD_EP_ClrStall+0x34>
 80014e6:	2002      	movs	r0, #2
}
 80014e8:	bd38      	pop	{r3, r4, r5, pc}
 80014ea:	bf00      	nop

080014ec <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80014ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80014f0:	d00d      	beq.n	800150e <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f2:	f001 0107 	and.w	r1, r1, #7
 80014f6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80014fa:	3028      	adds	r0, #40	; 0x28
 80014fc:	b299      	uxth	r1, r3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80014fe:	b16a      	cbz	r2, 800151c <HAL_PCDEx_PMAConfig+0x30>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001500:	2201      	movs	r2, #1
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001502:	0c1b      	lsrs	r3, r3, #16
 8001504:	8143      	strh	r3, [r0, #10]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001506:	8101      	strh	r1, [r0, #8]
 8001508:	7302      	strb	r2, [r0, #12]
  }

  return HAL_OK;
}
 800150a:	2000      	movs	r0, #0
 800150c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800150e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8001512:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8001516:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8001518:	2a00      	cmp	r2, #0
 800151a:	d1f1      	bne.n	8001500 <HAL_PCDEx_PMAConfig+0x14>
    ep->pmaadress = (uint16_t)pmaadress;
 800151c:	80c1      	strh	r1, [r0, #6]
 800151e:	7302      	strb	r2, [r0, #12]
}
 8001520:	2000      	movs	r0, #0
 8001522:	4770      	bx	lr

08001524 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001524:	2800      	cmp	r0, #0
 8001526:	f000 8155 	beq.w	80017d4 <HAL_RCC_OscConfig+0x2b0>
{
 800152a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	6803      	ldr	r3, [r0, #0]
{
 8001530:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	07dd      	lsls	r5, r3, #31
 8001534:	4604      	mov	r4, r0
 8001536:	d535      	bpl.n	80015a4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001538:	49a8      	ldr	r1, [pc, #672]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 800153a:	684a      	ldr	r2, [r1, #4]
 800153c:	f002 020c 	and.w	r2, r2, #12
 8001540:	2a04      	cmp	r2, #4
 8001542:	f000 8105 	beq.w	8001750 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001546:	684a      	ldr	r2, [r1, #4]
 8001548:	f002 020c 	and.w	r2, r2, #12
 800154c:	2a08      	cmp	r2, #8
 800154e:	f000 80fb 	beq.w	8001748 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001552:	6863      	ldr	r3, [r4, #4]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d010      	beq.n	800157c <HAL_RCC_OscConfig+0x58>
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8120 	beq.w	80017a0 <HAL_RCC_OscConfig+0x27c>
 8001560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001564:	f000 8178 	beq.w	8001858 <HAL_RCC_OscConfig+0x334>
 8001568:	4b9c      	ldr	r3, [pc, #624]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e004      	b.n	8001586 <HAL_RCC_OscConfig+0x62>
 800157c:	4a97      	ldr	r2, [pc, #604]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fa13 	bl	80009b0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4d94      	ldr	r5, [pc, #592]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 800158c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e005      	b.n	800159c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fa0e 	bl	80009b0 <HAL_GetTick>
 8001594:	1b80      	subs	r0, r0, r6
 8001596:	2864      	cmp	r0, #100	; 0x64
 8001598:	f200 80f5 	bhi.w	8001786 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159c:	682b      	ldr	r3, [r5, #0]
 800159e:	039a      	lsls	r2, r3, #14
 80015a0:	d5f6      	bpl.n	8001590 <HAL_RCC_OscConfig+0x6c>
 80015a2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a4:	079f      	lsls	r7, r3, #30
 80015a6:	d44d      	bmi.n	8001644 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a8:	071a      	lsls	r2, r3, #28
 80015aa:	d522      	bpl.n	80015f2 <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ac:	69a3      	ldr	r3, [r4, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80ba 	beq.w	8001728 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b4:	2201      	movs	r2, #1
 80015b6:	4b8a      	ldr	r3, [pc, #552]	; (80017e0 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b8:	4d88      	ldr	r5, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 80015ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015bc:	f7ff f9f8 	bl	80009b0 <HAL_GetTick>
 80015c0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	e005      	b.n	80015d0 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff f9f4 	bl	80009b0 <HAL_GetTick>
 80015c8:	1b80      	subs	r0, r0, r6
 80015ca:	2802      	cmp	r0, #2
 80015cc:	f200 80db 	bhi.w	8001786 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015d2:	079b      	lsls	r3, r3, #30
 80015d4:	d5f6      	bpl.n	80015c4 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d6:	4b83      	ldr	r3, [pc, #524]	; (80017e4 <HAL_RCC_OscConfig+0x2c0>)
 80015d8:	4a83      	ldr	r2, [pc, #524]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0a5b      	lsrs	r3, r3, #9
 80015e2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80015e4:	bf00      	nop
  }
  while (Delay --);
 80015e6:	9b01      	ldr	r3, [sp, #4]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	9201      	str	r2, [sp, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <HAL_RCC_OscConfig+0xc0>
 80015f0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f2:	075d      	lsls	r5, r3, #29
 80015f4:	d569      	bpl.n	80016ca <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b79      	ldr	r3, [pc, #484]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	00d0      	lsls	r0, r2, #3
 80015fc:	f100 80ec 	bmi.w	80017d8 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8001600:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	69da      	ldr	r2, [r3, #28]
 8001604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001608:	61da      	str	r2, [r3, #28]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b75      	ldr	r3, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x2c8>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	05d1      	lsls	r1, r2, #23
 800161a:	f140 80a3 	bpl.w	8001764 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161e:	68e3      	ldr	r3, [r4, #12]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d037      	beq.n	8001694 <HAL_RCC_OscConfig+0x170>
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80e7 	beq.w	80017f8 <HAL_RCC_OscConfig+0x2d4>
 800162a:	2b05      	cmp	r3, #5
 800162c:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	f000 811f 	beq.w	8001872 <HAL_RCC_OscConfig+0x34e>
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	621a      	str	r2, [r3, #32]
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	f022 0204 	bic.w	r2, r2, #4
 8001640:	621a      	str	r2, [r3, #32]
 8001642:	e02c      	b.n	800169e <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001644:	4a65      	ldr	r2, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 8001646:	6851      	ldr	r1, [r2, #4]
 8001648:	f011 0f0c 	tst.w	r1, #12
 800164c:	d061      	beq.n	8001712 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164e:	6851      	ldr	r1, [r2, #4]
 8001650:	f001 010c 	and.w	r1, r1, #12
 8001654:	2908      	cmp	r1, #8
 8001656:	d059      	beq.n	800170c <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001658:	6923      	ldr	r3, [r4, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80eb 	beq.w	8001836 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8001660:	2201      	movs	r2, #1
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4d5d      	ldr	r5, [pc, #372]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8001666:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001668:	f7ff f9a2 	bl	80009b0 <HAL_GetTick>
 800166c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	e005      	b.n	800167c <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff f99e 	bl	80009b0 <HAL_GetTick>
 8001674:	1b80      	subs	r0, r0, r6
 8001676:	2802      	cmp	r0, #2
 8001678:	f200 8085 	bhi.w	8001786 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	0798      	lsls	r0, r3, #30
 8001680:	d5f6      	bpl.n	8001670 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	6962      	ldr	r2, [r4, #20]
 8001686:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800168a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800168e:	602b      	str	r3, [r5, #0]
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	e789      	b.n	80015a8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 8001696:	6a13      	ldr	r3, [r2, #32]
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800169e:	f7ff f987 	bl	80009b0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	4e4e      	ldr	r6, [pc, #312]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 80016a4:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	e005      	b.n	80016b8 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff f980 	bl	80009b0 <HAL_GetTick>
 80016b0:	eba0 0008 	sub.w	r0, r0, r8
 80016b4:	42b8      	cmp	r0, r7
 80016b6:	d866      	bhi.n	8001786 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	6a33      	ldr	r3, [r6, #32]
 80016ba:	079b      	lsls	r3, r3, #30
 80016bc:	d5f6      	bpl.n	80016ac <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 80016be:	b125      	cbz	r5, 80016ca <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4a46      	ldr	r2, [pc, #280]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 80016c2:	69d3      	ldr	r3, [r2, #28]
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	69e0      	ldr	r0, [r4, #28]
 80016cc:	b1d0      	cbz	r0, 8001704 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ce:	4d43      	ldr	r5, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 80016d0:	686a      	ldr	r2, [r5, #4]
 80016d2:	f002 020c 	and.w	r2, r2, #12
 80016d6:	2a08      	cmp	r2, #8
 80016d8:	f000 80d3 	beq.w	8001882 <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016dc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	4a44      	ldr	r2, [pc, #272]	; (80017f4 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e4:	f000 80de 	beq.w	80018a4 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 80016e8:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80016ea:	f7ff f961 	bl	80009b0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ee:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80016f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f2:	e004      	b.n	80016fe <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff f95c 	bl	80009b0 <HAL_GetTick>
 80016f8:	1b40      	subs	r0, r0, r5
 80016fa:	2802      	cmp	r0, #2
 80016fc:	d843      	bhi.n	8001786 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	019b      	lsls	r3, r3, #6
 8001702:	d4f7      	bmi.n	80016f4 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8001704:	2000      	movs	r0, #0
}
 8001706:	b002      	add	sp, #8
 8001708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800170c:	6852      	ldr	r2, [r2, #4]
 800170e:	03d6      	lsls	r6, r2, #15
 8001710:	d4a2      	bmi.n	8001658 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4a32      	ldr	r2, [pc, #200]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	0795      	lsls	r5, r2, #30
 8001718:	d539      	bpl.n	800178e <HAL_RCC_OscConfig+0x26a>
 800171a:	6922      	ldr	r2, [r4, #16]
 800171c:	2a01      	cmp	r2, #1
 800171e:	d036      	beq.n	800178e <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8001720:	2001      	movs	r0, #1
}
 8001722:	b002      	add	sp, #8
 8001724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001728:	4a2d      	ldr	r2, [pc, #180]	; (80017e0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172a:	4d2c      	ldr	r5, [pc, #176]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 800172c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800172e:	f7ff f93f 	bl	80009b0 <HAL_GetTick>
 8001732:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	e004      	b.n	8001740 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff f93b 	bl	80009b0 <HAL_GetTick>
 800173a:	1b80      	subs	r0, r0, r6
 800173c:	2802      	cmp	r0, #2
 800173e:	d822      	bhi.n	8001786 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001742:	079f      	lsls	r7, r3, #30
 8001744:	d4f7      	bmi.n	8001736 <HAL_RCC_OscConfig+0x212>
 8001746:	e753      	b.n	80015f0 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001748:	684a      	ldr	r2, [r1, #4]
 800174a:	03d0      	lsls	r0, r2, #15
 800174c:	f57f af01 	bpl.w	8001552 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	0391      	lsls	r1, r2, #14
 8001756:	f57f af25 	bpl.w	80015a4 <HAL_RCC_OscConfig+0x80>
 800175a:	6862      	ldr	r2, [r4, #4]
 800175c:	2a00      	cmp	r2, #0
 800175e:	f47f af21 	bne.w	80015a4 <HAL_RCC_OscConfig+0x80>
 8001762:	e7dd      	b.n	8001720 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001764:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800176c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800176e:	f7ff f91f 	bl	80009b0 <HAL_GetTick>
 8001772:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	6833      	ldr	r3, [r6, #0]
 8001776:	05da      	lsls	r2, r3, #23
 8001778:	f53f af51 	bmi.w	800161e <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177c:	f7ff f918 	bl	80009b0 <HAL_GetTick>
 8001780:	1bc0      	subs	r0, r0, r7
 8001782:	2864      	cmp	r0, #100	; 0x64
 8001784:	d9f6      	bls.n	8001774 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8001786:	2003      	movs	r0, #3
}
 8001788:	b002      	add	sp, #8
 800178a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 8001790:	6960      	ldr	r0, [r4, #20]
 8001792:	680a      	ldr	r2, [r1, #0]
 8001794:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001798:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800179c:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	e703      	b.n	80015a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80017a8:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017ba:	f7ff f8f9 	bl	80009b0 <HAL_GetTick>
 80017be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c0:	e004      	b.n	80017cc <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c2:	f7ff f8f5 	bl	80009b0 <HAL_GetTick>
 80017c6:	1b80      	subs	r0, r0, r6
 80017c8:	2864      	cmp	r0, #100	; 0x64
 80017ca:	d8dc      	bhi.n	8001786 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	039b      	lsls	r3, r3, #14
 80017d0:	d4f7      	bmi.n	80017c2 <HAL_RCC_OscConfig+0x29e>
 80017d2:	e6e6      	b.n	80015a2 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80017d4:	2001      	movs	r0, #1
}
 80017d6:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80017d8:	2500      	movs	r5, #0
 80017da:	e71b      	b.n	8001614 <HAL_RCC_OscConfig+0xf0>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	42420480 	.word	0x42420480
 80017e4:	20000118 	.word	0x20000118
 80017e8:	10624dd3 	.word	0x10624dd3
 80017ec:	40007000 	.word	0x40007000
 80017f0:	42420000 	.word	0x42420000
 80017f4:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017fc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001800:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001802:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	621a      	str	r2, [r3, #32]
 800180a:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	f022 0204 	bic.w	r2, r2, #4
 8001814:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8001816:	f7ff f8cb 	bl	80009b0 <HAL_GetTick>
 800181a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	e004      	b.n	8001828 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f8c7 	bl	80009b0 <HAL_GetTick>
 8001822:	1bc0      	subs	r0, r0, r7
 8001824:	4540      	cmp	r0, r8
 8001826:	d8ae      	bhi.n	8001786 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	6a33      	ldr	r3, [r6, #32]
 800182a:	0798      	lsls	r0, r3, #30
 800182c:	d4f7      	bmi.n	800181e <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 800182e:	2d00      	cmp	r5, #0
 8001830:	f43f af4b 	beq.w	80016ca <HAL_RCC_OscConfig+0x1a6>
 8001834:	e744      	b.n	80016c0 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8001836:	4a34      	ldr	r2, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001838:	4d34      	ldr	r5, [pc, #208]	; (800190c <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 800183a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800183c:	f7ff f8b8 	bl	80009b0 <HAL_GetTick>
 8001840:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e004      	b.n	800184e <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff f8b4 	bl	80009b0 <HAL_GetTick>
 8001848:	1b80      	subs	r0, r0, r6
 800184a:	2802      	cmp	r0, #2
 800184c:	d89b      	bhi.n	8001786 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	682b      	ldr	r3, [r5, #0]
 8001850:	0799      	lsls	r1, r3, #30
 8001852:	d4f7      	bmi.n	8001844 <HAL_RCC_OscConfig+0x320>
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	e6a7      	b.n	80015a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001858:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800185c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e689      	b.n	8001586 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	f042 0204 	orr.w	r2, r2, #4
 8001876:	621a      	str	r2, [r3, #32]
 8001878:	6a1a      	ldr	r2, [r3, #32]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	621a      	str	r2, [r3, #32]
 8001880:	e70d      	b.n	800169e <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001882:	2801      	cmp	r0, #1
 8001884:	f43f af4d 	beq.w	8001722 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8001888:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	6a22      	ldr	r2, [r4, #32]
 800188c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001890:	4291      	cmp	r1, r2
 8001892:	f47f af45 	bne.w	8001720 <HAL_RCC_OscConfig+0x1fc>
 8001896:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001898:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 800189c:	1a18      	subs	r0, r3, r0
 800189e:	bf18      	it	ne
 80018a0:	2001      	movne	r0, #1
 80018a2:	e73e      	b.n	8001722 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 80018a4:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80018a6:	f7ff f883 	bl	80009b0 <HAL_GetTick>
 80018aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	e005      	b.n	80018ba <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f87f 	bl	80009b0 <HAL_GetTick>
 80018b2:	1b80      	subs	r0, r0, r6
 80018b4:	2802      	cmp	r0, #2
 80018b6:	f63f af66 	bhi.w	8001786 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	0199      	lsls	r1, r3, #6
 80018be:	d4f6      	bmi.n	80018ae <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c0:	6a22      	ldr	r2, [r4, #32]
 80018c2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80018c6:	d105      	bne.n	80018d4 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c8:	686b      	ldr	r3, [r5, #4]
 80018ca:	68a1      	ldr	r1, [r4, #8]
 80018cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018d0:	430b      	orrs	r3, r1
 80018d2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018d4:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCC_OscConfig+0x3e8>)
 80018d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	4302      	orrs	r2, r0
 80018de:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80018e8:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ea:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 80018ec:	f7ff f860 	bl	80009b0 <HAL_GetTick>
 80018f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f2:	e005      	b.n	8001900 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f85c 	bl	80009b0 <HAL_GetTick>
 80018f8:	1b40      	subs	r0, r0, r5
 80018fa:	2802      	cmp	r0, #2
 80018fc:	f63f af43 	bhi.w	8001786 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	019a      	lsls	r2, r3, #6
 8001904:	d5f6      	bpl.n	80018f4 <HAL_RCC_OscConfig+0x3d0>
 8001906:	e6fd      	b.n	8001704 <HAL_RCC_OscConfig+0x1e0>
 8001908:	42420000 	.word	0x42420000
 800190c:	40021000 	.word	0x40021000
 8001910:	42420060 	.word	0x42420060

08001914 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001914:	b178      	cbz	r0, 8001936 <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001916:	4a61      	ldr	r2, [pc, #388]	; (8001a9c <HAL_RCC_ClockConfig+0x188>)
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	428b      	cmp	r3, r1
 8001920:	d20b      	bcs.n	800193a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	6813      	ldr	r3, [r2, #0]
 8001924:	f023 0307 	bic.w	r3, r3, #7
 8001928:	430b      	orrs	r3, r1
 800192a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192c:	6813      	ldr	r3, [r2, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	428b      	cmp	r3, r1
 8001934:	d001      	beq.n	800193a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
}
 8001938:	4770      	bx	lr
{
 800193a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193e:	6803      	ldr	r3, [r0, #0]
{
 8001940:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001942:	079d      	lsls	r5, r3, #30
 8001944:	d514      	bpl.n	8001970 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001946:	075c      	lsls	r4, r3, #29
 8001948:	d504      	bpl.n	8001954 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800194a:	4c55      	ldr	r4, [pc, #340]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
 800194c:	6862      	ldr	r2, [r4, #4]
 800194e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001952:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	071a      	lsls	r2, r3, #28
 8001956:	d504      	bpl.n	8001962 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4c51      	ldr	r4, [pc, #324]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
 800195a:	6862      	ldr	r2, [r4, #4]
 800195c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001960:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001962:	4c4f      	ldr	r4, [pc, #316]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
 8001964:	6885      	ldr	r5, [r0, #8]
 8001966:	6862      	ldr	r2, [r4, #4]
 8001968:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800196c:	432a      	orrs	r2, r5
 800196e:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001970:	07db      	lsls	r3, r3, #31
 8001972:	4604      	mov	r4, r0
 8001974:	460d      	mov	r5, r1
 8001976:	d521      	bpl.n	80019bc <HAL_RCC_ClockConfig+0xa8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001978:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001980:	d067      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x13e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	2a02      	cmp	r2, #2
 8001984:	f000 8081 	beq.w	8001a8a <HAL_RCC_ClockConfig+0x176>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	0798      	lsls	r0, r3, #30
 800198a:	d527      	bpl.n	80019dc <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198c:	4e44      	ldr	r6, [pc, #272]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	6873      	ldr	r3, [r6, #4]
 8001994:	f023 0303 	bic.w	r3, r3, #3
 8001998:	4313      	orrs	r3, r2
 800199a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800199c:	f7ff f808 	bl	80009b0 <HAL_GetTick>
 80019a0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e004      	b.n	80019ae <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff f804 	bl	80009b0 <HAL_GetTick>
 80019a8:	1bc0      	subs	r0, r0, r7
 80019aa:	4540      	cmp	r0, r8
 80019ac:	d86b      	bhi.n	8001a86 <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	6873      	ldr	r3, [r6, #4]
 80019b0:	6862      	ldr	r2, [r4, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019ba:	d1f3      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x90>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4a37      	ldr	r2, [pc, #220]	; (8001a9c <HAL_RCC_ClockConfig+0x188>)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	42ab      	cmp	r3, r5
 80019c6:	d90d      	bls.n	80019e4 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	f023 0307 	bic.w	r3, r3, #7
 80019ce:	432b      	orrs	r3, r5
 80019d0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	6813      	ldr	r3, [r2, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	42ab      	cmp	r3, r5
 80019da:	d003      	beq.n	80019e4 <HAL_RCC_ClockConfig+0xd0>
    return HAL_ERROR;
 80019dc:	2001      	movs	r0, #1
}
 80019de:	b006      	add	sp, #24
 80019e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	0759      	lsls	r1, r3, #29
 80019e8:	d506      	bpl.n	80019f8 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ea:	492d      	ldr	r1, [pc, #180]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
 80019ec:	68e0      	ldr	r0, [r4, #12]
 80019ee:	684a      	ldr	r2, [r1, #4]
 80019f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019f4:	4302      	orrs	r2, r0
 80019f6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f8:	071a      	lsls	r2, r3, #28
 80019fa:	d507      	bpl.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019fc:	4a28      	ldr	r2, [pc, #160]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
 80019fe:	6921      	ldr	r1, [r4, #16]
 8001a00:	6853      	ldr	r3, [r2, #4]
 8001a02:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a0a:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a0c:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_RCC_ClockConfig+0x190>)
 8001a12:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a14:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a1a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001a1e:	4920      	ldr	r1, [pc, #128]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
 8001a20:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001a22:	f002 030c 	and.w	r3, r2, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d016      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x144>
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d016      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x148>
      sysclockfreq = HSI_VALUE;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_RCC_ClockConfig+0x18c>)
 8001a32:	481e      	ldr	r0, [pc, #120]	; (8001aac <HAL_RCC_ClockConfig+0x198>)
 8001a34:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001a36:	491e      	ldr	r1, [pc, #120]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a38:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001a3c:	5c80      	ldrb	r0, [r0, r2]
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8001a40:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8001a42:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a44:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001a46:	f7fe ff71 	bl	800092c <HAL_InitTick>
  return HAL_OK;
 8001a4a:	2000      	movs	r0, #0
}
 8001a4c:	b006      	add	sp, #24
 8001a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	039f      	lsls	r7, r3, #14
 8001a54:	d49a      	bmi.n	800198c <HAL_RCC_ClockConfig+0x78>
 8001a56:	e7c1      	b.n	80019dc <HAL_RCC_ClockConfig+0xc8>
      sysclockfreq = HSE_VALUE;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_RCC_ClockConfig+0x1a4>)
 8001a5a:	e7e9      	b.n	8001a30 <HAL_RCC_ClockConfig+0x11c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a5c:	a806      	add	r0, sp, #24
 8001a5e:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001a62:	4403      	add	r3, r0
 8001a64:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a68:	03d3      	lsls	r3, r2, #15
 8001a6a:	d512      	bpl.n	8001a92 <HAL_RCC_ClockConfig+0x17e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a6c:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_ClockConfig+0x1a4>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a70:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a74:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a78:	a906      	add	r1, sp, #24
 8001a7a:	440a      	add	r2, r1
 8001a7c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a84:	e7d4      	b.n	8001a30 <HAL_RCC_ClockConfig+0x11c>
        return HAL_TIMEOUT;
 8001a86:	2003      	movs	r0, #3
 8001a88:	e7a9      	b.n	80019de <HAL_RCC_ClockConfig+0xca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	019e      	lsls	r6, r3, #6
 8001a8c:	f53f af7e 	bmi.w	800198c <HAL_RCC_ClockConfig+0x78>
 8001a90:	e7a4      	b.n	80019dc <HAL_RCC_ClockConfig+0xc8>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x1a8>)
 8001a94:	fb03 f300 	mul.w	r3, r3, r0
 8001a98:	e7ca      	b.n	8001a30 <HAL_RCC_ClockConfig+0x11c>
 8001a9a:	bf00      	nop
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	08004100 	.word	0x08004100
 8001aa8:	007a1200 	.word	0x007a1200
 8001aac:	08004110 	.word	0x08004110
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	20000118 	.word	0x20000118
 8001ab8:	00b71b00 	.word	0x00b71b00
 8001abc:	003d0900 	.word	0x003d0900

08001ac0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8001ac0:	4b01      	ldr	r3, [pc, #4]	; (8001ac8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000118 	.word	0x20000118

08001acc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ad2:	6800      	ldr	r0, [r0, #0]
{
 8001ad4:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ad6:	07c5      	lsls	r5, r0, #31
 8001ad8:	d52a      	bpl.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	00d1      	lsls	r1, r2, #3
 8001ae0:	d53d      	bpl.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 8001ae4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	05d2      	lsls	r2, r2, #23
 8001aea:	d546      	bpl.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aec:	4935      	ldr	r1, [pc, #212]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001aee:	6860      	ldr	r0, [r4, #4]
 8001af0:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001af2:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001af6:	d00f      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001af8:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00b      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b00:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b02:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b04:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b06:	4a31      	ldr	r2, [pc, #196]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b0c:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b0e:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b10:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b12:	07d8      	lsls	r0, r3, #31
 8001b14:	d445      	bmi.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001b16:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001b1a:	6a13      	ldr	r3, [r2, #32]
 8001b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b20:	4303      	orrs	r3, r0
 8001b22:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b24:	b11d      	cbz	r5, 8001b2e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b26:	69d3      	ldr	r3, [r2, #28]
 8001b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b30:	0783      	lsls	r3, r0, #30
 8001b32:	d506      	bpl.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b34:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001b36:	68a1      	ldr	r1, [r4, #8]
 8001b38:	6853      	ldr	r3, [r2, #4]
 8001b3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b42:	f010 0010 	ands.w	r0, r0, #16
 8001b46:	d007      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b48:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001b4c:	68e1      	ldr	r1, [r4, #12]
 8001b4e:	6853      	ldr	r3, [r2, #4]
 8001b50:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6053      	str	r3, [r2, #4]
}
 8001b58:	b002      	add	sp, #8
 8001b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001b60:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b66:	61da      	str	r2, [r3, #28]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	05d2      	lsls	r2, r2, #23
 8001b78:	d4b8      	bmi.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b84:	f7fe ff14 	bl	80009b0 <HAL_GetTick>
 8001b88:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	6833      	ldr	r3, [r6, #0]
 8001b8c:	05db      	lsls	r3, r3, #23
 8001b8e:	d4ad      	bmi.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b90:	f7fe ff0e 	bl	80009b0 <HAL_GetTick>
 8001b94:	1bc0      	subs	r0, r0, r7
 8001b96:	2864      	cmp	r0, #100	; 0x64
 8001b98:	d9f7      	bls.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8001b9a:	2003      	movs	r0, #3
}
 8001b9c:	b002      	add	sp, #8
 8001b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba2:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff04 	bl	80009b0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001bac:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	6a33      	ldr	r3, [r6, #32]
 8001bb0:	079a      	lsls	r2, r3, #30
 8001bb2:	d4b0      	bmi.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7fe fefc 	bl	80009b0 <HAL_GetTick>
 8001bb8:	eba0 0008 	sub.w	r0, r0, r8
 8001bbc:	42b8      	cmp	r0, r7
 8001bbe:	d9f6      	bls.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001bc0:	e7eb      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42420440 	.word	0x42420440

08001bd0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	a801      	add	r0, sp, #4
 8001bd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001bd8:	b004      	add	sp, #16
 8001bda:	2000      	movs	r0, #0
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8001be0:	4602      	mov	r2, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001be2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001be6:	2000      	movs	r0, #0
  USBx->CNTR |= winterruptmask;
 8001be8:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001bec:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001bf4:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 8001bf8:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 8001bfa:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001bfe:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 8001c00:	400b      	ands	r3, r1
 8001c02:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8001c06:	4770      	bx	lr

08001c08 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001c08:	2000      	movs	r0, #0
 8001c0a:	4770      	bx	lr

08001c0c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	b470      	push	{r4, r5, r6}
 8001c10:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8001c12:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001c14:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001c16:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 8001c1a:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001c1e:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001c22:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001c26:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 8001c2a:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 8001c2c:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 8001c30:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 8001c34:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8001c38:	bc70      	pop	{r4, r5, r6}
 8001c3a:	b004      	add	sp, #16
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001c40:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001c42:	780d      	ldrb	r5, [r1, #0]
{
 8001c44:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001c46:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 8001c4a:	4abc      	ldr	r2, [pc, #752]	; (8001f3c <USB_ActivateEndpoint+0x2fc>)

  /* initialize Endpoint */
  switch (ep->type)
 8001c4c:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001c4e:	4022      	ands	r2, r4
  switch (ep->type)
 8001c50:	2803      	cmp	r0, #3
 8001c52:	f200 8142 	bhi.w	8001eda <USB_ActivateEndpoint+0x29a>
 8001c56:	e8df f000 	tbb	[pc, r0]
 8001c5a:	464e      	.short	0x464e
 8001c5c:	4a02      	.short	0x4a02
  HAL_StatusTypeDef ret = HAL_OK;
 8001c5e:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8001c60:	f248 0480 	movw	r4, #32896	; 0x8080
 8001c64:	4322      	orrs	r2, r4
 8001c66:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001c6a:	780d      	ldrb	r5, [r1, #0]
 8001c6c:	4eb4      	ldr	r6, [pc, #720]	; (8001f40 <USB_ActivateEndpoint+0x300>)
 8001c6e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001c72:	432c      	orrs	r4, r5
 8001c74:	4032      	ands	r2, r6
 8001c76:	4322      	orrs	r2, r4
 8001c78:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8001c7c:	7b0a      	ldrb	r2, [r1, #12]
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d13d      	bne.n	8001cfe <USB_ActivateEndpoint+0xbe>
 8001c82:	88cc      	ldrh	r4, [r1, #6]
 8001c84:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 8001c86:	784d      	ldrb	r5, [r1, #1]
 8001c88:	0864      	lsrs	r4, r4, #1
 8001c8a:	0064      	lsls	r4, r4, #1
 8001c8c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001c90:	2d00      	cmp	r5, #0
 8001c92:	f000 80e8 	beq.w	8001e66 <USB_ActivateEndpoint+0x226>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001c96:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001c9a:	442a      	add	r2, r5
 8001c9c:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ca0:	780a      	ldrb	r2, [r1, #0]
 8001ca2:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001ca6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8001caa:	066d      	lsls	r5, r5, #25
 8001cac:	d50b      	bpl.n	8001cc6 <USB_ActivateEndpoint+0x86>
 8001cae:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001cb2:	4026      	ands	r6, r4
 8001cb4:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001cb8:	f046 06c0 	orr.w	r6, r6, #192	; 0xc0
 8001cbc:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8001cc0:	780c      	ldrb	r4, [r1, #0]
 8001cc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 8001cc6:	78cb      	ldrb	r3, [r1, #3]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f000 8120 	beq.w	8001f0e <USB_ActivateEndpoint+0x2ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001cce:	8822      	ldrh	r2, [r4, #0]
 8001cd0:	4b9c      	ldr	r3, [pc, #624]	; (8001f44 <USB_ActivateEndpoint+0x304>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	f083 0320 	eor.w	r3, r3, #32
 8001cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8001ce2:	bc70      	pop	{r4, r5, r6}
 8001ce4:	4770      	bx	lr
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8001cea:	2000      	movs	r0, #0
      break;
 8001cec:	e7b8      	b.n	8001c60 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001cee:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8001cf2:	2000      	movs	r0, #0
      break;
 8001cf4:	e7b4      	b.n	8001c60 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_CONTROL;
 8001cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8001cfa:	2000      	movs	r0, #0
      break;
 8001cfc:	e7b0      	b.n	8001c60 <USB_ActivateEndpoint+0x20>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001cfe:	780c      	ldrb	r4, [r1, #0]
 8001d00:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001d04:	4032      	ands	r2, r6
 8001d06:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d0e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001d12:	780a      	ldrb	r2, [r1, #0]
 8001d14:	890c      	ldrh	r4, [r1, #8]
 8001d16:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001d1a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001d1e:	0864      	lsrs	r4, r4, #1
 8001d20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d24:	0064      	lsls	r4, r4, #1
 8001d26:	b2ad      	uxth	r5, r5
 8001d28:	5354      	strh	r4, [r2, r5]
 8001d2a:	780a      	ldrb	r2, [r1, #0]
 8001d2c:	894c      	ldrh	r4, [r1, #10]
 8001d2e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001d32:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001d36:	0864      	lsrs	r4, r4, #1
 8001d38:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8001d3c:	0064      	lsls	r4, r4, #1
 8001d3e:	b2ad      	uxth	r5, r5
 8001d40:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 8001d42:	784a      	ldrb	r2, [r1, #1]
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d142      	bne.n	8001dce <USB_ActivateEndpoint+0x18e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001d48:	780a      	ldrb	r2, [r1, #0]
 8001d4a:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001d4e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8001d52:	046d      	lsls	r5, r5, #17
 8001d54:	d50b      	bpl.n	8001d6e <USB_ActivateEndpoint+0x12e>
 8001d56:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001d5a:	4026      	ands	r6, r4
 8001d5c:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8001d60:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8001d64:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8001d68:	780c      	ldrb	r4, [r1, #0]
 8001d6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d6e:	8822      	ldrh	r2, [r4, #0]
 8001d70:	0656      	lsls	r6, r2, #25
 8001d72:	d50c      	bpl.n	8001d8e <USB_ActivateEndpoint+0x14e>
 8001d74:	8822      	ldrh	r2, [r4, #0]
 8001d76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d7a:	0512      	lsls	r2, r2, #20
 8001d7c:	0d12      	lsrs	r2, r2, #20
 8001d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d82:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001d86:	8022      	strh	r2, [r4, #0]
 8001d88:	780c      	ldrb	r4, [r1, #0]
 8001d8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001d8e:	f248 0680 	movw	r6, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8001d92:	8822      	ldrh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001d94:	4d6c      	ldr	r5, [pc, #432]	; (8001f48 <USB_ActivateEndpoint+0x308>)
      PCD_TX_DTOG(USBx, ep->num);
 8001d96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d9a:	0512      	lsls	r2, r2, #20
 8001d9c:	0d12      	lsrs	r2, r2, #20
 8001d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001da6:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001da8:	780c      	ldrb	r4, [r1, #0]
 8001daa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001dae:	402a      	ands	r2, r5
 8001db0:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001db4:	4332      	orrs	r2, r6
 8001db6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001dba:	7809      	ldrb	r1, [r1, #0]
 8001dbc:	4a61      	ldr	r2, [pc, #388]	; (8001f44 <USB_ActivateEndpoint+0x304>)
 8001dbe:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
 8001dc2:	4022      	ands	r2, r4
 8001dc4:	4332      	orrs	r2, r6
 8001dc6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8001dca:	bc70      	pop	{r4, r5, r6}
 8001dcc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001dce:	780a      	ldrb	r2, [r1, #0]
 8001dd0:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001dd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8001dd8:	046d      	lsls	r5, r5, #17
 8001dda:	d50b      	bpl.n	8001df4 <USB_ActivateEndpoint+0x1b4>
 8001ddc:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001de0:	4026      	ands	r6, r4
 8001de2:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8001de6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8001dea:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8001dee:	780c      	ldrb	r4, [r1, #0]
 8001df0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001df4:	8822      	ldrh	r2, [r4, #0]
 8001df6:	0652      	lsls	r2, r2, #25
 8001df8:	d50c      	bpl.n	8001e14 <USB_ActivateEndpoint+0x1d4>
 8001dfa:	8822      	ldrh	r2, [r4, #0]
 8001dfc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e00:	0512      	lsls	r2, r2, #20
 8001e02:	0d12      	lsrs	r2, r2, #20
 8001e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e08:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001e0c:	8022      	strh	r2, [r4, #0]
 8001e0e:	780c      	ldrb	r4, [r1, #0]
 8001e10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_RX_DTOG(USBx, ep->num);
 8001e14:	8822      	ldrh	r2, [r4, #0]
 8001e16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e1a:	0512      	lsls	r2, r2, #20
 8001e1c:	0d12      	lsrs	r2, r2, #20
 8001e1e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e26:	8022      	strh	r2, [r4, #0]
      if (ep->type != EP_TYPE_ISOC)
 8001e28:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001e2a:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8001e2c:	2a01      	cmp	r2, #1
 8001e2e:	d061      	beq.n	8001ef4 <USB_ActivateEndpoint+0x2b4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001e30:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8001e34:	4a43      	ldr	r2, [pc, #268]	; (8001f44 <USB_ActivateEndpoint+0x304>)
 8001e36:	402a      	ands	r2, r5
 8001e38:	f082 0220 	eor.w	r2, r2, #32
 8001e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e44:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e48:	7809      	ldrb	r1, [r1, #0]
}
 8001e4a:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e4c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001e50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e54:	0492      	lsls	r2, r2, #18
 8001e56:	0c92      	lsrs	r2, r2, #18
 8001e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e60:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8001e64:	4770      	bx	lr
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e66:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001e6a:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e6c:	4432      	add	r2, r6
 8001e6e:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001e72:	780a      	ldrb	r2, [r1, #0]
 8001e74:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8001e78:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001e7c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001e80:	b2a4      	uxth	r4, r4
 8001e82:	b365      	cbz	r5, 8001ede <USB_ActivateEndpoint+0x29e>
 8001e84:	2d3e      	cmp	r5, #62	; 0x3e
 8001e86:	d84d      	bhi.n	8001f24 <USB_ActivateEndpoint+0x2e4>
 8001e88:	086e      	lsrs	r6, r5, #1
 8001e8a:	07ed      	lsls	r5, r5, #31
 8001e8c:	bf48      	it	mi
 8001e8e:	3601      	addmi	r6, #1
 8001e90:	02b6      	lsls	r6, r6, #10
 8001e92:	b2b6      	uxth	r6, r6
 8001e94:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e96:	780c      	ldrb	r4, [r1, #0]
 8001e98:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8001e9c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001ea0:	046e      	lsls	r6, r5, #17
 8001ea2:	d50e      	bpl.n	8001ec2 <USB_ActivateEndpoint+0x282>
 8001ea4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001ea8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001eac:	0512      	lsls	r2, r2, #20
 8001eae:	0d12      	lsrs	r2, r2, #20
 8001eb0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001eb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eb8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8001ebc:	780a      	ldrb	r2, [r1, #0]
 8001ebe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ec2:	8811      	ldrh	r1, [r2, #0]
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <USB_ActivateEndpoint+0x308>)
}
 8001ec6:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ec8:	400b      	ands	r3, r1
 8001eca:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed6:	8013      	strh	r3, [r2, #0]
}
 8001ed8:	4770      	bx	lr
      ret = HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
 8001edc:	e6c0      	b.n	8001c60 <USB_ActivateEndpoint+0x20>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001ede:	5b15      	ldrh	r5, [r2, r4]
 8001ee0:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8001ee4:	042d      	lsls	r5, r5, #16
 8001ee6:	0c2d      	lsrs	r5, r5, #16
 8001ee8:	5315      	strh	r5, [r2, r4]
 8001eea:	5b15      	ldrh	r5, [r2, r4]
 8001eec:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8001ef0:	5315      	strh	r5, [r2, r4]
 8001ef2:	e7d0      	b.n	8001e96 <USB_ActivateEndpoint+0x256>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001ef4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001ef8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001efc:	0512      	lsls	r2, r2, #20
 8001efe:	0d12      	lsrs	r2, r2, #20
 8001f00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f08:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8001f0c:	e79c      	b.n	8001e48 <USB_ActivateEndpoint+0x208>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001f0e:	8823      	ldrh	r3, [r4, #0]
 8001f10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001f14:	051b      	lsls	r3, r3, #20
 8001f16:	0d1b      	lsrs	r3, r3, #20
 8001f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f20:	8023      	strh	r3, [r4, #0]
 8001f22:	e752      	b.n	8001dca <USB_ActivateEndpoint+0x18a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001f24:	096e      	lsrs	r6, r5, #5
 8001f26:	06ed      	lsls	r5, r5, #27
 8001f28:	4d08      	ldr	r5, [pc, #32]	; (8001f4c <USB_ActivateEndpoint+0x30c>)
 8001f2a:	bf08      	it	eq
 8001f2c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8001f30:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8001f34:	b2ad      	uxth	r5, r5
 8001f36:	5315      	strh	r5, [r2, r4]
 8001f38:	e7ad      	b.n	8001e96 <USB_ActivateEndpoint+0x256>
 8001f3a:	bf00      	nop
 8001f3c:	ffff898f 	.word	0xffff898f
 8001f40:	ffff8f8f 	.word	0xffff8f8f
 8001f44:	ffff8fbf 	.word	0xffff8fbf
 8001f48:	ffffbf8f 	.word	0xffffbf8f
 8001f4c:	ffff8000 	.word	0xffff8000

08001f50 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001f50:	b430      	push	{r4, r5}
 8001f52:	780a      	ldrb	r2, [r1, #0]
  if (ep->doublebuffer == 0U)
 8001f54:	7b0d      	ldrb	r5, [r1, #12]
 8001f56:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001f5a:	784c      	ldrb	r4, [r1, #1]
 8001f5c:	bb15      	cbnz	r5, 8001fa4 <USB_DeactivateEndpoint+0x54>
  {
    if (ep->is_in != 0U)
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	f000 8099 	beq.w	8002096 <USB_DeactivateEndpoint+0x146>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f64:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8001f68:	0664      	lsls	r4, r4, #25
 8001f6a:	d50e      	bpl.n	8001f8a <USB_DeactivateEndpoint+0x3a>
 8001f6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f74:	051b      	lsls	r3, r3, #20
 8001f76:	0d1b      	lsrs	r3, r3, #20
 8001f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001f84:	780b      	ldrb	r3, [r1, #0]
 8001f86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001f8a:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	bc30      	pop	{r4, r5}
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001f90:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f94:	0512      	lsls	r2, r2, #20
 8001f96:	0d12      	lsrs	r2, r2, #20
 8001f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa0:	801a      	strh	r2, [r3, #0]
}
 8001fa2:	4770      	bx	lr
    if (ep->is_in == 0U)
 8001fa4:	2c00      	cmp	r4, #0
 8001fa6:	d141      	bne.n	800202c <USB_DeactivateEndpoint+0xdc>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001fa8:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8001fac:	0464      	lsls	r4, r4, #17
 8001fae:	d50e      	bpl.n	8001fce <USB_DeactivateEndpoint+0x7e>
 8001fb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb8:	051b      	lsls	r3, r3, #20
 8001fba:	0d1b      	lsrs	r3, r3, #20
 8001fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001fc8:	780b      	ldrb	r3, [r1, #0]
 8001fca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001fce:	881a      	ldrh	r2, [r3, #0]
 8001fd0:	0655      	lsls	r5, r2, #25
 8001fd2:	d50c      	bpl.n	8001fee <USB_DeactivateEndpoint+0x9e>
 8001fd4:	881a      	ldrh	r2, [r3, #0]
 8001fd6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fda:	0512      	lsls	r2, r2, #20
 8001fdc:	0d12      	lsrs	r2, r2, #20
 8001fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001fe6:	801a      	strh	r2, [r3, #0]
 8001fe8:	780b      	ldrb	r3, [r1, #0]
 8001fea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001fee:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8001ff2:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001ff4:	4c3f      	ldr	r4, [pc, #252]	; (80020f4 <USB_DeactivateEndpoint+0x1a4>)
      PCD_TX_DTOG(USBx, ep->num);
 8001ff6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ffa:	0512      	lsls	r2, r2, #20
 8001ffc:	0d12      	lsrs	r2, r2, #20
 8001ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002002:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002006:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002008:	780a      	ldrb	r2, [r1, #0]
 800200a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800200e:	4023      	ands	r3, r4
 8002010:	432b      	orrs	r3, r5
 8002012:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002016:	780a      	ldrb	r2, [r1, #0]
 8002018:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <USB_DeactivateEndpoint+0x1a8>)
 800201a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800201e:	400b      	ands	r3, r1
 8002020:	431d      	orrs	r5, r3
 8002022:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8002026:	2000      	movs	r0, #0
 8002028:	bc30      	pop	{r4, r5}
 800202a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800202c:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8002030:	0464      	lsls	r4, r4, #17
 8002032:	d50e      	bpl.n	8002052 <USB_DeactivateEndpoint+0x102>
 8002034:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203c:	051b      	lsls	r3, r3, #20
 800203e:	0d1b      	lsrs	r3, r3, #20
 8002040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002048:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800204c:	780b      	ldrb	r3, [r1, #0]
 800204e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002052:	881a      	ldrh	r2, [r3, #0]
 8002054:	0652      	lsls	r2, r2, #25
 8002056:	d43e      	bmi.n	80020d6 <USB_DeactivateEndpoint+0x186>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002058:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800205c:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800205e:	4c26      	ldr	r4, [pc, #152]	; (80020f8 <USB_DeactivateEndpoint+0x1a8>)
      PCD_RX_DTOG(USBx, ep->num);
 8002060:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002064:	0512      	lsls	r2, r2, #20
 8002066:	0d12      	lsrs	r2, r2, #20
 8002068:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800206c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002070:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002072:	780a      	ldrb	r2, [r1, #0]
 8002074:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002078:	4023      	ands	r3, r4
 800207a:	432b      	orrs	r3, r5
 800207c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002080:	780a      	ldrb	r2, [r1, #0]
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <USB_DeactivateEndpoint+0x1a4>)
 8002084:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8002088:	400b      	ands	r3, r1
 800208a:	431d      	orrs	r5, r3
 800208c:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8002090:	2000      	movs	r0, #0
 8002092:	bc30      	pop	{r4, r5}
 8002094:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002096:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 800209a:	0465      	lsls	r5, r4, #17
 800209c:	d50e      	bpl.n	80020bc <USB_DeactivateEndpoint+0x16c>
 800209e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a6:	051b      	lsls	r3, r3, #20
 80020a8:	0d1b      	lsrs	r3, r3, #20
 80020aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80020b6:	780b      	ldrb	r3, [r1, #0]
 80020b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80020bc:	881a      	ldrh	r2, [r3, #0]
}
 80020be:	2000      	movs	r0, #0
 80020c0:	bc30      	pop	{r4, r5}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80020c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020c6:	0492      	lsls	r2, r2, #18
 80020c8:	0c92      	lsrs	r2, r2, #18
 80020ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020d2:	801a      	strh	r2, [r3, #0]
}
 80020d4:	4770      	bx	lr
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020d6:	881a      	ldrh	r2, [r3, #0]
 80020d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020dc:	0512      	lsls	r2, r2, #20
 80020de:	0d12      	lsrs	r2, r2, #20
 80020e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	780b      	ldrb	r3, [r1, #0]
 80020ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80020f0:	e7b2      	b.n	8002058 <USB_DeactivateEndpoint+0x108>
 80020f2:	bf00      	nop
 80020f4:	ffffbf8f 	.word	0xffffbf8f
 80020f8:	ffff8fbf 	.word	0xffff8fbf

080020fc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80020fc:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80020fe:	784c      	ldrb	r4, [r1, #1]
 8002100:	698b      	ldr	r3, [r1, #24]
 8002102:	2c01      	cmp	r4, #1
 8002104:	690a      	ldr	r2, [r1, #16]
 8002106:	d05a      	beq.n	80021be <USB_EPStartXfer+0xc2>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002108:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
    }
    else
    {
      len = ep->xfer_len;
      ep->xfer_len = 0U;
 800210a:	bf98      	it	ls
 800210c:	2600      	movls	r6, #0
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800210e:	7b0d      	ldrb	r5, [r1, #12]
      ep->xfer_len -= len;
 8002110:	bf88      	it	hi
 8002112:	1a9e      	subhi	r6, r3, r2
 8002114:	618e      	str	r6, [r1, #24]
 8002116:	bf88      	it	hi
 8002118:	4613      	movhi	r3, r2
 800211a:	780a      	ldrb	r2, [r1, #0]
    if (ep->doublebuffer == 0U)
 800211c:	bb15      	cbnz	r5, 8002164 <USB_EPStartXfer+0x68>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800211e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8002122:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	442c      	add	r4, r5
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80a8 	beq.w	8002280 <USB_EPStartXfer+0x184>
 8002130:	2b3e      	cmp	r3, #62	; 0x3e
 8002132:	f200 80c9 	bhi.w	80022c8 <USB_EPStartXfer+0x1cc>
 8002136:	085d      	lsrs	r5, r3, #1
 8002138:	07db      	lsls	r3, r3, #31
 800213a:	bf48      	it	mi
 800213c:	3501      	addmi	r5, #1
 800213e:	02ad      	lsls	r5, r5, #10
 8002140:	b2ad      	uxth	r5, r5
 8002142:	52a5      	strh	r5, [r4, r2]
 8002144:	780a      	ldrb	r2, [r1, #0]
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002146:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800214a:	4b7d      	ldr	r3, [pc, #500]	; (8002340 <USB_EPStartXfer+0x244>)
  }

  return HAL_OK;
}
 800214c:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800214e:	400b      	ands	r3, r1
 8002150:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8002160:	2000      	movs	r0, #0
 8002162:	4770      	bx	lr
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002164:	2c00      	cmp	r4, #0
 8002166:	d1ee      	bne.n	8002146 <USB_EPStartXfer+0x4a>
 8002168:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800216c:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	442c      	add	r4, r5
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 80b3 	bne.w	80022e0 <USB_EPStartXfer+0x1e4>
 800217a:	5aa5      	ldrh	r5, [r4, r2]
 800217c:	4e71      	ldr	r6, [pc, #452]	; (8002344 <USB_EPStartXfer+0x248>)
 800217e:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8002182:	042d      	lsls	r5, r5, #16
 8002184:	0c2d      	lsrs	r5, r5, #16
 8002186:	52a5      	strh	r5, [r4, r2]
 8002188:	5aa5      	ldrh	r5, [r4, r2]
 800218a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800218e:	52a5      	strh	r5, [r4, r2]
 8002190:	784c      	ldrb	r4, [r1, #1]
 8002192:	2c00      	cmp	r4, #0
 8002194:	f040 80af 	bne.w	80022f6 <USB_EPStartXfer+0x1fa>
 8002198:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800219c:	780a      	ldrb	r2, [r1, #0]
 800219e:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	441c      	add	r4, r3
 80021a6:	5aa3      	ldrh	r3, [r4, r2]
 80021a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	52a3      	strh	r3, [r4, r2]
 80021b2:	5aa3      	ldrh	r3, [r4, r2]
 80021b4:	4333      	orrs	r3, r6
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	52a3      	strh	r3, [r4, r2]
 80021ba:	780a      	ldrb	r2, [r1, #0]
 80021bc:	e7c3      	b.n	8002146 <USB_EPStartXfer+0x4a>
    if (ep->xfer_len > ep->maxpacket)
 80021be:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
 80021c0:	bf86      	itte	hi
 80021c2:	1a9c      	subhi	r4, r3, r2
 80021c4:	4613      	movhi	r3, r2
      ep->xfer_len = 0U;
 80021c6:	2400      	movls	r4, #0
 80021c8:	b29a      	uxth	r2, r3
    if (ep->doublebuffer == 0U)
 80021ca:	7b0d      	ldrb	r5, [r1, #12]
 80021cc:	3201      	adds	r2, #1
 80021ce:	0856      	lsrs	r6, r2, #1
 80021d0:	618c      	str	r4, [r1, #24]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	694a      	ldr	r2, [r1, #20]
 80021d6:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 80021da:	b36d      	cbz	r5, 8002238 <USB_EPStartXfer+0x13c>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80021dc:	780d      	ldrb	r5, [r1, #0]
 80021de:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 80021e2:	012d      	lsls	r5, r5, #4
 80021e4:	0664      	lsls	r4, r4, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80021e6:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80021ea:	d555      	bpl.n	8002298 <USB_EPStartXfer+0x19c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80021ec:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80021f0:	4464      	add	r4, ip
 80021f2:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr1;
 80021f4:	894c      	ldrh	r4, [r1, #10]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80021f6:	eb07 0444 	add.w	r4, r7, r4, lsl #1

  for (i = n; i != 0U; i--)
 80021fa:	b13e      	cbz	r6, 800220c <USB_EPStartXfer+0x110>
 80021fc:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8002200:	f832 5b02 	ldrh.w	r5, [r2], #2
 8002204:	4293      	cmp	r3, r2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8002206:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 800220a:	d1f9      	bne.n	8002200 <USB_EPStartXfer+0x104>
 800220c:	780c      	ldrb	r4, [r1, #0]
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800220e:	784b      	ldrb	r3, [r1, #1]
 8002210:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d145      	bne.n	80022a4 <USB_EPStartXfer+0x1a8>
 8002218:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800221c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002220:	051b      	lsls	r3, r3, #20
 8002222:	0d1b      	lsrs	r3, r3, #20
 8002224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800222c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8002230:	780a      	ldrb	r2, [r1, #0]
 8002232:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002236:	e016      	b.n	8002266 <USB_EPStartXfer+0x16a>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002238:	88cc      	ldrh	r4, [r1, #6]
 800223a:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800223e:	b13e      	cbz	r6, 8002250 <USB_EPStartXfer+0x154>
 8002240:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8002244:	f832 5b02 	ldrh.w	r5, [r2], #2
    *pdwVal = (uint16_t)temp2;
 8002248:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 800224c:	42a6      	cmp	r6, r4
 800224e:	d1f9      	bne.n	8002244 <USB_EPStartXfer+0x148>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002250:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8002254:	780c      	ldrb	r4, [r1, #0]
 8002256:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800225a:	442a      	add	r2, r5
 800225c:	0124      	lsls	r4, r4, #4
 800225e:	52a3      	strh	r3, [r4, r2]
 8002260:	780a      	ldrb	r2, [r1, #0]
 8002262:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002266:	8811      	ldrh	r1, [r2, #0]
 8002268:	4b37      	ldr	r3, [pc, #220]	; (8002348 <USB_EPStartXfer+0x24c>)
}
 800226a:	2000      	movs	r0, #0
 800226c:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800226e:	400b      	ands	r3, r1
 8002270:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227c:	8013      	strh	r3, [r2, #0]
}
 800227e:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002280:	5aa3      	ldrh	r3, [r4, r2]
 8002282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	52a3      	strh	r3, [r4, r2]
 800228c:	5aa3      	ldrh	r3, [r4, r2]
 800228e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002292:	52a3      	strh	r3, [r4, r2]
 8002294:	780a      	ldrb	r2, [r1, #0]
 8002296:	e756      	b.n	8002146 <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002298:	f200 4404 	addw	r4, r0, #1028	; 0x404
 800229c:	4464      	add	r4, ip
 800229e:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr0;
 80022a0:	890c      	ldrh	r4, [r1, #8]
 80022a2:	e7a8      	b.n	80021f6 <USB_EPStartXfer+0xfa>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d1de      	bne.n	8002266 <USB_EPStartXfer+0x16a>
 80022a8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80022ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b0:	051b      	lsls	r3, r3, #20
 80022b2:	0d1b      	lsrs	r3, r3, #20
 80022b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022bc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80022c0:	780a      	ldrb	r2, [r1, #0]
 80022c2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80022c6:	e7ce      	b.n	8002266 <USB_EPStartXfer+0x16a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80022c8:	095d      	lsrs	r5, r3, #5
 80022ca:	06df      	lsls	r7, r3, #27
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <USB_EPStartXfer+0x248>)
 80022ce:	bf08      	it	eq
 80022d0:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80022d4:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 80022d8:	b29b      	uxth	r3, r3
 80022da:	52a3      	strh	r3, [r4, r2]
 80022dc:	780a      	ldrb	r2, [r1, #0]
 80022de:	e732      	b.n	8002146 <USB_EPStartXfer+0x4a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80022e0:	2b3e      	cmp	r3, #62	; 0x3e
 80022e2:	d816      	bhi.n	8002312 <USB_EPStartXfer+0x216>
 80022e4:	085d      	lsrs	r5, r3, #1
 80022e6:	07de      	lsls	r6, r3, #31
 80022e8:	bf48      	it	mi
 80022ea:	3501      	addmi	r5, #1
 80022ec:	02ad      	lsls	r5, r5, #10
 80022ee:	b2ad      	uxth	r5, r5
 80022f0:	52a5      	strh	r5, [r4, r2]
 80022f2:	784c      	ldrb	r4, [r1, #1]
 80022f4:	b1d4      	cbz	r4, 800232c <USB_EPStartXfer+0x230>
 80022f6:	2c01      	cmp	r4, #1
 80022f8:	780a      	ldrb	r2, [r1, #0]
 80022fa:	f47f af24 	bne.w	8002146 <USB_EPStartXfer+0x4a>
 80022fe:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8002302:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b29b      	uxth	r3, r3
 800230a:	442c      	add	r4, r5
 800230c:	52a3      	strh	r3, [r4, r2]
 800230e:	780a      	ldrb	r2, [r1, #0]
 8002310:	e719      	b.n	8002146 <USB_EPStartXfer+0x4a>
 8002312:	095e      	lsrs	r6, r3, #5
 8002314:	06dd      	lsls	r5, r3, #27
 8002316:	4d0b      	ldr	r5, [pc, #44]	; (8002344 <USB_EPStartXfer+0x248>)
 8002318:	bf08      	it	eq
 800231a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800231e:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8002322:	b2ad      	uxth	r5, r5
 8002324:	52a5      	strh	r5, [r4, r2]
 8002326:	784c      	ldrb	r4, [r1, #1]
 8002328:	2c00      	cmp	r4, #0
 800232a:	d1e4      	bne.n	80022f6 <USB_EPStartXfer+0x1fa>
 800232c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002330:	780b      	ldrb	r3, [r1, #0]
 8002332:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002336:	4422      	add	r2, r4
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	52d5      	strh	r5, [r2, r3]
 800233c:	780a      	ldrb	r2, [r1, #0]
 800233e:	e702      	b.n	8002146 <USB_EPStartXfer+0x4a>
 8002340:	ffffbf8f 	.word	0xffffbf8f
 8002344:	ffff8000 	.word	0xffff8000
 8002348:	ffff8fbf 	.word	0xffff8fbf

0800234c <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800234c:	784b      	ldrb	r3, [r1, #1]
 800234e:	780a      	ldrb	r2, [r1, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002350:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
  if (ep->is_in != 0U)
 8002354:	b95b      	cbnz	r3, 800236e <USB_EPSetStall+0x22>
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <USB_EPSetStall+0x3c>)
 8002358:	400b      	ands	r3, r1
 800235a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800235e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002366:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800236a:	2000      	movs	r0, #0
 800236c:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <USB_EPSetStall+0x40>)
 8002370:	400b      	ands	r3, r1
 8002372:	f083 0310 	eor.w	r3, r3, #16
 8002376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8002382:	2000      	movs	r0, #0
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	ffffbf8f 	.word	0xffffbf8f
 800238c:	ffff8fbf 	.word	0xffff8fbf

08002390 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8002390:	7b0b      	ldrb	r3, [r1, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d139      	bne.n	800240a <USB_EPClearStall+0x7a>
{
 8002396:	b410      	push	{r4}
 8002398:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 800239a:	784c      	ldrb	r4, [r1, #1]
 800239c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80023a0:	b314      	cbz	r4, 80023e8 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023a2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80023a6:	0652      	lsls	r2, r2, #25
 80023a8:	d50b      	bpl.n	80023c2 <USB_EPClearStall+0x32>
 80023aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80023ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023b2:	0512      	lsls	r2, r2, #20
 80023b4:	0d12      	lsrs	r2, r2, #20
 80023b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80023be:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80023c2:	78cb      	ldrb	r3, [r1, #3]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d01d      	beq.n	8002404 <USB_EPClearStall+0x74>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80023c8:	780a      	ldrb	r2, [r1, #0]
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <USB_EPClearStall+0xa0>)
 80023cc:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
}
 80023d0:	bc10      	pop	{r4}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80023d2:	400b      	ands	r3, r1
 80023d4:	f083 0320 	eor.w	r3, r3, #32
 80023d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80023e4:	2000      	movs	r0, #0
 80023e6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023e8:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 80023ec:	0464      	lsls	r4, r4, #17
 80023ee:	d40e      	bmi.n	800240e <USB_EPClearStall+0x7e>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023f0:	8811      	ldrh	r1, [r2, #0]
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <USB_EPClearStall+0xa4>)
 80023f4:	400b      	ands	r3, r1
 80023f6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80023fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002402:	8013      	strh	r3, [r2, #0]
}
 8002404:	2000      	movs	r0, #0
 8002406:	bc10      	pop	{r4}
 8002408:	4770      	bx	lr
 800240a:	2000      	movs	r0, #0
 800240c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800240e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002412:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002416:	0512      	lsls	r2, r2, #20
 8002418:	0d12      	lsrs	r2, r2, #20
 800241a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800241e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002422:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002426:	780a      	ldrb	r2, [r1, #0]
 8002428:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800242c:	e7e0      	b.n	80023f0 <USB_EPClearStall+0x60>
 800242e:	bf00      	nop
 8002430:	ffff8fbf 	.word	0xffff8fbf
 8002434:	ffffbf8f 	.word	0xffffbf8f

08002438 <USB_SetDevAddress>:
  if (address == 0U)
 8002438:	b911      	cbnz	r1, 8002440 <USB_SetDevAddress+0x8>
    USBx->DADDR = USB_DADDR_EF;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8002440:	2000      	movs	r0, #0
 8002442:	4770      	bx	lr

08002444 <USB_DevConnect>:
 8002444:	2000      	movs	r0, #0
 8002446:	4770      	bx	lr

08002448 <USB_DevDisconnect>:
 8002448:	2000      	movs	r0, #0
 800244a:	4770      	bx	lr

0800244c <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800244c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <USB_EP0_OutStart>:
}
 8002454:	2000      	movs	r0, #0
 8002456:	4770      	bx	lr

08002458 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002458:	eb00 0242 	add.w	r2, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800245c:	0858      	lsrs	r0, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800245e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8002462:	d01a      	beq.n	800249a <USB_ReadPMA+0x42>
{
 8002464:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002466:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8002468:	4606      	mov	r6, r0
 800246a:	1c8d      	adds	r5, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 800246c:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8002470:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002472:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002474:	ea4f 2c14 	mov.w	ip, r4, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002478:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800247c:	f805 cc01 	strb.w	ip, [r5, #-1]
 8002480:	f105 0502 	add.w	r5, r5, #2
  for (i = n; i != 0U; i--)
 8002484:	d1f2      	bne.n	800246c <USB_ReadPMA+0x14>
  if ((wNBytes % 2U) != 0U)
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 8002486:	bcf0      	pop	{r4, r5, r6, r7}
 8002488:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800248c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  if ((wNBytes % 2U) != 0U)
 8002490:	07d8      	lsls	r0, r3, #31
    temp = *pdwVal;
 8002492:	bf44      	itt	mi
 8002494:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002496:	700b      	strbmi	r3, [r1, #0]
}
 8002498:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 800249a:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 800249c:	bf44      	itt	mi
 800249e:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80024a0:	700b      	strbmi	r3, [r1, #0]
 80024a2:	4770      	bx	lr

080024a4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80024a4:	2329      	movs	r3, #41	; 0x29
 80024a6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 80024a8:	4800      	ldr	r0, [pc, #0]	; (80024ac <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 80024aa:	4770      	bx	lr
 80024ac:	20000040 	.word	0x20000040

080024b0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80024b0:	2329      	movs	r3, #41	; 0x29
 80024b2:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 80024b4:	4800      	ldr	r0, [pc, #0]	; (80024b8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 80024b6:	4770      	bx	lr
 80024b8:	2000006c 	.word	0x2000006c

080024bc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80024bc:	2329      	movs	r3, #41	; 0x29
 80024be:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 80024c0:	4800      	ldr	r0, [pc, #0]	; (80024c4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 80024c2:	4770      	bx	lr
 80024c4:	200000c8 	.word	0x200000c8

080024c8 <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80024ce:	4618      	mov	r0, r3
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80024d0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop

080024d8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80024d8:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80024da:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if (hhid->IsReportAvailable == 1U)
 80024de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80024e4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80024e8:	7861      	ldrb	r1, [r4, #1]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	7820      	ldrb	r0, [r4, #0]
 80024ee:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	64e3      	str	r3, [r4, #76]	; 0x4c
  }

  return USBD_OK;
}
 80024f4:	2000      	movs	r0, #0
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80024f8:	230a      	movs	r3, #10
 80024fa:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 80024fc:	4800      	ldr	r0, [pc, #0]	; (8002500 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 80024fe:	4770      	bx	lr
 8002500:	200000bc 	.word	0x200000bc

08002504 <USBD_CUSTOM_HID_DataOut>:
{
 8002504:	b538      	push	{r3, r4, r5, lr}
 8002506:	4604      	mov	r4, r0
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8002508:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800250c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002510:	7869      	ldrb	r1, [r5, #1]
 8002512:	7828      	ldrb	r0, [r5, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8002518:	462a      	mov	r2, r5
 800251a:	4620      	mov	r0, r4
 800251c:	2340      	movs	r3, #64	; 0x40
 800251e:	2101      	movs	r1, #1
 8002520:	f001 fc40 	bl	8003da4 <USBD_LL_PrepareReceive>
}
 8002524:	2000      	movs	r0, #0
 8002526:	bd38      	pop	{r3, r4, r5, pc}

08002528 <USBD_CUSTOM_HID_Setup>:
  uint16_t status_info = 0U;
 8002528:	2200      	movs	r2, #0
{
 800252a:	b510      	push	{r4, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800252c:	780b      	ldrb	r3, [r1, #0]
{
 800252e:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002530:	f013 0360 	ands.w	r3, r3, #96	; 0x60
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8002534:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  uint16_t status_info = 0U;
 8002538:	f8ad 2006 	strh.w	r2, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800253c:	d022      	beq.n	8002584 <USBD_CUSTOM_HID_Setup+0x5c>
 800253e:	2b20      	cmp	r3, #32
 8002540:	d004      	beq.n	800254c <USBD_CUSTOM_HID_Setup+0x24>
            USBD_CtlError(pdev, req);
 8002542:	f000 fca3 	bl	8002e8c <USBD_CtlError>
            ret = USBD_FAIL;
 8002546:	2002      	movs	r0, #2
}
 8002548:	b002      	add	sp, #8
 800254a:	bd10      	pop	{r4, pc}
      switch (req->bRequest)
 800254c:	784b      	ldrb	r3, [r1, #1]
 800254e:	3b02      	subs	r3, #2
 8002550:	2b09      	cmp	r3, #9
 8002552:	d8f6      	bhi.n	8002542 <USBD_CUSTOM_HID_Setup+0x1a>
 8002554:	a201      	add	r2, pc, #4	; (adr r2, 800255c <USBD_CUSTOM_HID_Setup+0x34>)
 8002556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255a:	bf00      	nop
 800255c:	08002641 	.word	0x08002641
 8002560:	08002633 	.word	0x08002633
 8002564:	08002543 	.word	0x08002543
 8002568:	08002543 	.word	0x08002543
 800256c:	08002543 	.word	0x08002543
 8002570:	08002543 	.word	0x08002543
 8002574:	08002543 	.word	0x08002543
 8002578:	08002623 	.word	0x08002623
 800257c:	08002619 	.word	0x08002619
 8002580:	08002611 	.word	0x08002611
      switch (req->bRequest)
 8002584:	784b      	ldrb	r3, [r1, #1]
 8002586:	2b0b      	cmp	r3, #11
 8002588:	d8db      	bhi.n	8002542 <USBD_CUSTOM_HID_Setup+0x1a>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <USBD_CUSTOM_HID_Setup+0x68>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025fb 	.word	0x080025fb
 8002594:	08002543 	.word	0x08002543
 8002598:	08002543 	.word	0x08002543
 800259c:	08002543 	.word	0x08002543
 80025a0:	08002543 	.word	0x08002543
 80025a4:	08002543 	.word	0x08002543
 80025a8:	080025e1 	.word	0x080025e1
 80025ac:	08002543 	.word	0x08002543
 80025b0:	08002543 	.word	0x08002543
 80025b4:	08002543 	.word	0x08002543
 80025b8:	080025d1 	.word	0x080025d1
 80025bc:	080025c1 	.word	0x080025c1
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d1bc      	bne.n	8002542 <USBD_CUSTOM_HID_Setup+0x1a>
            hhid->AltSetting = (uint8_t)(req->wValue);
 80025c8:	788b      	ldrb	r3, [r1, #2]
  uint8_t ret = USBD_OK;
 80025ca:	2000      	movs	r0, #0
            hhid->AltSetting = (uint8_t)(req->wValue);
 80025cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80025ce:	e7bb      	b.n	8002548 <USBD_CUSTOM_HID_Setup+0x20>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d1b4      	bne.n	8002542 <USBD_CUSTOM_HID_Setup+0x1a>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80025d8:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80025dc:	2201      	movs	r2, #1
 80025de:	e007      	b.n	80025f0 <USBD_CUSTOM_HID_Setup+0xc8>
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80025e0:	884b      	ldrh	r3, [r1, #2]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	2b22      	cmp	r3, #34	; 0x22
 80025e6:	d032      	beq.n	800264e <USBD_CUSTOM_HID_Setup+0x126>
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80025e8:	2b21      	cmp	r3, #33	; 0x21
 80025ea:	d038      	beq.n	800265e <USBD_CUSTOM_HID_Setup+0x136>
  uint8_t  *pbuf = NULL;
 80025ec:	2100      	movs	r1, #0
  uint16_t len = 0U;
 80025ee:	460a      	mov	r2, r1
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80025f0:	f000 fc7e 	bl	8002ef0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80025f4:	2000      	movs	r0, #0
}
 80025f6:	b002      	add	sp, #8
 80025f8:	bd10      	pop	{r4, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d19f      	bne.n	8002542 <USBD_CUSTOM_HID_Setup+0x1a>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002602:	2202      	movs	r2, #2
 8002604:	f10d 0106 	add.w	r1, sp, #6
 8002608:	f000 fc72 	bl	8002ef0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800260c:	2000      	movs	r0, #0
 800260e:	e79b      	b.n	8002548 <USBD_CUSTOM_HID_Setup+0x20>
          hhid->Protocol = (uint8_t)(req->wValue);
 8002610:	788b      	ldrb	r3, [r1, #2]
  uint8_t ret = USBD_OK;
 8002612:	2000      	movs	r0, #0
          hhid->Protocol = (uint8_t)(req->wValue);
 8002614:	6423      	str	r3, [r4, #64]	; 0x40
          break;
 8002616:	e797      	b.n	8002548 <USBD_CUSTOM_HID_Setup+0x20>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002618:	884b      	ldrh	r3, [r1, #2]
  uint8_t ret = USBD_OK;
 800261a:	2000      	movs	r0, #0
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	6463      	str	r3, [r4, #68]	; 0x44
          break;
 8002620:	e792      	b.n	8002548 <USBD_CUSTOM_HID_Setup+0x20>
          hhid->IsReportAvailable = 1U;
 8002622:	2301      	movs	r3, #1
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8002624:	88ca      	ldrh	r2, [r1, #6]
          hhid->IsReportAvailable = 1U;
 8002626:	64e3      	str	r3, [r4, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8002628:	4621      	mov	r1, r4
 800262a:	f000 fc77 	bl	8002f1c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800262e:	2000      	movs	r0, #0
          break;
 8002630:	e78a      	b.n	8002548 <USBD_CUSTOM_HID_Setup+0x20>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8002632:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002636:	2201      	movs	r2, #1
 8002638:	f000 fc5a 	bl	8002ef0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800263c:	2000      	movs	r0, #0
          break;
 800263e:	e783      	b.n	8002548 <USBD_CUSTOM_HID_Setup+0x20>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8002640:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8002644:	2201      	movs	r2, #1
 8002646:	f000 fc53 	bl	8002ef0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800264a:	2000      	movs	r0, #0
          break;
 800264c:	e77c      	b.n	8002548 <USBD_CUSTOM_HID_Setup+0x20>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800264e:	88ca      	ldrh	r2, [r1, #6]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8002650:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8002654:	2a21      	cmp	r2, #33	; 0x21
 8002656:	bf28      	it	cs
 8002658:	2221      	movcs	r2, #33	; 0x21
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800265a:	6819      	ldr	r1, [r3, #0]
 800265c:	e7c8      	b.n	80025f0 <USBD_CUSTOM_HID_Setup+0xc8>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800265e:	88ca      	ldrh	r2, [r1, #6]
              pbuf = USBD_CUSTOM_HID_Desc;
 8002660:	4902      	ldr	r1, [pc, #8]	; (800266c <USBD_CUSTOM_HID_Setup+0x144>)
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8002662:	2a21      	cmp	r2, #33	; 0x21
 8002664:	bf28      	it	cs
 8002666:	2221      	movcs	r2, #33	; 0x21
 8002668:	e7c2      	b.n	80025f0 <USBD_CUSTOM_HID_Setup+0xc8>
 800266a:	bf00      	nop
 800266c:	20000098 	.word	0x20000098

08002670 <USBD_CUSTOM_HID_DeInit>:
{
 8002670:	b538      	push	{r3, r4, r5, lr}
 8002672:	4604      	mov	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8002674:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8002676:	2181      	movs	r1, #129	; 0x81
 8002678:	f001 fb3e 	bl	8003cf8 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800267c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800267e:	4620      	mov	r0, r4
 8002680:	2101      	movs	r1, #1
 8002682:	f001 fb39 	bl	8003cf8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002686:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800268a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  if (pdev->pClassData != NULL)
 800268e:	b14b      	cbz	r3, 80026a4 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002690:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002698:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800269c:	f001 fb94 	bl	8003dc8 <USBD_static_free>
    pdev->pClassData = NULL;
 80026a0:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80026a4:	2000      	movs	r0, #0
 80026a6:	bd38      	pop	{r3, r4, r5, pc}

080026a8 <USBD_CUSTOM_HID_Init>:
{
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	4604      	mov	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80026ac:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80026ae:	2340      	movs	r3, #64	; 0x40
 80026b0:	2203      	movs	r2, #3
 80026b2:	2181      	movs	r1, #129	; 0x81
 80026b4:	f001 fb10 	bl	8003cd8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80026b8:	4629      	mov	r1, r5
 80026ba:	2340      	movs	r3, #64	; 0x40
 80026bc:	2203      	movs	r2, #3
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80026be:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80026c0:	4620      	mov	r0, r4
 80026c2:	f001 fb09 	bl	8003cd8 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80026c6:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80026ca:	2054      	movs	r0, #84	; 0x54
 80026cc:	f001 fb78 	bl	8003dc0 <USBD_static_malloc>
 80026d0:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80026d4:	b178      	cbz	r0, 80026f6 <USBD_CUSTOM_HID_Init+0x4e>
    hhid->state = CUSTOM_HID_IDLE;
 80026d6:	2700      	movs	r7, #0
 80026d8:	4606      	mov	r6, r0
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80026da:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hhid->state = CUSTOM_HID_IDLE;
 80026de:	f880 7050 	strb.w	r7, [r0, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80026e6:	4632      	mov	r2, r6
 80026e8:	4629      	mov	r1, r5
 80026ea:	4620      	mov	r0, r4
 80026ec:	2340      	movs	r3, #64	; 0x40
 80026ee:	f001 fb59 	bl	8003da4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80026f2:	4638      	mov	r0, r7
}
 80026f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 80026f6:	4628      	mov	r0, r5
}
 80026f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026fa:	bf00      	nop

080026fc <USBD_CUSTOM_HID_SendReport>:
{
 80026fc:	b538      	push	{r3, r4, r5, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80026fe:	f890 529c 	ldrb.w	r5, [r0, #668]	; 0x29c
 8002702:	2d03      	cmp	r5, #3
 8002704:	d001      	beq.n	800270a <USBD_CUSTOM_HID_SendReport+0xe>
  return USBD_OK;
 8002706:	2000      	movs	r0, #0
}
 8002708:	bd38      	pop	{r3, r4, r5, pc}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800270a:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
    if (hhid->state == CUSTOM_HID_IDLE)
 800270e:	f895 4050 	ldrb.w	r4, [r5, #80]	; 0x50
 8002712:	b10c      	cbz	r4, 8002718 <USBD_CUSTOM_HID_SendReport+0x1c>
      return USBD_BUSY;
 8002714:	2001      	movs	r0, #1
}
 8002716:	bd38      	pop	{r3, r4, r5, pc}
 8002718:	4613      	mov	r3, r2
 800271a:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 800271c:	2101      	movs	r1, #1
 800271e:	f885 1050 	strb.w	r1, [r5, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8002722:	2181      	movs	r1, #129	; 0x81
 8002724:	f001 fb30 	bl	8003d88 <USBD_LL_Transmit>
  return USBD_OK;
 8002728:	4620      	mov	r0, r4
}
 800272a:	bd38      	pop	{r3, r4, r5, pc}

0800272c <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800272c:	b119      	cbz	r1, 8002736 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800272e:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8002732:	2000      	movs	r0, #0
 8002734:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002736:	2002      	movs	r0, #2
  }

  return ret;
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800273c:	b188      	cbz	r0, 8002762 <USBD_Init+0x26>
{
 800273e:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002740:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002744:	b113      	cbz	r3, 800274c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800274c:	b109      	cbz	r1, 8002752 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800274e:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002752:	2301      	movs	r3, #1
  pdev->id = id;
 8002754:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002756:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800275a:	f001 fa75 	bl	8003c48 <USBD_LL_Init>

  return USBD_OK;
 800275e:	2000      	movs	r0, #0
}
 8002760:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002762:	2002      	movs	r0, #2
}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002768:	b119      	cbz	r1, 8002772 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800276a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800276e:	2000      	movs	r0, #0
 8002770:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002772:	2002      	movs	r0, #2
  }

  return status;
}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002778:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800277a:	f001 fa9f 	bl	8003cbc <USBD_LL_Start>

  return USBD_OK;
}
 800277e:	2000      	movs	r0, #0
 8002780:	bd08      	pop	{r3, pc}
 8002782:	bf00      	nop

08002784 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002784:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002786:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800278a:	b11b      	cbz	r3, 8002794 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4798      	blx	r3
 8002790:	b900      	cbnz	r0, 8002794 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002792:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002794:	2002      	movs	r0, #2
}
 8002796:	bd08      	pop	{r3, pc}

08002798 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002798:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800279a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4798      	blx	r3

  return USBD_OK;
}
 80027a2:	2000      	movs	r0, #0
 80027a4:	bd08      	pop	{r3, pc}
 80027a6:	bf00      	nop

080027a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80027ac:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80027b0:	4628      	mov	r0, r5
 80027b2:	f000 fb57 	bl	8002e64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80027b6:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80027b8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 80027bc:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
  switch (pdev->request.bmRequest & 0x1FU)
 80027c0:	f001 031f 	and.w	r3, r1, #31
 80027c4:	4283      	cmp	r3, r0
  pdev->ep0_state = USBD_EP0_SETUP;
 80027c6:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80027ca:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80027ce:	d015      	beq.n	80027fc <USBD_LL_SetupStage+0x54>
 80027d0:	d30e      	bcc.n	80027f0 <USBD_LL_SetupStage+0x48>
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d006      	beq.n	80027e4 <USBD_LL_SetupStage+0x3c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80027d6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80027da:	4620      	mov	r0, r4
 80027dc:	f001 fa9a 	bl	8003d14 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 80027e0:	2000      	movs	r0, #0
 80027e2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 80027e4:	4629      	mov	r1, r5
 80027e6:	4620      	mov	r0, r4
 80027e8:	f000 faa6 	bl	8002d38 <USBD_StdEPReq>
}
 80027ec:	2000      	movs	r0, #0
 80027ee:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 80027f0:	4629      	mov	r1, r5
 80027f2:	4620      	mov	r0, r4
 80027f4:	f000 f8f6 	bl	80029e4 <USBD_StdDevReq>
}
 80027f8:	2000      	movs	r0, #0
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80027fc:	4629      	mov	r1, r5
 80027fe:	4620      	mov	r0, r4
 8002800:	f000 fa6e 	bl	8002ce0 <USBD_StdItfReq>
}
 8002804:	2000      	movs	r0, #0
 8002806:	bd38      	pop	{r3, r4, r5, pc}

08002808 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800280c:	b941      	cbnz	r1, 8002820 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800280e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002812:	2b03      	cmp	r3, #3
 8002814:	d00f      	beq.n	8002836 <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002816:	2b05      	cmp	r3, #5
 8002818:	460c      	mov	r4, r1
 800281a:	d02e      	beq.n	800287a <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800281c:	2000      	movs	r0, #0
}
 800281e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8002820:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	b1c3      	cbz	r3, 800285a <USBD_LL_DataOutStage+0x52>
 8002828:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800282c:	2a03      	cmp	r2, #3
 800282e:	d114      	bne.n	800285a <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 8002830:	4798      	blx	r3
  return USBD_OK;
 8002832:	2000      	movs	r0, #0
}
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	4616      	mov	r6, r2
      if (pep->rem_length > pep->maxpacket)
 8002838:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 800283c:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8002840:	4293      	cmp	r3, r2
 8002842:	d90c      	bls.n	800285e <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 8002844:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 8002846:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8002848:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800284c:	bf8c      	ite	hi
 800284e:	b29a      	uxthhi	r2, r3
 8002850:	b292      	uxthls	r2, r2
 8002852:	4631      	mov	r1, r6
 8002854:	f000 fb72 	bl	8002f3c <USBD_CtlContinueRx>
 8002858:	e7e0      	b.n	800281c <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 800285a:	2002      	movs	r0, #2
}
 800285c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800285e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	b123      	cbz	r3, 8002870 <USBD_LL_DataOutStage+0x68>
 8002866:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800286a:	2a03      	cmp	r2, #3
 800286c:	d100      	bne.n	8002870 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 800286e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002870:	4628      	mov	r0, r5
 8002872:	f000 fb6b 	bl	8002f4c <USBD_CtlSendStatus>
  return USBD_OK;
 8002876:	2000      	movs	r0, #0
}
 8002878:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 800287a:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800287e:	f001 fa49 	bl	8003d14 <USBD_LL_StallEP>
  return USBD_OK;
 8002882:	4620      	mov	r0, r4
}
 8002884:	bd70      	pop	{r4, r5, r6, pc}
 8002886:	bf00      	nop

08002888 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800288c:	b981      	cbnz	r1, 80028b0 <USBD_LL_DataInStage+0x28>
 800288e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002890:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002894:	2a02      	cmp	r2, #2
 8002896:	d019      	beq.n	80028cc <USBD_LL_DataInStage+0x44>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002898:	f032 0304 	bics.w	r3, r2, #4
 800289c:	d102      	bne.n	80028a4 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	f001 fa38 	bl	8003d14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80028a4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80028a8:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d00b      	beq.n	80028c6 <USBD_LL_DataInStage+0x3e>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80028b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	b363      	cbz	r3, 8002912 <USBD_LL_DataInStage+0x8a>
 80028b8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80028bc:	2a03      	cmp	r2, #3
 80028be:	d128      	bne.n	8002912 <USBD_LL_DataInStage+0x8a>
    pdev->pClass->DataIn(pdev, epnum);
 80028c0:	4798      	blx	r3
  return USBD_OK;
 80028c2:	2000      	movs	r0, #0
}
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 80028c6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80028cc:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 80028d0:	4296      	cmp	r6, r2
 80028d2:	d820      	bhi.n	8002916 <USBD_LL_DataInStage+0x8e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80028d4:	69c3      	ldr	r3, [r0, #28]
 80028d6:	fbb3 f5f2 	udiv	r5, r3, r2
 80028da:	fb02 3515 	mls	r5, r2, r5, r3
 80028de:	b90d      	cbnz	r5, 80028e4 <USBD_LL_DataInStage+0x5c>
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d926      	bls.n	8002932 <USBD_LL_DataInStage+0xaa>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80028e4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	b12b      	cbz	r3, 80028f8 <USBD_LL_DataInStage+0x70>
 80028ec:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80028f0:	2a03      	cmp	r2, #3
 80028f2:	d101      	bne.n	80028f8 <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 80028f4:	4620      	mov	r0, r4
 80028f6:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	4620      	mov	r0, r4
 80028fc:	f001 fa0a 	bl	8003d14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002900:	4620      	mov	r0, r4
 8002902:	f000 fb2f 	bl	8002f64 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8002906:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 800290a:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800290c:	2b01      	cmp	r3, #1
 800290e:	d1ce      	bne.n	80028ae <USBD_LL_DataInStage+0x26>
 8002910:	e7d9      	b.n	80028c6 <USBD_LL_DataInStage+0x3e>
    return USBD_FAIL;
 8002912:	2002      	movs	r0, #2
}
 8002914:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8002916:	1ab2      	subs	r2, r6, r2
 8002918:	460d      	mov	r5, r1
 800291a:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800291c:	4619      	mov	r1, r3
 800291e:	b292      	uxth	r2, r2
 8002920:	f000 faf4 	bl	8002f0c <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002924:	462b      	mov	r3, r5
 8002926:	462a      	mov	r2, r5
 8002928:	4629      	mov	r1, r5
 800292a:	4620      	mov	r0, r4
 800292c:	f001 fa3a 	bl	8003da4 <USBD_LL_PrepareReceive>
 8002930:	e7b8      	b.n	80028a4 <USBD_LL_DataInStage+0x1c>
            (pep->total_length >= pep->maxpacket) &&
 8002932:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8002936:	4293      	cmp	r3, r2
 8002938:	d2d4      	bcs.n	80028e4 <USBD_LL_DataInStage+0x5c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800293a:	462a      	mov	r2, r5
 800293c:	f000 fae6 	bl	8002f0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002940:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8002944:	e7ee      	b.n	8002924 <USBD_LL_DataInStage+0x9c>
 8002946:	bf00      	nop

08002948 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8002948:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800294a:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800294c:	2640      	movs	r6, #64	; 0x40
{
 800294e:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002950:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002952:	4611      	mov	r1, r2
 8002954:	4633      	mov	r3, r6
 8002956:	f001 f9bf 	bl	8003cd8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800295a:	4633      	mov	r3, r6
 800295c:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800295e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002962:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002966:	4620      	mov	r0, r4
 8002968:	2200      	movs	r2, #0
 800296a:	f001 f9b5 	bl	8003cd8 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800296e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002970:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002974:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002976:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002978:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800297c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002980:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002982:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8002986:	b123      	cbz	r3, 8002992 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002988:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800298c:	4620      	mov	r0, r4
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002992:	2000      	movs	r0, #0
 8002994:	bd70      	pop	{r4, r5, r6, pc}
 8002996:	bf00      	nop

08002998 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002998:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800299a:	2000      	movs	r0, #0
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80029a0:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80029a2:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 80029a4:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80029a8:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 80029aa:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80029ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 80029b2:	4770      	bx	lr

080029b4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80029b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80029b8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80029ba:	bf04      	itt	eq
 80029bc:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80029c0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80029c4:	2000      	movs	r0, #0
 80029c6:	4770      	bx	lr

080029c8 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80029c8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80029cc:	2a03      	cmp	r2, #3
 80029ce:	d001      	beq.n	80029d4 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80029d0:	2000      	movs	r0, #0
 80029d2:	4770      	bx	lr
{
 80029d4:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 80029d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	b103      	cbz	r3, 80029e0 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80029de:	4798      	blx	r3
}
 80029e0:	2000      	movs	r0, #0
 80029e2:	bd08      	pop	{r3, pc}

080029e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80029e4:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029e6:	780b      	ldrb	r3, [r1, #0]
{
 80029e8:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80029ee:	2b20      	cmp	r3, #32
{
 80029f0:	460d      	mov	r5, r1
 80029f2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029f4:	d028      	beq.n	8002a48 <USBD_StdDevReq+0x64>
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d026      	beq.n	8002a48 <USBD_StdDevReq+0x64>
 80029fa:	b153      	cbz	r3, 8002a12 <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	4620      	mov	r0, r4
 8002a00:	f001 f988 	bl	8003d14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002a04:	4620      	mov	r0, r4
 8002a06:	2100      	movs	r1, #0
 8002a08:	f001 f984 	bl	8003d14 <USBD_LL_StallEP>
}
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	b003      	add	sp, #12
 8002a10:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8002a12:	784b      	ldrb	r3, [r1, #1]
 8002a14:	2b09      	cmp	r3, #9
 8002a16:	d8f1      	bhi.n	80029fc <USBD_StdDevReq+0x18>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <USBD_StdDevReq+0x3c>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a9d 	.word	0x08002a9d
 8002a24:	08002ac9 	.word	0x08002ac9
 8002a28:	080029fd 	.word	0x080029fd
 8002a2c:	08002ae5 	.word	0x08002ae5
 8002a30:	080029fd 	.word	0x080029fd
 8002a34:	08002af1 	.word	0x08002af1
 8002a38:	08002b2f 	.word	0x08002b2f
 8002a3c:	080029fd 	.word	0x080029fd
 8002a40:	08002b65 	.word	0x08002b65
 8002a44:	08002a5b 	.word	0x08002a5b
      pdev->pClass->Setup(pdev, req);
 8002a48:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4620      	mov	r0, r4
 8002a52:	4798      	blx	r3
}
 8002a54:	2000      	movs	r0, #0
 8002a56:	b003      	add	sp, #12
 8002a58:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 8002a5a:	7889      	ldrb	r1, [r1, #2]
 8002a5c:	4d9f      	ldr	r5, [pc, #636]	; (8002cdc <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002a5e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002a60:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002a62:	d8cb      	bhi.n	80029fc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8002a64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	f000 810d 	beq.w	8002c88 <USBD_StdDevReq+0x2a4>
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	f040 80fe 	bne.w	8002c70 <USBD_StdDevReq+0x28c>
        if (cfgidx == 0U)
 8002a74:	2900      	cmp	r1, #0
 8002a76:	f000 8127 	beq.w	8002cc8 <USBD_StdDevReq+0x2e4>
        else if (cfgidx != pdev->dev_config)
 8002a7a:	6841      	ldr	r1, [r0, #4]
 8002a7c:	2901      	cmp	r1, #1
 8002a7e:	d009      	beq.n	8002a94 <USBD_StdDevReq+0xb0>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002a80:	b2c9      	uxtb	r1, r1
 8002a82:	f7ff fe89 	bl	8002798 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8002a86:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002a88:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8002a8a:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002a8c:	f7ff fe7a 	bl	8002784 <USBD_SetClassConfig>
 8002a90:	2802      	cmp	r0, #2
 8002a92:	d0b3      	beq.n	80029fc <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 8002a94:	4620      	mov	r0, r4
 8002a96:	f000 fa59 	bl	8002f4c <USBD_CtlSendStatus>
 8002a9a:	e7b7      	b.n	8002a0c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8002a9c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d8a9      	bhi.n	80029fc <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8002aa8:	88cb      	ldrh	r3, [r1, #6]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d1a6      	bne.n	80029fc <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002aae:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup)
 8002ab0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002ab4:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8002ab6:	b103      	cbz	r3, 8002aba <USBD_StdDevReq+0xd6>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002ab8:	60c2      	str	r2, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002aba:	2202      	movs	r2, #2
 8002abc:	f104 010c 	add.w	r1, r4, #12
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f000 fa15 	bl	8002ef0 <USBD_CtlSendData>
 8002ac6:	e7a1      	b.n	8002a0c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8002ac8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002acc:	3b01      	subs	r3, #1
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d894      	bhi.n	80029fc <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002ad2:	884b      	ldrh	r3, [r1, #2]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d199      	bne.n	8002a0c <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8002ade:	f000 fa35 	bl	8002f4c <USBD_CtlSendStatus>
 8002ae2:	e793      	b.n	8002a0c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002ae4:	884b      	ldrh	r3, [r1, #2]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d190      	bne.n	8002a0c <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 8002aea:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 8002aee:	e7d1      	b.n	8002a94 <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002af0:	888b      	ldrh	r3, [r1, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d182      	bne.n	80029fc <USBD_StdDevReq+0x18>
 8002af6:	88cb      	ldrh	r3, [r1, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f af7f 	bne.w	80029fc <USBD_StdDevReq+0x18>
 8002afe:	884d      	ldrh	r5, [r1, #2]
 8002b00:	2d7f      	cmp	r5, #127	; 0x7f
 8002b02:	f63f af7b 	bhi.w	80029fc <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b06:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	f43f af76 	beq.w	80029fc <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002b10:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8002b12:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002b16:	f001 f929 	bl	8003d6c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f000 fa16 	bl	8002f4c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002b20:	2d00      	cmp	r5, #0
 8002b22:	f000 80cd 	beq.w	8002cc0 <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002b26:	2302      	movs	r3, #2
 8002b28:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002b2c:	e76e      	b.n	8002a0c <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 8002b2e:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 8002b30:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8002b32:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002b36:	0a13      	lsrs	r3, r2, #8
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	f63f af5e 	bhi.w	80029fc <USBD_StdDevReq+0x18>
 8002b40:	a101      	add	r1, pc, #4	; (adr r1, 8002b48 <USBD_StdDevReq+0x164>)
 8002b42:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002bfd 	.word	0x08002bfd
 8002b4c:	08002be5 	.word	0x08002be5
 8002b50:	08002c0d 	.word	0x08002c0d
 8002b54:	080029fd 	.word	0x080029fd
 8002b58:	080029fd 	.word	0x080029fd
 8002b5c:	08002bcf 	.word	0x08002bcf
 8002b60:	08002b8b 	.word	0x08002b8b
  if (req->wLength != 1U)
 8002b64:	88ca      	ldrh	r2, [r1, #6]
 8002b66:	2a01      	cmp	r2, #1
 8002b68:	f47f af48 	bne.w	80029fc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8002b6c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f43f af43 	beq.w	80029fc <USBD_StdDevReq+0x18>
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f240 8094 	bls.w	8002ca4 <USBD_StdDevReq+0x2c0>
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	f47f af3d 	bne.w	80029fc <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002b82:	1d01      	adds	r1, r0, #4
 8002b84:	f000 f9b4 	bl	8002ef0 <USBD_CtlSendData>
 8002b88:	e740      	b.n	8002a0c <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002b8a:	7c03      	ldrb	r3, [r0, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f af35 	bne.w	80029fc <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002b92:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002b96:	f10d 0006 	add.w	r0, sp, #6
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8002ba2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002ba6:	88ea      	ldrh	r2, [r5, #6]
 8002ba8:	b16b      	cbz	r3, 8002bc6 <USBD_StdDevReq+0x1e2>
 8002baa:	2a00      	cmp	r2, #0
 8002bac:	f43f af72 	beq.w	8002a94 <USBD_StdDevReq+0xb0>
      len = MIN(len, req->wLength);
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	bf28      	it	cs
 8002bb4:	4613      	movcs	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002bb6:	4601      	mov	r1, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002bbc:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002bc0:	f000 f996 	bl	8002ef0 <USBD_CtlSendData>
 8002bc4:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 8002bc6:	2a00      	cmp	r2, #0
 8002bc8:	f47f af20 	bne.w	8002a0c <USBD_StdDevReq+0x28>
 8002bcc:	e762      	b.n	8002a94 <USBD_StdDevReq+0xb0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002bce:	7c03      	ldrb	r3, [r0, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f af13 	bne.w	80029fc <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002bd6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002bda:	f10d 0006 	add.w	r0, sp, #6
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	4798      	blx	r3
 8002be2:	e7de      	b.n	8002ba2 <USBD_StdDevReq+0x1be>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002be4:	7c02      	ldrb	r2, [r0, #16]
 8002be6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002bea:	2a00      	cmp	r2, #0
 8002bec:	d161      	bne.n	8002cb2 <USBD_StdDevReq+0x2ce>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	f10d 0006 	add.w	r0, sp, #6
 8002bf4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	7043      	strb	r3, [r0, #1]
 8002bfa:	e7d2      	b.n	8002ba2 <USBD_StdDevReq+0x1be>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002bfc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002c00:	f10d 0106 	add.w	r1, sp, #6
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	7c00      	ldrb	r0, [r0, #16]
 8002c08:	4798      	blx	r3
 8002c0a:	e7ca      	b.n	8002ba2 <USBD_StdDevReq+0x1be>
      switch ((uint8_t)(req->wValue))
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	2a05      	cmp	r2, #5
 8002c10:	f63f aef4 	bhi.w	80029fc <USBD_StdDevReq+0x18>
 8002c14:	e8df f002 	tbb	[pc, r2]
 8002c18:	141a2026 	.word	0x141a2026
 8002c1c:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002c1e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f43f aee9 	beq.w	80029fc <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002c2a:	f10d 0106 	add.w	r1, sp, #6
 8002c2e:	7c20      	ldrb	r0, [r4, #16]
 8002c30:	4798      	blx	r3
 8002c32:	e7b6      	b.n	8002ba2 <USBD_StdDevReq+0x1be>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002c34:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f5      	bne.n	8002c2a <USBD_StdDevReq+0x246>
 8002c3e:	e6dd      	b.n	80029fc <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002c40:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ef      	bne.n	8002c2a <USBD_StdDevReq+0x246>
 8002c4a:	e6d7      	b.n	80029fc <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002c4c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e9      	bne.n	8002c2a <USBD_StdDevReq+0x246>
 8002c56:	e6d1      	b.n	80029fc <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002c58:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e3      	bne.n	8002c2a <USBD_StdDevReq+0x246>
 8002c62:	e6cb      	b.n	80029fc <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002c64:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1dd      	bne.n	8002c2a <USBD_StdDevReq+0x246>
 8002c6e:	e6c5      	b.n	80029fc <USBD_StdDevReq+0x18>
  USBD_LL_StallEP(pdev, 0x80U);
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	f001 f84f 	bl	8003d14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002c76:	2100      	movs	r1, #0
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f001 f84b 	bl	8003d14 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8002c7e:	7829      	ldrb	r1, [r5, #0]
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7ff fd89 	bl	8002798 <USBD_ClrClassConfig>
 8002c86:	e6c1      	b.n	8002a0c <USBD_StdDevReq+0x28>
        if (cfgidx)
 8002c88:	2900      	cmp	r1, #0
 8002c8a:	f43f af03 	beq.w	8002a94 <USBD_StdDevReq+0xb0>
          pdev->dev_config = cfgidx;
 8002c8e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002c90:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8002c92:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002c94:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002c98:	f7ff fd74 	bl	8002784 <USBD_SetClassConfig>
 8002c9c:	2802      	cmp	r0, #2
 8002c9e:	f47f aef9 	bne.w	8002a94 <USBD_StdDevReq+0xb0>
 8002ca2:	e6ab      	b.n	80029fc <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8002cac:	f000 f920 	bl	8002ef0 <USBD_CtlSendData>
 8002cb0:	e6ac      	b.n	8002a0c <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f10d 0006 	add.w	r0, sp, #6
 8002cb8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	7043      	strb	r3, [r0, #1]
 8002cbe:	e770      	b.n	8002ba2 <USBD_StdDevReq+0x1be>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002cc6:	e6a1      	b.n	8002a0c <USBD_StdDevReq+0x28>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002cc8:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8002cca:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002ccc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8002cd0:	f7ff fd62 	bl	8002798 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f000 f939 	bl	8002f4c <USBD_CtlSendStatus>
 8002cda:	e697      	b.n	8002a0c <USBD_StdDevReq+0x28>
 8002cdc:	200001bc 	.word	0x200001bc

08002ce0 <USBD_StdItfReq>:
{
 8002ce0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ce2:	780b      	ldrb	r3, [r1, #0]
{
 8002ce4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002cea:	2b20      	cmp	r3, #32
{
 8002cec:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cee:	d00c      	beq.n	8002d0a <USBD_StdItfReq+0x2a>
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d00a      	beq.n	8002d0a <USBD_StdItfReq+0x2a>
 8002cf4:	b14b      	cbz	r3, 8002d0a <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev, 0x80U);
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f001 f80b 	bl	8003d14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002cfe:	4620      	mov	r0, r4
 8002d00:	2100      	movs	r1, #0
 8002d02:	f001 f807 	bl	8003d14 <USBD_LL_StallEP>
}
 8002d06:	2000      	movs	r0, #0
 8002d08:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8002d0a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d8f0      	bhi.n	8002cf6 <USBD_StdItfReq+0x16>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002d14:	792b      	ldrb	r3, [r5, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d8ed      	bhi.n	8002cf6 <USBD_StdItfReq+0x16>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8002d1a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002d1e:	4629      	mov	r1, r5
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4620      	mov	r0, r4
 8002d24:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8002d26:	88eb      	ldrh	r3, [r5, #6]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ec      	bne.n	8002d06 <USBD_StdItfReq+0x26>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d1ea      	bne.n	8002d06 <USBD_StdItfReq+0x26>
              USBD_CtlSendStatus(pdev);
 8002d30:	4620      	mov	r0, r4
 8002d32:	f000 f90b 	bl	8002f4c <USBD_CtlSendStatus>
 8002d36:	e7e6      	b.n	8002d06 <USBD_StdItfReq+0x26>

08002d38 <USBD_StdEPReq>:
{
 8002d38:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d3a:	780b      	ldrb	r3, [r1, #0]
{
 8002d3c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d00c      	beq.n	8002d60 <USBD_StdEPReq+0x28>
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d00a      	beq.n	8002d60 <USBD_StdEPReq+0x28>
 8002d4a:	b183      	cbz	r3, 8002d6e <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f000 ffe0 	bl	8003d14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002d54:	4620      	mov	r0, r4
 8002d56:	2100      	movs	r1, #0
 8002d58:	f000 ffdc 	bl	8003d14 <USBD_LL_StallEP>
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8002d60:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002d64:	4620      	mov	r0, r4
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4798      	blx	r3
}
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 8002d6e:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002d70:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8002d72:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 8002d74:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 8002d76:	d03e      	beq.n	8002df6 <USBD_StdEPReq+0xbe>
 8002d78:	d314      	bcc.n	8002da4 <USBD_StdEPReq+0x6c>
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d1e6      	bne.n	8002d4c <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 8002d7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d046      	beq.n	8002e14 <USBD_StdEPReq+0xdc>
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d1e0      	bne.n	8002d4c <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002d8a:	884b      	ldrh	r3, [r1, #2]
 8002d8c:	b933      	cbnz	r3, 8002d9c <USBD_StdEPReq+0x64>
                if ((ep_addr != 0x00U) &&
 8002d8e:	066a      	lsls	r2, r5, #25
 8002d90:	d004      	beq.n	8002d9c <USBD_StdEPReq+0x64>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002d92:	88cb      	ldrh	r3, [r1, #6]
 8002d94:	b913      	cbnz	r3, 8002d9c <USBD_StdEPReq+0x64>
                  USBD_LL_StallEP(pdev, ep_addr);
 8002d96:	4629      	mov	r1, r5
 8002d98:	f000 ffbc 	bl	8003d14 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f000 f8d5 	bl	8002f4c <USBD_CtlSendStatus>
              break;
 8002da2:	e7db      	b.n	8002d5c <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8002da4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d03d      	beq.n	8002e28 <USBD_StdEPReq+0xf0>
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d1cd      	bne.n	8002d4c <USBD_StdEPReq+0x14>
 8002db0:	f005 030f 	and.w	r3, r5, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002db4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8002db8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002dba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8002dbe:	d442      	bmi.n	8002e46 <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8002dc0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0c1      	beq.n	8002d4c <USBD_StdEPReq+0x14>
 8002dc8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002dcc:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8002dd0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8002dd4:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002dd8:	b133      	cbz	r3, 8002de8 <USBD_StdEPReq+0xb0>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8002dda:	4629      	mov	r1, r5
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f000 ffb5 	bl	8003d4c <USBD_LL_IsStallEP>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d03b      	beq.n	8002e5e <USBD_StdEPReq+0x126>
                pep->status = 0x0001U;
 8002de6:	2301      	movs	r3, #1
 8002de8:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002dea:	4631      	mov	r1, r6
 8002dec:	4620      	mov	r0, r4
 8002dee:	2202      	movs	r2, #2
 8002df0:	f000 f87e 	bl	8002ef0 <USBD_CtlSendData>
              break;
 8002df4:	e7b2      	b.n	8002d5c <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8002df6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d00a      	beq.n	8002e14 <USBD_StdEPReq+0xdc>
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d1a4      	bne.n	8002d4c <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002e02:	884b      	ldrh	r3, [r1, #2]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1a9      	bne.n	8002d5c <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8002e08:	066e      	lsls	r6, r5, #25
 8002e0a:	d0c7      	beq.n	8002d9c <USBD_StdEPReq+0x64>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f000 ff8f 	bl	8003d30 <USBD_LL_ClearStallEP>
 8002e12:	e7c3      	b.n	8002d9c <USBD_StdEPReq+0x64>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002e14:	066b      	lsls	r3, r5, #25
 8002e16:	d099      	beq.n	8002d4c <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f000 ff7b 	bl	8003d14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002e1e:	4620      	mov	r0, r4
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	f000 ff77 	bl	8003d14 <USBD_LL_StallEP>
 8002e26:	e799      	b.n	8002d5c <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002e28:	0668      	lsls	r0, r5, #25
 8002e2a:	d18f      	bne.n	8002d4c <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8002e2c:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002e2e:	0611      	lsls	r1, r2, #24
 8002e30:	bf4c      	ite	mi
 8002e32:	f104 0114 	addmi.w	r1, r4, #20
 8002e36:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002e3a:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 8002e3c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f000 f856 	bl	8002ef0 <USBD_CtlSendData>
              break;
 8002e44:	e78a      	b.n	8002d5c <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f43f af7f 	beq.w	8002d4c <USBD_StdEPReq+0x14>
 8002e4e:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002e52:	1c5e      	adds	r6, r3, #1
 8002e54:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002e58:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8002e5c:	e7bc      	b.n	8002dd8 <USBD_StdEPReq+0xa0>
                pep->status = 0x0000U;
 8002e5e:	6030      	str	r0, [r6, #0]
 8002e60:	e7c3      	b.n	8002dea <USBD_StdEPReq+0xb2>
 8002e62:	bf00      	nop

08002e64 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8002e64:	780b      	ldrb	r3, [r1, #0]
 8002e66:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8002e68:	784b      	ldrb	r3, [r1, #1]
 8002e6a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8002e6c:	78ca      	ldrb	r2, [r1, #3]
 8002e6e:	788b      	ldrb	r3, [r1, #2]
 8002e70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e74:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8002e76:	794a      	ldrb	r2, [r1, #5]
 8002e78:	790b      	ldrb	r3, [r1, #4]
 8002e7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e7e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8002e80:	79ca      	ldrb	r2, [r1, #7]
 8002e82:	798b      	ldrb	r3, [r1, #6]
 8002e84:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e88:	80c3      	strh	r3, [r0, #6]
}
 8002e8a:	4770      	bx	lr

08002e8c <USBD_CtlError>:
{
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	f000 ff3f 	bl	8003d14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002e96:	4620      	mov	r0, r4
}
 8002e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f000 bf39 	b.w	8003d14 <USBD_LL_StallEP>
 8002ea2:	bf00      	nop

08002ea4 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8002ea4:	b300      	cbz	r0, 8002ee8 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8002ea6:	7803      	ldrb	r3, [r0, #0]
{
 8002ea8:	b430      	push	{r4, r5}
  while (*buf != '\0')
 8002eaa:	b1f3      	cbz	r3, 8002eea <USBD_GetString+0x46>
 8002eac:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8002eae:	2300      	movs	r3, #0
  while (*buf != '\0')
 8002eb0:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8002eb8:	2d00      	cmp	r5, #0
 8002eba:	d1f9      	bne.n	8002eb0 <USBD_GetString+0xc>
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002ec0:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002ec2:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8002ec4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002ec6:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8002ec8:	7804      	ldrb	r4, [r0, #0]
 8002eca:	b15c      	cbz	r4, 8002ee4 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002ecc:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8002ece:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8002ed6:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8002ed8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8002edc:	3302      	adds	r3, #2
 8002ede:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8002ee0:	2c00      	cmp	r4, #0
 8002ee2:	d1f5      	bne.n	8002ed0 <USBD_GetString+0x2c>
}
 8002ee4:	bc30      	pop	{r4, r5}
 8002ee6:	4770      	bx	lr
 8002ee8:	4770      	bx	lr
  while (*buf != '\0')
 8002eea:	2302      	movs	r3, #2
 8002eec:	e7e8      	b.n	8002ec0 <USBD_GetString+0x1c>
 8002eee:	bf00      	nop

08002ef0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002ef4:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002ef6:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002ef8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002efc:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002f00:	2100      	movs	r1, #0
 8002f02:	f000 ff41 	bl	8003d88 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002f06:	2000      	movs	r0, #0
 8002f08:	bd38      	pop	{r3, r4, r5, pc}
 8002f0a:	bf00      	nop

08002f0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8002f0c:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002f0e:	4613      	mov	r3, r2
 8002f10:	460a      	mov	r2, r1
 8002f12:	2100      	movs	r1, #0
 8002f14:	f000 ff38 	bl	8003d88 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002f18:	2000      	movs	r0, #0
 8002f1a:	bd08      	pop	{r3, pc}

08002f1c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002f20:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002f22:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8002f24:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8002f28:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002f2c:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002f30:	2100      	movs	r1, #0
 8002f32:	f000 ff37 	bl	8003da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002f36:	2000      	movs	r0, #0
 8002f38:	bd38      	pop	{r3, r4, r5, pc}
 8002f3a:	bf00      	nop

08002f3c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8002f3c:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002f3e:	4613      	mov	r3, r2
 8002f40:	460a      	mov	r2, r1
 8002f42:	2100      	movs	r1, #0
 8002f44:	f000 ff2e 	bl	8003da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002f48:	2000      	movs	r0, #0
 8002f4a:	bd08      	pop	{r3, pc}

08002f4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8002f4c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002f4e:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002f50:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002f52:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002f56:	4619      	mov	r1, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f000 ff15 	bl	8003d88 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002f5e:	2000      	movs	r0, #0
 8002f60:	bd08      	pop	{r3, pc}
 8002f62:	bf00      	nop

08002f64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8002f64:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002f66:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002f68:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002f6a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002f6e:	4619      	mov	r1, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	f000 ff17 	bl	8003da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002f76:	2000      	movs	r0, #0
 8002f78:	bd08      	pop	{r3, pc}
 8002f7a:	bf00      	nop

08002f7c <DWT_Delay_Init>:
     /* Disable clock cycle counter */
     DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
     /* Enable clock cycle counter */
     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
     /* Reset the clock cycle counter value */
     DWT->CYCCNT = 0;
 8002f7c:	2000      	movs	r0, #0
     CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002f7e:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <DWT_Delay_Init+0x38>)
     DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <DWT_Delay_Init+0x3c>)
     CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002f82:	68d1      	ldr	r1, [r2, #12]
 8002f84:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002f88:	60d1      	str	r1, [r2, #12]
     CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002f8a:	68d1      	ldr	r1, [r2, #12]
 8002f8c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002f90:	60d1      	str	r1, [r2, #12]
     DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
     DWT->CYCCNT = 0;
 8002fa2:	6058      	str	r0, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8002fa4:	bf00      	nop
    __ASM volatile ("NOP");
 8002fa6:	bf00      	nop
     __ASM volatile ("NOP");
 8002fa8:	bf00      	nop
     /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8002faa:	6858      	ldr	r0, [r3, #4]
    }
    else
     {
     return 1; /*clock cycle counter not started*/
     }
    }
 8002fac:	fab0 f080 	clz	r0, r0
 8002fb0:	0940      	lsrs	r0, r0, #5
 8002fb2:	4770      	bx	lr
 8002fb4:	e000edf0 	.word	0xe000edf0
 8002fb8:	e0001000 	.word	0xe0001000

08002fbc <SystemClock_Config>:

  }
}
//-----------------------------------------------------
void SystemClock_Config(void)
{
 8002fbc:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fbe:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fc0:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fc6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002fc8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
{
 8002fcc:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fce:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fd0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fd2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fd4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fd6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002fd8:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fda:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fdc:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fde:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fe0:	940d      	str	r4, [sp, #52]	; 0x34
 8002fe2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe6:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002fea:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fee:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002ff2:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ff4:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff6:	f7fe fa95 	bl	8001524 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ffa:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003000:	4629      	mov	r1, r5
 8003002:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003004:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003006:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003008:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800300a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800300c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800300e:	f7fe fc81 	bl	8001914 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003012:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003014:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003016:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003018:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800301a:	f7fe fd57 	bl	8001acc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800301e:	b015      	add	sp, #84	; 0x54
 8003020:	bd30      	pop	{r4, r5, pc}
 8003022:	bf00      	nop

08003024 <DDS_Set>:
		DDS_Value	|= 0x4000;
		DDS_Set(DDS_Value);
	}
//////////////////////////////////////
void	DDS_Set(uint16_t value)
{
 8003024:	b410      	push	{r4}
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 8003026:	2180      	movs	r1, #128	; 0x80
	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003028:	2401      	movs	r4, #1
 800302a:	4b5d      	ldr	r3, [pc, #372]	; (80031a0 <DDS_Set+0x17c>)
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 800302c:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <DDS_Set+0x180>)
 800302e:	6111      	str	r1, [r2, #16]
	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003030:	611c      	str	r4, [r3, #16]
	DDS_FSYNC_GPIO_Port -> BRR = DDS_FSYNC_Pin; //Reset
 8003032:	6151      	str	r1, [r2, #20]

	for(uint16_t i = 0; i < 16; i++)
	{
		if (value & (0x8000 >> i))
		{
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003034:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 8003036:	0404      	lsls	r4, r0, #16
		}
		else
		{
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003038:	bf54      	ite	pl
 800303a:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800303c:	611a      	strmi	r2, [r3, #16]
		}
		 __asm(" NOP");
 800303e:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003040:	2201      	movs	r2, #1
 8003042:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 8003044:	0441      	lsls	r1, r0, #17
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003046:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003048:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800304a:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800304e:	bf54      	ite	pl
 8003050:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003052:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 8003054:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003056:	2201      	movs	r2, #1
 8003058:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 800305a:	0484      	lsls	r4, r0, #18
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800305c:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800305e:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003060:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003064:	bf54      	ite	pl
 8003066:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003068:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 800306a:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800306c:	2201      	movs	r2, #1
 800306e:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 8003070:	04c1      	lsls	r1, r0, #19
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003072:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003074:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003076:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800307a:	bf54      	ite	pl
 800307c:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800307e:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 8003080:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003082:	2201      	movs	r2, #1
 8003084:	4b46      	ldr	r3, [pc, #280]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 8003086:	0504      	lsls	r4, r0, #20
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003088:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800308a:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800308c:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003090:	bf54      	ite	pl
 8003092:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003094:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 8003096:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003098:	2201      	movs	r2, #1
 800309a:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 800309c:	0541      	lsls	r1, r0, #21
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800309e:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80030a0:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030a2:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80030a6:	bf54      	ite	pl
 80030a8:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030aa:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 80030ac:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80030ae:	2201      	movs	r2, #1
 80030b0:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 80030b2:	0584      	lsls	r4, r0, #22
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80030b4:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80030b6:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030b8:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80030bc:	bf54      	ite	pl
 80030be:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030c0:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 80030c2:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80030c4:	2201      	movs	r2, #1
 80030c6:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 80030c8:	05c1      	lsls	r1, r0, #23
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80030ca:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80030cc:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030ce:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80030d2:	bf54      	ite	pl
 80030d4:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030d6:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 80030d8:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80030da:	2201      	movs	r2, #1
 80030dc:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 80030de:	0604      	lsls	r4, r0, #24
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80030e0:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80030e2:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030e4:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80030e8:	bf54      	ite	pl
 80030ea:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030ec:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 80030ee:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80030f0:	2201      	movs	r2, #1
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 80030f4:	0641      	lsls	r1, r0, #25
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80030f6:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80030f8:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80030fa:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80030fe:	bf54      	ite	pl
 8003100:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003102:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 8003104:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003106:	2201      	movs	r2, #1
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 800310a:	0684      	lsls	r4, r0, #26
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800310c:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800310e:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003110:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003114:	bf54      	ite	pl
 8003116:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003118:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 800311a:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800311c:	2201      	movs	r2, #1
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 8003120:	06c1      	lsls	r1, r0, #27
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003122:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003124:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003126:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800312a:	bf54      	ite	pl
 800312c:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800312e:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 8003130:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003132:	2201      	movs	r2, #1
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 8003136:	0704      	lsls	r4, r0, #28
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003138:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800313a:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800313c:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003140:	bf54      	ite	pl
 8003142:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003144:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 8003146:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003148:	2201      	movs	r2, #1
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 800314c:	0741      	lsls	r1, r0, #29
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800314e:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003150:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003152:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003156:	bf54      	ite	pl
 8003158:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800315a:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 800315c:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800315e:	2201      	movs	r2, #1
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 8003162:	0784      	lsls	r4, r0, #30
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003164:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003166:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003168:	f04f 0202 	mov.w	r2, #2
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800316c:	bf54      	ite	pl
 800316e:	615a      	strpl	r2, [r3, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003170:	611a      	strmi	r2, [r3, #16]
		 __asm(" NOP");
 8003172:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003174:	2201      	movs	r2, #1
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <DDS_Set+0x17c>)
		if (value & (0x8000 >> i))
 8003178:	07c1      	lsls	r1, r0, #31
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800317a:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800317c:	611a      	str	r2, [r3, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800317e:	f04f 0202 	mov.w	r2, #2
 8003182:	bf4c      	ite	mi
 8003184:	611a      	strmi	r2, [r3, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003186:	615a      	strpl	r2, [r3, #20]
		 __asm(" NOP");
 8003188:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800318a:	2201      	movs	r2, #1
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <DDS_Set+0x17c>)
 800318e:	615a      	str	r2, [r3, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003190:	611a      	str	r2, [r3, #16]
	}
   __asm(" NOP");
 8003192:	bf00      	nop
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800319a:	611a      	str	r2, [r3, #16]

}
 800319c:	bc10      	pop	{r4}
 800319e:	4770      	bx	lr
 80031a0:	40010c00 	.word	0x40010c00
 80031a4:	40010800 	.word	0x40010800

080031a8 <main>:
{
 80031a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	2500      	movs	r5, #0
{
 80031ae:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80031b0:	f7fd fbe0 	bl	8000974 <HAL_Init>
  SystemClock_Config();
 80031b4:	f7ff ff02 	bl	8002fbc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b8:	e9cd 5507 	strd	r5, r5, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031bc:	4bae      	ldr	r3, [pc, #696]	; (8003478 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031be:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031c2:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80031c4:	f44f 4660 	mov.w	r6, #57344	; 0xe000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c8:	f042 0210 	orr.w	r2, r2, #16
 80031cc:	619a      	str	r2, [r3, #24]
 80031ce:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d0:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d2:	f002 0210 	and.w	r2, r2, #16
 80031d6:	9202      	str	r2, [sp, #8]
 80031d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031da:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031dc:	48a7      	ldr	r0, [pc, #668]	; (800347c <main+0x2d4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031de:	f042 0220 	orr.w	r2, r2, #32
 80031e2:	619a      	str	r2, [r3, #24]
 80031e4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e6:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ea:	f002 0220 	and.w	r2, r2, #32
 80031ee:	9203      	str	r2, [sp, #12]
 80031f0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f4:	4ca2      	ldr	r4, [pc, #648]	; (8003480 <main+0x2d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	f042 0204 	orr.w	r2, r2, #4
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = SDA1_Pin;
 80031fe:	f04f 0980 	mov.w	r9, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	f002 0204 	and.w	r2, r2, #4
 8003206:	9204      	str	r2, [sp, #16]
 8003208:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	f042 0208 	orr.w	r2, r2, #8
 8003210:	619a      	str	r2, [r3, #24]
 8003212:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003214:	9606      	str	r6, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	9305      	str	r3, [sp, #20]
 800321c:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800321e:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003220:	f7fd fc4c 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8003224:	f248 7375 	movw	r3, #34677	; 0x8775
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003228:	a906      	add	r1, sp, #24
 800322a:	4896      	ldr	r0, [pc, #600]	; (8003484 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800322c:	e9cd 5707 	strd	r5, r7, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8003230:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003232:	f7fd fc43 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003236:	f44f 734f 	mov.w	r3, #828	; 0x33c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323a:	a906      	add	r1, sp, #24
 800323c:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800323e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003240:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003244:	f7fd fc3a 	bl	8000abc <HAL_GPIO_Init>
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003248:	a906      	add	r1, sp, #24
 800324a:	488e      	ldr	r0, [pc, #568]	; (8003484 <main+0x2dc>)
  GPIO_InitStruct.Pin = LED1_Pin;
 800324c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324e:	e9cd 5708 	strd	r5, r7, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003252:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003256:	f7fd fc31 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Din_Pin;
 800325a:	2308      	movs	r3, #8
  HAL_GPIO_Init(Din_GPIO_Port, &GPIO_InitStruct);
 800325c:	a906      	add	r1, sp, #24
 800325e:	4889      	ldr	r0, [pc, #548]	; (8003484 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003260:	e9cd 5707 	strd	r5, r7, [sp, #28]
  GPIO_InitStruct.Pin = Din_Pin;
 8003264:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(Din_GPIO_Port, &GPIO_InitStruct);
 8003266:	f7fd fc29 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCL1_Pin;
 800326a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(SCL1_GPIO_Port, &GPIO_InitStruct);
 800326c:	a906      	add	r1, sp, #24
 800326e:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = SCL1_Pin;
 8003270:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003272:	e9cd 5807 	strd	r5, r8, [sp, #28]
  HAL_GPIO_Init(SCL1_GPIO_Port, &GPIO_InitStruct);
 8003276:	f7fd fc21 	bl	8000abc <HAL_GPIO_Init>
  HAL_GPIO_Init(SDA1_GPIO_Port, &GPIO_InitStruct);
 800327a:	a906      	add	r1, sp, #24
 800327c:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800327e:	e9cd 5807 	strd	r5, r8, [sp, #28]
  GPIO_InitStruct.Pin = SDA1_Pin;
 8003282:	f8cd 9018 	str.w	r9, [sp, #24]
  HAL_GPIO_Init(SDA1_GPIO_Port, &GPIO_InitStruct);
 8003286:	f7fd fc19 	bl	8000abc <HAL_GPIO_Init>
  HAL_GPIO_Init(DDS_SCLK_GPIO_Port, &GPIO_InitStruct);
 800328a:	a906      	add	r1, sp, #24
 800328c:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328e:	e9cd 8806 	strd	r8, r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	e9cd 5708 	strd	r5, r7, [sp, #32]
  HAL_GPIO_Init(DDS_SCLK_GPIO_Port, &GPIO_InitStruct);
 8003296:	f7fd fc11 	bl	8000abc <HAL_GPIO_Init>
  HAL_GPIO_Init(DDS_DATA_GPIO_Port, &GPIO_InitStruct);
 800329a:	a906      	add	r1, sp, #24
 800329c:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	e9cd 7806 	strd	r7, r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	e9cd 5708 	strd	r5, r7, [sp, #32]
  HAL_GPIO_Init(DDS_DATA_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f7fd fc09 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DDS_RST_Pin;
 80032aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pin = DDS_FSEL_Pin;
 80032ae:	f44f 6600 	mov.w	r6, #2048	; 0x800
  HAL_GPIO_Init(DDS_RST_GPIO_Port, &GPIO_InitStruct);
 80032b2:	a906      	add	r1, sp, #24
 80032b4:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = DDS_RST_Pin;
 80032b6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	e9cd 8507 	strd	r8, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032bc:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(DDS_RST_GPIO_Port, &GPIO_InitStruct);
 80032be:	f7fd fbfd 	bl	8000abc <HAL_GPIO_Init>
  HAL_GPIO_Init(DDS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 80032c2:	a906      	add	r1, sp, #24
 80032c4:	486f      	ldr	r0, [pc, #444]	; (8003484 <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c6:	e9cd 9806 	strd	r9, r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	e9cd 5708 	strd	r5, r7, [sp, #32]
  HAL_GPIO_Init(DDS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 80032ce:	f7fd fbf5 	bl	8000abc <HAL_GPIO_Init>
  HAL_GPIO_Init(DDS_FSEL_GPIO_Port, &GPIO_InitStruct);
 80032d2:	a906      	add	r1, sp, #24
 80032d4:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	e9cd 8507 	strd	r8, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = DDS_FSEL_Pin;
 80032dc:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(DDS_FSEL_GPIO_Port, &GPIO_InitStruct);
 80032de:	f7fd fbed 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VGA_PWUP_Pin;
 80032e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(VGA_PWUP_GPIO_Port, &GPIO_InitStruct);
 80032e6:	a906      	add	r1, sp, #24
 80032e8:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	e9cd 8507 	strd	r8, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = VGA_PWUP_Pin;
 80032f0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(VGA_PWUP_GPIO_Port, &GPIO_InitStruct);
 80032f2:	f7fd fbe3 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VGA_DAT_Pin;
 80032f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(VGA_DAT_GPIO_Port, &GPIO_InitStruct);
 80032fa:	a906      	add	r1, sp, #24
 80032fc:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	e9cd 8507 	strd	r8, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = VGA_DAT_Pin;
 8003304:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(VGA_DAT_GPIO_Port, &GPIO_InitStruct);
 8003306:	f7fd fbd9 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VGA_CLK_Pin;
 800330a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(VGA_CLK_GPIO_Port, &GPIO_InitStruct);
 800330e:	a906      	add	r1, sp, #24
 8003310:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	e9cd 8507 	strd	r8, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = VGA_CLK_Pin;
 8003318:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(VGA_CLK_GPIO_Port, &GPIO_InitStruct);
 800331a:	f7fd fbcf 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VGA_LATCH_Pin;
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(VGA_LATCH_GPIO_Port, &GPIO_InitStruct);
 8003322:	a906      	add	r1, sp, #24
 8003324:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = VGA_LATCH_Pin;
 8003326:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	e9cd 8507 	strd	r8, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(VGA_LATCH_GPIO_Port, &GPIO_InitStruct);
 800332e:	f7fd fbc5 	bl	8000abc <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8003332:	f000 fbfd 	bl	8003b30 <MX_USB_DEVICE_Init>
  if(DWT_Delay_Init())
 8003336:	f7ff fe21 	bl	8002f7c <DWT_Delay_Init>
	HAL_Delay(50);
 800333a:	2032      	movs	r0, #50	; 0x32
 800333c:	f7fd fb3e 	bl	80009bc <HAL_Delay>
	DDS_Set(0x2338); //initialize DDS
 8003340:	f242 3038 	movw	r0, #9016	; 0x2338
 8003344:	f7ff fe6e 	bl	8003024 <DDS_Set>
	HAL_Delay(10);
 8003348:	200a      	movs	r0, #10
 800334a:	f7fd fb37 	bl	80009bc <HAL_Delay>
	Flag_end_Transaction = 0;
 800334e:	4b4e      	ldr	r3, [pc, #312]	; (8003488 <main+0x2e0>)
	Flag_Rcvd_Data_HID = 0;
 8003350:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80034ac <main+0x304>
	Flag_end_Transaction = 0;
 8003354:	801d      	strh	r5, [r3, #0]
	Index = 0;
 8003356:	4b4d      	ldr	r3, [pc, #308]	; (800348c <main+0x2e4>)
 8003358:	4f4d      	ldr	r7, [pc, #308]	; (8003490 <main+0x2e8>)
 800335a:	801d      	strh	r5, [r3, #0]
	k = 0;
 800335c:	4b4d      	ldr	r3, [pc, #308]	; (8003494 <main+0x2ec>)
	Flag_Rcvd_Data_HID = 0;
 800335e:	f888 5000 	strb.w	r5, [r8]
	k = 0;
 8003362:	801d      	strh	r5, [r3, #0]
	verifier = 0;
 8003364:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <main+0x2f0>)
 8003366:	801d      	strh	r5, [r3, #0]
	HostMsgVerified = 0;
 8003368:	4b4c      	ldr	r3, [pc, #304]	; (800349c <main+0x2f4>)
 800336a:	801d      	strh	r5, [r3, #0]
	DDS_FSEL_GPIO_Port -> BRR = DDS_FSEL_Pin;
 800336c:	6166      	str	r6, [r4, #20]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,USB_TX_Buffer,64);
 800336e:	4d4c      	ldr	r5, [pc, #304]	; (80034a0 <main+0x2f8>)
 8003370:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80034b0 <main+0x308>
		if (Flag_Rcvd_Data_HID == 1)
 8003374:	f898 4000 	ldrb.w	r4, [r8]
 8003378:	b2e4      	uxtb	r4, r4
 800337a:	2c01      	cmp	r4, #1
 800337c:	f000 81fc 	beq.w	8003778 <main+0x5d0>
	if (Flag_end_Transaction == 1)
 8003380:	4b41      	ldr	r3, [pc, #260]	; (8003488 <main+0x2e0>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d1f5      	bne.n	8003374 <main+0x1cc>
 8003388:	4b46      	ldr	r3, [pc, #280]	; (80034a4 <main+0x2fc>)
 800338a:	881c      	ldrh	r4, [r3, #0]
		for (uint16_t idx = 0; idx < Freqs_numbers; idx++)
 800338c:	2c00      	cmp	r4, #0
 800338e:	d0ee      	beq.n	800336e <main+0x1c6>
 8003390:	2300      	movs	r3, #0
	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003392:	2501      	movs	r5, #1
////////////////////////////////////////////
void 	VGA_Set(uint16_t Gain)
{
  VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 8003394:	f44f 4680 	mov.w	r6, #16384	; 0x4000
			VGA_PWUP_GPIO_Port -> BRR = VGA_PWUP_Pin; //reset
 8003398:	4c39      	ldr	r4, [pc, #228]	; (8003480 <main+0x2d8>)
		for (uint16_t idx = 0; idx < Freqs_numbers; idx++)
 800339a:	9300      	str	r3, [sp, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800339c:	2102      	movs	r1, #2
 800339e:	4839      	ldr	r0, [pc, #228]	; (8003484 <main+0x2dc>)
 80033a0:	f7fd fc86 	bl	8000cb0 <HAL_GPIO_TogglePin>
			VGA_PWUP_GPIO_Port -> BRR = VGA_PWUP_Pin; //reset
 80033a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		DDS_freq_Reg = (uint32_t)(Freq * 5.36871);
 80033a8:	9a00      	ldr	r2, [sp, #0]
			VGA_PWUP_GPIO_Port -> BRR = VGA_PWUP_Pin; //reset
 80033aa:	6163      	str	r3, [r4, #20]
		DDS_freq_Reg = (uint32_t)(Freq * 5.36871);
 80033ac:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <main+0x300>)
 80033ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80033b2:	f7fd f80f 	bl	80003d4 <__aeabi_ui2d>
 80033b6:	a32e      	add	r3, pc, #184	; (adr r3, 8003470 <main+0x2c8>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fd f884 	bl	80004c8 <__aeabi_dmul>
 80033c0:	f7fd fa94 	bl	80008ec <__aeabi_d2uiz>
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 80033c4:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <main+0x2dc>)
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	461a      	mov	r2, r3
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80033ca:	f04f 0c02 	mov.w	ip, #2
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 80033ce:	6119      	str	r1, [r3, #16]
	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80033d0:	6125      	str	r5, [r4, #16]
		DDS_Value = (uint16_t) DDS_freq_Reg;
 80033d2:	b283      	uxth	r3, r0
	DDS_FSYNC_GPIO_Port -> BRR = DDS_FSYNC_Pin; //Reset
 80033d4:	6151      	str	r1, [r2, #20]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80033d6:	f8c4 c014 	str.w	ip, [r4, #20]
		 __asm(" NOP");
 80033da:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80033dc:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80033de:	6125      	str	r5, [r4, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80033e0:	f8c4 c010 	str.w	ip, [r4, #16]
		 __asm(" NOP");
 80033e4:	bf00      	nop
		if (value & (0x8000 >> i))
 80033e6:	049a      	lsls	r2, r3, #18
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80033e8:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80033ea:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80033ec:	bf54      	ite	pl
 80033ee:	f8c4 c014 	strpl.w	ip, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80033f2:	f8c4 c010 	strmi.w	ip, [r4, #16]
		 __asm(" NOP");
 80033f6:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80033f8:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 80033fa:	04d9      	lsls	r1, r3, #19
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80033fc:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80033fe:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003400:	bf54      	ite	pl
 8003402:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003404:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 8003406:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003408:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 800340a:	0519      	lsls	r1, r3, #20
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800340c:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800340e:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003410:	bf54      	ite	pl
 8003412:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003414:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 8003416:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003418:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 800341a:	0559      	lsls	r1, r3, #21
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800341c:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800341e:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003420:	bf54      	ite	pl
 8003422:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003424:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 8003426:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003428:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 800342a:	0599      	lsls	r1, r3, #22
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800342c:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800342e:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003430:	bf54      	ite	pl
 8003432:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003434:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 8003436:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003438:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 800343a:	05d9      	lsls	r1, r3, #23
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800343c:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800343e:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003440:	bf54      	ite	pl
 8003442:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003444:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 8003446:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003448:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 800344a:	0619      	lsls	r1, r3, #24
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800344c:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800344e:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003450:	bf54      	ite	pl
 8003452:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003454:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 8003456:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003458:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 800345a:	0659      	lsls	r1, r3, #25
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800345c:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800345e:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 8003460:	bf54      	ite	pl
 8003462:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003464:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 8003466:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003468:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 800346a:	0699      	lsls	r1, r3, #26
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800346c:	6165      	str	r5, [r4, #20]
 800346e:	e021      	b.n	80034b4 <main+0x30c>
 8003470:	1d3ed528 	.word	0x1d3ed528
 8003474:	4015798f 	.word	0x4015798f
 8003478:	40021000 	.word	0x40021000
 800347c:	40011000 	.word	0x40011000
 8003480:	40010c00 	.word	0x40010c00
 8003484:	40010800 	.word	0x40010800
 8003488:	200003b4 	.word	0x200003b4
 800348c:	200001be 	.word	0x200001be
 8003490:	20000654 	.word	0x20000654
 8003494:	200001c2 	.word	0x200001c2
 8003498:	200001c4 	.word	0x200001c4
 800349c:	200004c0 	.word	0x200004c0
 80034a0:	20000658 	.word	0x20000658
 80034a4:	20000698 	.word	0x20000698
 80034a8:	200004c4 	.word	0x200004c4
 80034ac:	200001bd 	.word	0x200001bd
 80034b0:	20000764 	.word	0x20000764
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80034b4:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80034b6:	bf54      	ite	pl
 80034b8:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034ba:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 80034bc:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034be:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 80034c0:	06d9      	lsls	r1, r3, #27
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80034c2:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80034c4:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80034c6:	bf54      	ite	pl
 80034c8:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034ca:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 80034cc:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034ce:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 80034d0:	0719      	lsls	r1, r3, #28
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80034d2:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80034d4:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80034d6:	bf54      	ite	pl
 80034d8:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034da:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 80034dc:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034de:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 80034e0:	0759      	lsls	r1, r3, #29
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80034e2:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80034e4:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80034e6:	bf54      	ite	pl
 80034e8:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034ea:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 80034ec:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034ee:	2202      	movs	r2, #2
		if (value & (0x8000 >> i))
 80034f0:	0799      	lsls	r1, r3, #30
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80034f2:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80034f4:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80034f6:	bf54      	ite	pl
 80034f8:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80034fa:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 80034fc:	bf00      	nop
		if (value & (0x8000 >> i))
 80034fe:	f013 0f01 	tst.w	r3, #1
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003502:	f04f 0302 	mov.w	r3, #2
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003506:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003508:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800350a:	bf0c      	ite	eq
 800350c:	6163      	streq	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 800350e:	6123      	strne	r3, [r4, #16]
		 __asm(" NOP");
 8003510:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003512:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003514:	6125      	str	r5, [r4, #16]
   __asm(" NOP");
 8003516:	bf00      	nop
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 8003518:	2380      	movs	r3, #128	; 0x80
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800351a:	2202      	movs	r2, #2
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 800351c:	4990      	ldr	r1, [pc, #576]	; (8003760 <main+0x5b8>)
		DDS_Value = (uint16_t) (DDS_freq_Reg >> 14);
 800351e:	f3c0 308f 	ubfx	r0, r0, #14, #16
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 8003522:	610b      	str	r3, [r1, #16]
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 8003524:	610b      	str	r3, [r1, #16]
	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003526:	6125      	str	r5, [r4, #16]
	DDS_FSYNC_GPIO_Port -> BRR = DDS_FSYNC_Pin; //Reset
 8003528:	614b      	str	r3, [r1, #20]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800352a:	6162      	str	r2, [r4, #20]
		 __asm(" NOP");
 800352c:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 800352e:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003530:	6125      	str	r5, [r4, #16]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003532:	6122      	str	r2, [r4, #16]
		 __asm(" NOP");
 8003534:	bf00      	nop
		if (value & (0x8000 >> i))
 8003536:	0483      	lsls	r3, r0, #18
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003538:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800353a:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800353c:	bf54      	ite	pl
 800353e:	6162      	strpl	r2, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003540:	6122      	strmi	r2, [r4, #16]
		 __asm(" NOP");
 8003542:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003544:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 8003546:	04c1      	lsls	r1, r0, #19
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003548:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800354a:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800354c:	bf54      	ite	pl
 800354e:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003550:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 8003552:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003554:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 8003556:	0502      	lsls	r2, r0, #20
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003558:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800355a:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800355c:	bf54      	ite	pl
 800355e:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003560:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 8003562:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003564:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 8003566:	0541      	lsls	r1, r0, #21
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003568:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800356a:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800356c:	bf54      	ite	pl
 800356e:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003570:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 8003572:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003574:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 8003576:	0582      	lsls	r2, r0, #22
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003578:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800357a:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800357c:	bf54      	ite	pl
 800357e:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003580:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 8003582:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003584:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 8003586:	05c1      	lsls	r1, r0, #23
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003588:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800358a:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800358c:	bf54      	ite	pl
 800358e:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003590:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 8003592:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003594:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 8003596:	0602      	lsls	r2, r0, #24
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003598:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800359a:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800359c:	bf54      	ite	pl
 800359e:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035a0:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 80035a2:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035a4:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 80035a6:	0641      	lsls	r1, r0, #25
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80035a8:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80035aa:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80035ac:	bf54      	ite	pl
 80035ae:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035b0:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 80035b2:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035b4:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 80035b6:	0682      	lsls	r2, r0, #26
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80035b8:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80035ba:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80035bc:	bf54      	ite	pl
 80035be:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035c0:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 80035c2:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035c4:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 80035c6:	06c1      	lsls	r1, r0, #27
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80035c8:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80035ca:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80035cc:	bf54      	ite	pl
 80035ce:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035d0:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 80035d2:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035d4:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 80035d6:	0702      	lsls	r2, r0, #28
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80035d8:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80035da:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80035dc:	bf54      	ite	pl
 80035de:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035e0:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 80035e2:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035e4:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 80035e6:	0741      	lsls	r1, r0, #29
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80035e8:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80035ea:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80035ec:	bf54      	ite	pl
 80035ee:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035f0:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 80035f2:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 80035f4:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 80035f6:	0782      	lsls	r2, r0, #30
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 80035f8:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 80035fa:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 80035fc:	bf54      	ite	pl
 80035fe:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003600:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 8003602:	bf00      	nop
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003604:	2302      	movs	r3, #2
		if (value & (0x8000 >> i))
 8003606:	07c0      	lsls	r0, r0, #31
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003608:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 800360a:	6125      	str	r5, [r4, #16]
		  DDS_DATA_GPIO_Port -> BRR = DDS_DATA_Pin; //Reset
 800360c:	bf54      	ite	pl
 800360e:	6163      	strpl	r3, [r4, #20]
			DDS_DATA_GPIO_Port -> BSRR = DDS_DATA_Pin; //Set
 8003610:	6123      	strmi	r3, [r4, #16]
		 __asm(" NOP");
 8003612:	bf00      	nop
		DDS_SCLK_GPIO_Port -> BRR = DDS_SCLK_Pin; // Reset
 8003614:	6165      	str	r5, [r4, #20]
  	DDS_SCLK_GPIO_Port -> BSRR = DDS_SCLK_Pin; // Set
 8003616:	6125      	str	r5, [r4, #16]
   __asm(" NOP");
 8003618:	bf00      	nop
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 800361a:	2280      	movs	r2, #128	; 0x80
			VGA_Set(Gains[idx]);
 800361c:	9900      	ldr	r1, [sp, #0]
 800361e:	4b51      	ldr	r3, [pc, #324]	; (8003764 <main+0x5bc>)
 8003620:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
	DDS_FSYNC_GPIO_Port -> BSRR = DDS_FSYNC_Pin; //Set
 8003624:	494e      	ldr	r1, [pc, #312]	; (8003760 <main+0x5b8>)
 8003626:	610a      	str	r2, [r1, #16]
  VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 8003628:	6166      	str	r6, [r4, #20]
	__ASM("NOP");
 800362a:	bf00      	nop
	VGA_LATCH_GPIO_Port -> BRR = VGA_LATCH_Pin; // Reset
 800362c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003630:	6162      	str	r2, [r4, #20]
	__ASM("NOP");
 8003632:	bf00      	nop
    //
	for (uint16_t i = 0; i < 8; i++)
	{
			if (Gain & (0x0080 >> i))
			{
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 8003634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
			if (Gain & (0x0080 >> i))
 8003638:	0619      	lsls	r1, r3, #24
			}
			else
			{
				VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 800363a:	bf54      	ite	pl
 800363c:	6162      	strpl	r2, [r4, #20]
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 800363e:	6122      	strmi	r2, [r4, #16]
			}
		__ASM("NOP");
 8003640:	bf00      	nop
		VGA_CLK_GPIO_Port -> BSRR = VGA_CLK_Pin; //Set
 8003642:	6126      	str	r6, [r4, #16]
	__ASM("NOP");
 8003644:	bf00      	nop
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 8003646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
			if (Gain & (0x0080 >> i))
 800364a:	0658      	lsls	r0, r3, #25
		VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 800364c:	6166      	str	r6, [r4, #20]
				VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 800364e:	bf54      	ite	pl
 8003650:	6162      	strpl	r2, [r4, #20]
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 8003652:	6122      	strmi	r2, [r4, #16]
		__ASM("NOP");
 8003654:	bf00      	nop
		VGA_CLK_GPIO_Port -> BSRR = VGA_CLK_Pin; //Set
 8003656:	6126      	str	r6, [r4, #16]
	__ASM("NOP");
 8003658:	bf00      	nop
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 800365a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
			if (Gain & (0x0080 >> i))
 800365e:	0699      	lsls	r1, r3, #26
		VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 8003660:	6166      	str	r6, [r4, #20]
				VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 8003662:	bf54      	ite	pl
 8003664:	6162      	strpl	r2, [r4, #20]
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 8003666:	6122      	strmi	r2, [r4, #16]
		__ASM("NOP");
 8003668:	bf00      	nop
		VGA_CLK_GPIO_Port -> BSRR = VGA_CLK_Pin; //Set
 800366a:	6126      	str	r6, [r4, #16]
	__ASM("NOP");
 800366c:	bf00      	nop
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 800366e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
			if (Gain & (0x0080 >> i))
 8003672:	06d8      	lsls	r0, r3, #27
		VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 8003674:	6166      	str	r6, [r4, #20]
				VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 8003676:	bf54      	ite	pl
 8003678:	6162      	strpl	r2, [r4, #20]
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 800367a:	6122      	strmi	r2, [r4, #16]
		__ASM("NOP");
 800367c:	bf00      	nop
		VGA_CLK_GPIO_Port -> BSRR = VGA_CLK_Pin; //Set
 800367e:	6126      	str	r6, [r4, #16]
	__ASM("NOP");
 8003680:	bf00      	nop
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 8003682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
			if (Gain & (0x0080 >> i))
 8003686:	0719      	lsls	r1, r3, #28
		VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 8003688:	6166      	str	r6, [r4, #20]
				VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 800368a:	bf54      	ite	pl
 800368c:	6162      	strpl	r2, [r4, #20]
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 800368e:	6122      	strmi	r2, [r4, #16]
		__ASM("NOP");
 8003690:	bf00      	nop
		VGA_CLK_GPIO_Port -> BSRR = VGA_CLK_Pin; //Set
 8003692:	6126      	str	r6, [r4, #16]
	__ASM("NOP");
 8003694:	bf00      	nop
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 8003696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
			if (Gain & (0x0080 >> i))
 800369a:	0758      	lsls	r0, r3, #29
		VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 800369c:	6166      	str	r6, [r4, #20]
				VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 800369e:	bf54      	ite	pl
 80036a0:	6162      	strpl	r2, [r4, #20]
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 80036a2:	6122      	strmi	r2, [r4, #16]
		__ASM("NOP");
 80036a4:	bf00      	nop
		VGA_CLK_GPIO_Port -> BSRR = VGA_CLK_Pin; //Set
 80036a6:	6126      	str	r6, [r4, #16]
	__ASM("NOP");
 80036a8:	bf00      	nop
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 80036aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
			if (Gain & (0x0080 >> i))
 80036ae:	0799      	lsls	r1, r3, #30
		VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 80036b0:	6166      	str	r6, [r4, #20]
				VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 80036b2:	bf54      	ite	pl
 80036b4:	6162      	strpl	r2, [r4, #20]
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 80036b6:	6122      	strmi	r2, [r4, #16]
		__ASM("NOP");
 80036b8:	bf00      	nop
		VGA_CLK_GPIO_Port -> BSRR = VGA_CLK_Pin; //Set
 80036ba:	6126      	str	r6, [r4, #16]
	__ASM("NOP");
 80036bc:	bf00      	nop
			if (Gain & (0x0080 >> i))
 80036be:	f013 0f01 	tst.w	r3, #1
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 80036c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 80036c6:	6166      	str	r6, [r4, #20]
				VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 80036c8:	bf0c      	ite	eq
 80036ca:	6163      	streq	r3, [r4, #20]
				VGA_DAT_GPIO_Port -> BSRR = VGA_DAT_Pin; //Set
 80036cc:	6123      	strne	r3, [r4, #16]
		__ASM("NOP");
 80036ce:	bf00      	nop
		VGA_CLK_GPIO_Port -> BSRR = VGA_CLK_Pin; //Set
 80036d0:	6126      	str	r6, [r4, #16]
	__ASM("NOP");
 80036d2:	bf00      	nop
		VGA_CLK_GPIO_Port -> BRR = VGA_CLK_Pin; //Reset
 80036d4:	6166      	str	r6, [r4, #20]

  }
		__ASM("NOP");
 80036d6:	bf00      	nop
		__ASM("NOP");
 80036d8:	bf00      	nop
		VGA_LATCH_GPIO_Port -> BSRR = VGA_LATCH_Pin; // set
		VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 80036da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
			VGA_PWUP_GPIO_Port -> BSRR = VGA_PWUP_Pin; //set
 80036de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		VGA_LATCH_GPIO_Port -> BSRR = VGA_LATCH_Pin; // set
 80036e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
			while(Freq_time > 50000)
 80036e6:	f24c 3950 	movw	r9, #50000	; 0xc350
		VGA_LATCH_GPIO_Port -> BSRR = VGA_LATCH_Pin; // set
 80036ea:	6121      	str	r1, [r4, #16]
		VGA_DAT_GPIO_Port -> BRR = VGA_DAT_Pin; //Reset
 80036ec:	6162      	str	r2, [r4, #20]
			VGA_PWUP_GPIO_Port -> BSRR = VGA_PWUP_Pin; //set
 80036ee:	6123      	str	r3, [r4, #16]
			Freq_time = Freq_Times[idx];
 80036f0:	9a00      	ldr	r2, [sp, #0]
 80036f2:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <main+0x5c0>)
     * @brief This function provides a delay (in microseconds)
     * @param microseconds: delay in microseconds
     */
    __STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
    {
     uint32_t clk_cycle_start = DWT->CYCCNT;
 80036f4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8003774 <main+0x5cc>
 80036f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fc:	603b      	str	r3, [r7, #0]
			while(Freq_time > 50000)
 80036fe:	454b      	cmp	r3, r9
 8003700:	d918      	bls.n	8003734 <main+0x58c>
				Freq_time -= 50000;
 8003702:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8003706:	3b50      	subs	r3, #80	; 0x50
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	f8da b004 	ldr.w	fp, [sl, #4]
     /* Go to number of cycles for system */
     microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800370e:	f7fe f9d7 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <main+0x5c4>)
 8003714:	fba3 3200 	umull	r3, r2, r3, r0
 8003718:	0c92      	lsrs	r2, r2, #18
 800371a:	fb09 f202 	mul.w	r2, r9, r2
     /* Delay till end */
     while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800371e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003722:	eba3 030b 	sub.w	r3, r3, fp
 8003726:	4293      	cmp	r3, r2
 8003728:	d3f9      	bcc.n	800371e <main+0x576>
				if(Flag_Rcvd_Data_HID == 1)
 800372a:	f898 2000 	ldrb.w	r2, [r8]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2a01      	cmp	r2, #1
 8003732:	d1e4      	bne.n	80036fe <main+0x556>
			if ((Freq_time > 0) && (Flag_Rcvd_Data_HID == 0)){
 8003734:	b123      	cbz	r3, 8003740 <main+0x598>
 8003736:	f898 2000 	ldrb.w	r2, [r8]
 800373a:	2a00      	cmp	r2, #0
 800373c:	f000 80d8 	beq.w	80038f0 <main+0x748>
			VGA_PWUP_GPIO_Port -> BRR = VGA_PWUP_Pin; //reset
 8003740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003744:	6163      	str	r3, [r4, #20]
		for (uint16_t idx = 0; idx < Freqs_numbers; idx++)
 8003746:	9b00      	ldr	r3, [sp, #0]
 8003748:	f103 0901 	add.w	r9, r3, #1
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <main+0x5c8>)
 800374e:	fa1f f289 	uxth.w	r2, r9
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	9200      	str	r2, [sp, #0]
 8003756:	4293      	cmp	r3, r2
 8003758:	f63f ae20 	bhi.w	800339c <main+0x1f4>
 800375c:	e607      	b.n	800336e <main+0x1c6>
 800375e:	bf00      	nop
 8003760:	40010800 	.word	0x40010800
 8003764:	200003f8 	.word	0x200003f8
 8003768:	20000224 	.word	0x20000224
 800376c:	431bde83 	.word	0x431bde83
 8003770:	20000698 	.word	0x20000698
 8003774:	e0001000 	.word	0xe0001000
			Flag_Rcvd_Data_HID = 0;
 8003778:	f04f 0900 	mov.w	r9, #0
			if (USB_RX_Buffer[0] != host_preamble[0])
 800377c:	4ba5      	ldr	r3, [pc, #660]	; (8003a14 <main+0x86c>)
 800377e:	4ea6      	ldr	r6, [pc, #664]	; (8003a18 <main+0x870>)
 8003780:	f893 a000 	ldrb.w	sl, [r3]
 8003784:	7833      	ldrb	r3, [r6, #0]
			k = 0;
 8003786:	4aa5      	ldr	r2, [pc, #660]	; (8003a1c <main+0x874>)
			if (USB_RX_Buffer[0] != host_preamble[0])
 8003788:	4553      	cmp	r3, sl
			Flag_Rcvd_Data_HID = 0;
 800378a:	f888 9000 	strb.w	r9, [r8]
			k = 0;
 800378e:	f8a2 9000 	strh.w	r9, [r2]
			if (USB_RX_Buffer[0] != host_preamble[0])
 8003792:	f000 80c2 	beq.w	800391a <main+0x772>
 8003796:	1c71      	adds	r1, r6, #1
 8003798:	223f      	movs	r2, #63	; 0x3f
 800379a:	1e48      	subs	r0, r1, #1
 800379c:	f000 fc82 	bl	80040a4 <memmove>
			verifier = 0;
 80037a0:	4a9f      	ldr	r2, [pc, #636]	; (8003a20 <main+0x878>)
 80037a2:	7833      	ldrb	r3, [r6, #0]
 80037a4:	f8a2 9000 	strh.w	r9, [r2]
			HostMsgVerified = 0;
 80037a8:	4a9e      	ldr	r2, [pc, #632]	; (8003a24 <main+0x87c>)
				if (host_preamble[i] == USB_RX_Buffer[k++])
 80037aa:	459a      	cmp	sl, r3
			HostMsgVerified = 0;
 80037ac:	f8a2 9000 	strh.w	r9, [r2]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 80037b0:	bf18      	it	ne
 80037b2:	464b      	movne	r3, r9
 80037b4:	f000 80b4 	beq.w	8003920 <main+0x778>
 80037b8:	4a96      	ldr	r2, [pc, #600]	; (8003a14 <main+0x86c>)
 80037ba:	4997      	ldr	r1, [pc, #604]	; (8003a18 <main+0x870>)
 80037bc:	7852      	ldrb	r2, [r2, #1]
 80037be:	7849      	ldrb	r1, [r1, #1]
 80037c0:	4291      	cmp	r1, r2
 80037c2:	d102      	bne.n	80037ca <main+0x622>
				{verifier++;}
 80037c4:	4623      	mov	r3, r4
 80037c6:	4a96      	ldr	r2, [pc, #600]	; (8003a20 <main+0x878>)
 80037c8:	8014      	strh	r4, [r2, #0]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 80037ca:	4a92      	ldr	r2, [pc, #584]	; (8003a14 <main+0x86c>)
 80037cc:	4992      	ldr	r1, [pc, #584]	; (8003a18 <main+0x870>)
 80037ce:	7892      	ldrb	r2, [r2, #2]
 80037d0:	7889      	ldrb	r1, [r1, #2]
 80037d2:	4291      	cmp	r1, r2
 80037d4:	d103      	bne.n	80037de <main+0x636>
				{verifier++;}
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a91      	ldr	r2, [pc, #580]	; (8003a20 <main+0x878>)
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 80037de:	4a8d      	ldr	r2, [pc, #564]	; (8003a14 <main+0x86c>)
 80037e0:	498d      	ldr	r1, [pc, #564]	; (8003a18 <main+0x870>)
 80037e2:	78d2      	ldrb	r2, [r2, #3]
 80037e4:	78c9      	ldrb	r1, [r1, #3]
 80037e6:	4291      	cmp	r1, r2
 80037e8:	d103      	bne.n	80037f2 <main+0x64a>
				{verifier++;}
 80037ea:	3301      	adds	r3, #1
 80037ec:	4a8c      	ldr	r2, [pc, #560]	; (8003a20 <main+0x878>)
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	8013      	strh	r3, [r2, #0]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 80037f2:	4a88      	ldr	r2, [pc, #544]	; (8003a14 <main+0x86c>)
 80037f4:	4988      	ldr	r1, [pc, #544]	; (8003a18 <main+0x870>)
 80037f6:	7912      	ldrb	r2, [r2, #4]
 80037f8:	7909      	ldrb	r1, [r1, #4]
 80037fa:	4291      	cmp	r1, r2
 80037fc:	d103      	bne.n	8003806 <main+0x65e>
				{verifier++;}
 80037fe:	3301      	adds	r3, #1
 8003800:	4a87      	ldr	r2, [pc, #540]	; (8003a20 <main+0x878>)
 8003802:	b29b      	uxth	r3, r3
 8003804:	8013      	strh	r3, [r2, #0]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 8003806:	4a83      	ldr	r2, [pc, #524]	; (8003a14 <main+0x86c>)
 8003808:	4983      	ldr	r1, [pc, #524]	; (8003a18 <main+0x870>)
 800380a:	7952      	ldrb	r2, [r2, #5]
 800380c:	7949      	ldrb	r1, [r1, #5]
 800380e:	4291      	cmp	r1, r2
 8003810:	d103      	bne.n	800381a <main+0x672>
				{verifier++;}
 8003812:	3301      	adds	r3, #1
 8003814:	4a82      	ldr	r2, [pc, #520]	; (8003a20 <main+0x878>)
 8003816:	b29b      	uxth	r3, r3
 8003818:	8013      	strh	r3, [r2, #0]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 800381a:	4a7e      	ldr	r2, [pc, #504]	; (8003a14 <main+0x86c>)
 800381c:	497e      	ldr	r1, [pc, #504]	; (8003a18 <main+0x870>)
 800381e:	7992      	ldrb	r2, [r2, #6]
 8003820:	7989      	ldrb	r1, [r1, #6]
 8003822:	4291      	cmp	r1, r2
 8003824:	d103      	bne.n	800382e <main+0x686>
				{verifier++;}
 8003826:	3301      	adds	r3, #1
 8003828:	4a7d      	ldr	r2, [pc, #500]	; (8003a20 <main+0x878>)
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 800382e:	4a79      	ldr	r2, [pc, #484]	; (8003a14 <main+0x86c>)
 8003830:	4979      	ldr	r1, [pc, #484]	; (8003a18 <main+0x870>)
 8003832:	79d2      	ldrb	r2, [r2, #7]
 8003834:	79c9      	ldrb	r1, [r1, #7]
 8003836:	4291      	cmp	r1, r2
 8003838:	d103      	bne.n	8003842 <main+0x69a>
				{verifier++;}
 800383a:	3301      	adds	r3, #1
 800383c:	4a78      	ldr	r2, [pc, #480]	; (8003a20 <main+0x878>)
 800383e:	b29b      	uxth	r3, r3
 8003840:	8013      	strh	r3, [r2, #0]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 8003842:	4a74      	ldr	r2, [pc, #464]	; (8003a14 <main+0x86c>)
 8003844:	4974      	ldr	r1, [pc, #464]	; (8003a18 <main+0x870>)
 8003846:	7a12      	ldrb	r2, [r2, #8]
 8003848:	7a09      	ldrb	r1, [r1, #8]
 800384a:	4291      	cmp	r1, r2
 800384c:	d103      	bne.n	8003856 <main+0x6ae>
				{verifier++;}
 800384e:	3301      	adds	r3, #1
 8003850:	4a73      	ldr	r2, [pc, #460]	; (8003a20 <main+0x878>)
 8003852:	b29b      	uxth	r3, r3
 8003854:	8013      	strh	r3, [r2, #0]
				if (host_preamble[i] == USB_RX_Buffer[k++])
 8003856:	4a6f      	ldr	r2, [pc, #444]	; (8003a14 <main+0x86c>)
 8003858:	496f      	ldr	r1, [pc, #444]	; (8003a18 <main+0x870>)
 800385a:	7a52      	ldrb	r2, [r2, #9]
 800385c:	7a49      	ldrb	r1, [r1, #9]
 800385e:	4291      	cmp	r1, r2
 8003860:	d063      	beq.n	800392a <main+0x782>
			Freqs_numbers = USB_RX_Buffer[k++]; // Total number of freqs which are supposed to be received
 8003862:	230c      	movs	r3, #12
			Index = USB_RX_Buffer[k++];			// index of current received package which conveys the data of a single freq
 8003864:	496c      	ldr	r1, [pc, #432]	; (8003a18 <main+0x870>)
			Freqs_numbers = USB_RX_Buffer[k++]; // Total number of freqs which are supposed to be received
 8003866:	486d      	ldr	r0, [pc, #436]	; (8003a1c <main+0x874>)
			Index = USB_RX_Buffer[k++];			// index of current received package which conveys the data of a single freq
 8003868:	7a8a      	ldrb	r2, [r1, #10]
			Freqs_numbers = USB_RX_Buffer[k++]; // Total number of freqs which are supposed to be received
 800386a:	8003      	strh	r3, [r0, #0]
 800386c:	7acb      	ldrb	r3, [r1, #11]
			Index = USB_RX_Buffer[k++];			// index of current received package which conveys the data of a single freq
 800386e:	496e      	ldr	r1, [pc, #440]	; (8003a28 <main+0x880>)
 8003870:	800a      	strh	r2, [r1, #0]
			Freqs_numbers = USB_RX_Buffer[k++]; // Total number of freqs which are supposed to be received
 8003872:	4a6e      	ldr	r2, [pc, #440]	; (8003a2c <main+0x884>)
 8003874:	8013      	strh	r3, [r2, #0]
					USB_TX_Buffer[i] = device_preamble_Error[i];
 8003876:	486e      	ldr	r0, [pc, #440]	; (8003a30 <main+0x888>)
 8003878:	496e      	ldr	r1, [pc, #440]	; (8003a34 <main+0x88c>)
 800387a:	e9d1 3200 	ldrd	r3, r2, [r1]
 800387e:	6042      	str	r2, [r0, #4]
 8003880:	6003      	str	r3, [r0, #0]
 8003882:	7a0a      	ldrb	r2, [r1, #8]
 8003884:	7a4b      	ldrb	r3, [r1, #9]
 8003886:	7202      	strb	r2, [r0, #8]
 8003888:	7243      	strb	r3, [r0, #9]
 800388a:	4b6b      	ldr	r3, [pc, #428]	; (8003a38 <main+0x890>)
 800388c:	4a6b      	ldr	r2, [pc, #428]	; (8003a3c <main+0x894>)
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	6010      	str	r0, [r2, #0]
 8003894:	6898      	ldr	r0, [r3, #8]
 8003896:	6051      	str	r1, [r2, #4]
 8003898:	68d9      	ldr	r1, [r3, #12]
 800389a:	3310      	adds	r3, #16
 800389c:	60d1      	str	r1, [r2, #12]
 800389e:	4968      	ldr	r1, [pc, #416]	; (8003a40 <main+0x898>)
 80038a0:	6090      	str	r0, [r2, #8]
 80038a2:	428b      	cmp	r3, r1
 80038a4:	f102 0210 	add.w	r2, r2, #16
 80038a8:	d1f1      	bne.n	800388e <main+0x6e6>
 80038aa:	460b      	mov	r3, r1
 80038ac:	889b      	ldrh	r3, [r3, #4]
 80038ae:	6809      	ldr	r1, [r1, #0]
 80038b0:	8093      	strh	r3, [r2, #4]
			LED1_GPIO_Port -> BSRR = LED1_Pin;
 80038b2:	4b64      	ldr	r3, [pc, #400]	; (8003a44 <main+0x89c>)
 80038b4:	2402      	movs	r4, #2
 80038b6:	461e      	mov	r6, r3
 80038b8:	6011      	str	r1, [r2, #0]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,USB_TX_Buffer,64);
 80038ba:	4658      	mov	r0, fp
			LED1_GPIO_Port -> BSRR = LED1_Pin;
 80038bc:	611c      	str	r4, [r3, #16]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,USB_TX_Buffer,64);
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7fe ff1b 	bl	80026fc <USBD_CUSTOM_HID_SendReport>
			LED1_GPIO_Port -> BRR = LED1_Pin;
 80038c6:	6174      	str	r4, [r6, #20]
 80038c8:	2100      	movs	r1, #0
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	4628      	mov	r0, r5
 80038ce:	f000 fc02 	bl	80040d6 <memset>
			if ((Index >= (Freqs_numbers - 1)) && (HostMsgVerified == 1))
 80038d2:	4b56      	ldr	r3, [pc, #344]	; (8003a2c <main+0x884>)
 80038d4:	881c      	ldrh	r4, [r3, #0]
 80038d6:	4b54      	ldr	r3, [pc, #336]	; (8003a28 <main+0x880>)
 80038d8:	1e61      	subs	r1, r4, #1
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	428b      	cmp	r3, r1
 80038de:	db03      	blt.n	80038e8 <main+0x740>
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <main+0x87c>)
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d072      	beq.n	80039ce <main+0x826>
				{Flag_end_Transaction = 0;}
 80038e8:	2300      	movs	r3, #0
 80038ea:	4a57      	ldr	r2, [pc, #348]	; (8003a48 <main+0x8a0>)
 80038ec:	8013      	strh	r3, [r2, #0]
 80038ee:	e541      	b.n	8003374 <main+0x1cc>
     uint32_t clk_cycle_start = DWT->CYCCNT;
 80038f0:	f8df b174 	ldr.w	fp, [pc, #372]	; 8003a68 <main+0x8c0>
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	f8db a004 	ldr.w	sl, [fp, #4]
     microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80038fa:	f7fe f8e1 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
     while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80038fe:	4659      	mov	r1, fp
     microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003900:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <main+0x8a4>)
 8003902:	fba3 3200 	umull	r3, r2, r3, r0
 8003906:	9b01      	ldr	r3, [sp, #4]
 8003908:	0c92      	lsrs	r2, r2, #18
 800390a:	fb03 f302 	mul.w	r3, r3, r2
     while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800390e:	684a      	ldr	r2, [r1, #4]
 8003910:	eba2 020a 	sub.w	r2, r2, sl
 8003914:	429a      	cmp	r2, r3
 8003916:	d3fa      	bcc.n	800390e <main+0x766>
 8003918:	e712      	b.n	8003740 <main+0x598>
			HostMsgVerified = 0;
 800391a:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <main+0x87c>)
 800391c:	f8a3 9000 	strh.w	r9, [r3]
				{verifier++;}
 8003920:	2301      	movs	r3, #1
 8003922:	4a3f      	ldr	r2, [pc, #252]	; (8003a20 <main+0x878>)
 8003924:	2402      	movs	r4, #2
 8003926:	8013      	strh	r3, [r2, #0]
 8003928:	e746      	b.n	80037b8 <main+0x610>
			Freqs_numbers = USB_RX_Buffer[k++]; // Total number of freqs which are supposed to be received
 800392a:	200c      	movs	r0, #12
			Index = USB_RX_Buffer[k++];			// index of current received package which conveys the data of a single freq
 800392c:	493a      	ldr	r1, [pc, #232]	; (8003a18 <main+0x870>)
				{verifier++;}
 800392e:	4e3c      	ldr	r6, [pc, #240]	; (8003a20 <main+0x878>)
 8003930:	3301      	adds	r3, #1
			Index = USB_RX_Buffer[k++];			// index of current received package which conveys the data of a single freq
 8003932:	7a8a      	ldrb	r2, [r1, #10]
				{verifier++;}
 8003934:	b29b      	uxth	r3, r3
 8003936:	8033      	strh	r3, [r6, #0]
			Index = USB_RX_Buffer[k++];			// index of current received package which conveys the data of a single freq
 8003938:	4e3b      	ldr	r6, [pc, #236]	; (8003a28 <main+0x880>)
 800393a:	b294      	uxth	r4, r2
 800393c:	8034      	strh	r4, [r6, #0]
			Freqs_numbers = USB_RX_Buffer[k++]; // Total number of freqs which are supposed to be received
 800393e:	4e37      	ldr	r6, [pc, #220]	; (8003a1c <main+0x874>)
 8003940:	7ac9      	ldrb	r1, [r1, #11]
 8003942:	8030      	strh	r0, [r6, #0]
 8003944:	4839      	ldr	r0, [pc, #228]	; (8003a2c <main+0x884>)
			if ((verifier == 10) && (Index < 100) && (Freqs_numbers < 101))
 8003946:	2b0a      	cmp	r3, #10
			Freqs_numbers = USB_RX_Buffer[k++]; // Total number of freqs which are supposed to be received
 8003948:	8001      	strh	r1, [r0, #0]
			if ((verifier == 10) && (Index < 100) && (Freqs_numbers < 101))
 800394a:	d194      	bne.n	8003876 <main+0x6ce>
 800394c:	2c63      	cmp	r4, #99	; 0x63
 800394e:	d892      	bhi.n	8003876 <main+0x6ce>
 8003950:	2964      	cmp	r1, #100	; 0x64
 8003952:	d890      	bhi.n	8003876 <main+0x6ce>
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 16);
 8003954:	4930      	ldr	r1, [pc, #192]	; (8003a18 <main+0x870>)
				HostMsgVerified = 1;
 8003956:	f04f 0c01 	mov.w	ip, #1
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 16);
 800395a:	460e      	mov	r6, r1
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 8);
 800395c:	f896 e00d 	ldrb.w	lr, [r6, #13]
				index_checker[Index] = Index;
 8003960:	4e3b      	ldr	r6, [pc, #236]	; (8003a50 <main+0x8a8>)
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 16);
 8003962:	7b8b      	ldrb	r3, [r1, #14]
				index_checker[Index] = Index;
 8003964:	f826 4012 	strh.w	r4, [r6, r2, lsl #1]
				DDS_Freqs[Index] = USB_RX_Buffer[k++];
 8003968:	4c2b      	ldr	r4, [pc, #172]	; (8003a18 <main+0x870>)
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 16);
 800396a:	041b      	lsls	r3, r3, #16
				DDS_Freqs[Index] = USB_RX_Buffer[k++];
 800396c:	7b24      	ldrb	r4, [r4, #12]
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 16);
 800396e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
				HostMsgVerified = 1;
 8003972:	4e2c      	ldr	r6, [pc, #176]	; (8003a24 <main+0x87c>)
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 16);
 8003974:	4423      	add	r3, r4
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 24);
 8003976:	4c28      	ldr	r4, [pc, #160]	; (8003a18 <main+0x870>)
				HostMsgVerified = 1;
 8003978:	f8a6 c000 	strh.w	ip, [r6]
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 8);
 800397c:	4626      	mov	r6, r4
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 24);
 800397e:	2015      	movs	r0, #21
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 16);
 8003980:	7cc9      	ldrb	r1, [r1, #19]
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 24);
 8003982:	f894 c00f 	ldrb.w	ip, [r4, #15]
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 8);
 8003986:	7ca4      	ldrb	r4, [r4, #18]
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 16);
 8003988:	0409      	lsls	r1, r1, #16
 800398a:	eb01 2104 	add.w	r1, r1, r4, lsl #8
				Freq_Times[Index] = USB_RX_Buffer[k++];
 800398e:	7c74      	ldrb	r4, [r6, #17]
				DDS_Freqs[Index] += (USB_RX_Buffer[k++] << 24);
 8003990:	4e30      	ldr	r6, [pc, #192]	; (8003a54 <main+0x8ac>)
 8003992:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 8003996:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 16);
 800399a:	190b      	adds	r3, r1, r4
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 24);
 800399c:	4c1e      	ldr	r4, [pc, #120]	; (8003a18 <main+0x870>)
 800399e:	4e1f      	ldr	r6, [pc, #124]	; (8003a1c <main+0x874>)
 80039a0:	7d21      	ldrb	r1, [r4, #20]
 80039a2:	8030      	strh	r0, [r6, #0]
					USB_TX_Buffer[i] = device_preamble_OK[i];
 80039a4:	482c      	ldr	r0, [pc, #176]	; (8003a58 <main+0x8b0>)
				Freq_Times[Index] += (USB_RX_Buffer[k++] << 24);
 80039a6:	4e2d      	ldr	r6, [pc, #180]	; (8003a5c <main+0x8b4>)
 80039a8:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 80039ac:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
					USB_TX_Buffer[i] = device_preamble_OK[i];
 80039b0:	4603      	mov	r3, r0
				Gains[Index] = USB_RX_Buffer[k++];
 80039b2:	7c24      	ldrb	r4, [r4, #16]
 80039b4:	4e2a      	ldr	r6, [pc, #168]	; (8003a60 <main+0x8b8>)
					USB_TX_Buffer[i] = device_preamble_OK[i];
 80039b6:	6841      	ldr	r1, [r0, #4]
				Gains[Index] = USB_RX_Buffer[k++];
 80039b8:	f826 4012 	strh.w	r4, [r6, r2, lsl #1]
					USB_TX_Buffer[i] = device_preamble_OK[i];
 80039bc:	6800      	ldr	r0, [r0, #0]
 80039be:	4c1c      	ldr	r4, [pc, #112]	; (8003a30 <main+0x888>)
 80039c0:	7a1a      	ldrb	r2, [r3, #8]
 80039c2:	7a5b      	ldrb	r3, [r3, #9]
 80039c4:	6061      	str	r1, [r4, #4]
 80039c6:	6020      	str	r0, [r4, #0]
 80039c8:	7222      	strb	r2, [r4, #8]
 80039ca:	7263      	strb	r3, [r4, #9]
 80039cc:	e75d      	b.n	800388a <main+0x6e2>
				index_verifier = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <main+0x8bc>)
 80039d2:	8013      	strh	r3, [r2, #0]
				for(uint16_t i = 0; i < Freqs_numbers; i++)
 80039d4:	b1d4      	cbz	r4, 8003a0c <main+0x864>
 80039d6:	4618      	mov	r0, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003a50 <main+0x8a8>
					if (index_checker[i] == i)
 80039de:	f83c eb02 	ldrh.w	lr, [ip], #2
 80039e2:	3301      	adds	r3, #1
 80039e4:	4572      	cmp	r2, lr
						index_verifier++;
 80039e6:	bf08      	it	eq
 80039e8:	3001      	addeq	r0, #1
				for(uint16_t i = 0; i < Freqs_numbers; i++)
 80039ea:	b29a      	uxth	r2, r3
						index_verifier++;
 80039ec:	bf08      	it	eq
 80039ee:	b280      	uxtheq	r0, r0
				for(uint16_t i = 0; i < Freqs_numbers; i++)
 80039f0:	4294      	cmp	r4, r2
 80039f2:	d8f4      	bhi.n	80039de <main+0x836>
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <main+0x8bc>)
				if(index_verifier == Freqs_numbers)
 80039f6:	42a0      	cmp	r0, r4
 80039f8:	8018      	strh	r0, [r3, #0]
 80039fa:	f47f af75 	bne.w	80038e8 <main+0x740>
						index_checker[i] = 0;
 80039fe:	b28a      	uxth	r2, r1
 8003a00:	3201      	adds	r2, #1
 8003a02:	0052      	lsls	r2, r2, #1
 8003a04:	2100      	movs	r1, #0
 8003a06:	4812      	ldr	r0, [pc, #72]	; (8003a50 <main+0x8a8>)
 8003a08:	f000 fb65 	bl	80040d6 <memset>
					Flag_end_Transaction = 1;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <main+0x8a0>)
 8003a10:	8013      	strh	r3, [r2, #0]
 8003a12:	e4bb      	b.n	800338c <main+0x1e4>
 8003a14:	2000010c 	.word	0x2000010c
 8003a18:	200003b8 	.word	0x200003b8
 8003a1c:	200001c2 	.word	0x200001c2
 8003a20:	200001c4 	.word	0x200001c4
 8003a24:	200004c0 	.word	0x200004c0
 8003a28:	200001be 	.word	0x200001be
 8003a2c:	20000698 	.word	0x20000698
 8003a30:	20000658 	.word	0x20000658
 8003a34:	200000f4 	.word	0x200000f4
 8003a38:	200003c2 	.word	0x200003c2
 8003a3c:	20000662 	.word	0x20000662
 8003a40:	200003f2 	.word	0x200003f2
 8003a44:	40010800 	.word	0x40010800
 8003a48:	200003b4 	.word	0x200003b4
 8003a4c:	431bde83 	.word	0x431bde83
 8003a50:	2000069c 	.word	0x2000069c
 8003a54:	200004c4 	.word	0x200004c4
 8003a58:	20000100 	.word	0x20000100
 8003a5c:	20000224 	.word	0x20000224
 8003a60:	200003f8 	.word	0x200003f8
 8003a64:	200001c0 	.word	0x200001c0
 8003a68:	e0001000 	.word	0xe0001000

08003a6c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop

08003a70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_MspInit+0x38>)
{
 8003a72:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a74:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8003a76:	490d      	ldr	r1, [pc, #52]	; (8003aac <HAL_MspInit+0x3c>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	619a      	str	r2, [r3, #24]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	f002 0201 	and.w	r2, r2, #1
 8003a84:	9200      	str	r2, [sp, #0]
 8003a86:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a8e:	61da      	str	r2, [r3, #28]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8003a9a:	684b      	ldr	r3, [r1, #4]
 8003a9c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003aa0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa2:	b002      	add	sp, #8
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40010000 	.word	0x40010000

08003ab0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ab4:	e7fe      	b.n	8003ab4 <HardFault_Handler>
 8003ab6:	bf00      	nop

08003ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab8:	e7fe      	b.n	8003ab8 <MemManage_Handler>
 8003aba:	bf00      	nop

08003abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003abc:	e7fe      	b.n	8003abc <BusFault_Handler>
 8003abe:	bf00      	nop

08003ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac0:	e7fe      	b.n	8003ac0 <UsageFault_Handler>
 8003ac2:	bf00      	nop

08003ac4 <SVC_Handler>:
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <DebugMon_Handler>:
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop

08003acc <PendSV_Handler>:
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop

08003ad0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad0:	f7fc bf62 	b.w	8000998 <HAL_IncTick>

08003ad4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003ad4:	4801      	ldr	r0, [pc, #4]	; (8003adc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003ad6:	f7fd b987 	b.w	8000de8 <HAL_PCD_IRQHandler>
 8003ada:	bf00      	nop
 8003adc:	20000a28 	.word	0x20000a28

08003ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ae0:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003ae2:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003ae6:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8003aec:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8003aee:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003af0:	480e      	ldr	r0, [pc, #56]	; (8003b2c <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8003af2:	f041 0101 	orr.w	r1, r1, #1
 8003af6:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	400a      	ands	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003b04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b08:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b10:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003b18:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8003b1a:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b1c:	6084      	str	r4, [r0, #8]
#endif 
}
 8003b1e:	bc30      	pop	{r4, r5}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	f8ff0000 	.word	0xf8ff0000
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003b30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003b32:	2200      	movs	r2, #0
 8003b34:	4910      	ldr	r1, [pc, #64]	; (8003b78 <MX_USB_DEVICE_Init+0x48>)
 8003b36:	4811      	ldr	r0, [pc, #68]	; (8003b7c <MX_USB_DEVICE_Init+0x4c>)
 8003b38:	f7fe fe00 	bl	800273c <USBD_Init>
 8003b3c:	b9c0      	cbnz	r0, 8003b70 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8003b3e:	4910      	ldr	r1, [pc, #64]	; (8003b80 <MX_USB_DEVICE_Init+0x50>)
 8003b40:	480e      	ldr	r0, [pc, #56]	; (8003b7c <MX_USB_DEVICE_Init+0x4c>)
 8003b42:	f7fe fe11 	bl	8002768 <USBD_RegisterClass>
 8003b46:	b980      	cbnz	r0, 8003b6a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8003b48:	490e      	ldr	r1, [pc, #56]	; (8003b84 <MX_USB_DEVICE_Init+0x54>)
 8003b4a:	480c      	ldr	r0, [pc, #48]	; (8003b7c <MX_USB_DEVICE_Init+0x4c>)
 8003b4c:	f7fe fdee 	bl	800272c <USBD_CUSTOM_HID_RegisterInterface>
 8003b50:	b940      	cbnz	r0, 8003b64 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003b52:	480a      	ldr	r0, [pc, #40]	; (8003b7c <MX_USB_DEVICE_Init+0x4c>)
 8003b54:	f7fe fe10 	bl	8002778 <USBD_Start>
 8003b58:	b900      	cbnz	r0, 8003b5c <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003b5a:	bd08      	pop	{r3, pc}
 8003b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003b60:	f7ff bf84 	b.w	8003a6c <Error_Handler>
    Error_Handler();
 8003b64:	f7ff ff82 	bl	8003a6c <Error_Handler>
 8003b68:	e7f3      	b.n	8003b52 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8003b6a:	f7ff ff7f 	bl	8003a6c <Error_Handler>
 8003b6e:	e7eb      	b.n	8003b48 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003b70:	f7ff ff7c 	bl	8003a6c <Error_Handler>
 8003b74:	e7e3      	b.n	8003b3e <MX_USB_DEVICE_Init+0xe>
 8003b76:	bf00      	nop
 8003b78:	20000150 	.word	0x20000150
 8003b7c:	20000764 	.word	0x20000764
 8003b80:	20000008 	.word	0x20000008
 8003b84:	20000140 	.word	0x20000140

08003b88 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8003b88:	6802      	ldr	r2, [r0, #0]
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_PCD_MspInit+0x3c>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d000      	beq.n	8003b92 <HAL_PCD_MspInit+0xa>
 8003b90:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b92:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003b94:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 8003b98:	b510      	push	{r4, lr}
    __HAL_RCC_USB_CLK_ENABLE();
 8003b9a:	69dc      	ldr	r4, [r3, #28]
{
 8003b9c:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8003b9e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8003ba2:	61dc      	str	r4, [r3, #28]
 8003ba4:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003ba6:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bac:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003bae:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8003bb0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003bb2:	f7fc ff27 	bl	8000a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003bb6:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003bb8:	b002      	add	sp, #8
 8003bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003bbe:	f7fc bf57 	b.w	8000a70 <HAL_NVIC_EnableIRQ>
 8003bc2:	bf00      	nop
 8003bc4:	40005c00 	.word	0x40005c00

08003bc8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003bc8:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8003bcc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003bd0:	f7fe bdea 	b.w	80027a8 <USBD_LL_SetupStage>

08003bd4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003bd4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003bd8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003bdc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003be0:	f7fe be12 	b.w	8002808 <USBD_LL_DataOutStage>

08003be4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003be4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bea:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003bee:	f7fe be4b 	b.w	8002888 <USBD_LL_DataInStage>
 8003bf2:	bf00      	nop

08003bf4 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003bf4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003bf8:	f7fe bee6 	b.w	80029c8 <USBD_LL_SOF>

08003bfc <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003bfc:	6883      	ldr	r3, [r0, #8]
{ 
 8003bfe:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c00:	2b02      	cmp	r3, #2
{ 
 8003c02:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c04:	d001      	beq.n	8003c0a <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003c06:	f7ff ff31 	bl	8003a6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003c0a:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8003c0e:	2101      	movs	r1, #1
 8003c10:	f7fe fec2 	bl	8002998 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c14:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8003c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c1c:	f7fe be94 	b.w	8002948 <USBD_LL_Reset>

08003c20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c24:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003c28:	f7fe feba 	bl	80029a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003c2c:	69a3      	ldr	r3, [r4, #24]
 8003c2e:	b123      	cbz	r3, 8003c3a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c30:	4a02      	ldr	r2, [pc, #8]	; (8003c3c <HAL_PCD_SuspendCallback+0x1c>)
 8003c32:	6913      	ldr	r3, [r2, #16]
 8003c34:	f043 0306 	orr.w	r3, r3, #6
 8003c38:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003c3a:	bd10      	pop	{r4, pc}
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c40:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003c44:	f7fe beb6 	b.w	80029b4 <USBD_LL_Resume>

08003c48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003c4c:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003c4e:	2508      	movs	r5, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003c50:	2102      	movs	r1, #2
  hpcd_USB_FS.pData = pdev;
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Instance = USB;
 8003c54:	4818      	ldr	r0, [pc, #96]	; (8003cb8 <USBD_LL_Init+0x70>)
  pdev->pData = &hpcd_USB_FS;
 8003c56:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8003c5a:	6018      	str	r0, [r3, #0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003c5c:	4618      	mov	r0, r3
  hpcd_USB_FS.pData = pdev;
 8003c5e:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003c62:	e9c3 5101 	strd	r5, r1, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003c66:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003c6a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003c6c:	f7fd f826 	bl	8000cbc <HAL_PCD_Init>
 8003c70:	b108      	cbz	r0, 8003c76 <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8003c72:	f7ff fefb 	bl	8003a6c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2318      	movs	r3, #24
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003c80:	f7fd fc34 	bl	80014ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003c84:	2358      	movs	r3, #88	; 0x58
 8003c86:	2200      	movs	r2, #0
 8003c88:	2180      	movs	r1, #128	; 0x80
 8003c8a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003c8e:	f7fd fc2d 	bl	80014ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8003c92:	2398      	movs	r3, #152	; 0x98
 8003c94:	2200      	movs	r2, #0
 8003c96:	2181      	movs	r1, #129	; 0x81
 8003c98:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003c9c:	f7fd fc26 	bl	80014ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8003ca0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003ca4:	23d8      	movs	r3, #216	; 0xd8
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2101      	movs	r1, #1
 8003caa:	f7fd fc1f 	bl	80014ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
}
 8003cae:	2000      	movs	r0, #0
 8003cb0:	bd38      	pop	{r3, r4, r5, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000a28 	.word	0x20000a28
 8003cb8:	40005c00 	.word	0x40005c00

08003cbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003cbc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003cbe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003cc2:	f7fd f879 	bl	8000db8 <HAL_PCD_Start>
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	bf96      	itet	ls
 8003cca:	4b02      	ldrls	r3, [pc, #8]	; (8003cd4 <USBD_LL_Start+0x18>)
 8003ccc:	2002      	movhi	r0, #2
 8003cce:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003cd0:	bd08      	pop	{r3, pc}
 8003cd2:	bf00      	nop
 8003cd4:	08004120 	.word	0x08004120

08003cd8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003cdc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	4622      	mov	r2, r4
 8003ce4:	f7fd fb02 	bl	80012ec <HAL_PCD_EP_Open>
 8003ce8:	2803      	cmp	r0, #3
 8003cea:	bf96      	itet	ls
 8003cec:	4b01      	ldrls	r3, [pc, #4]	; (8003cf4 <USBD_LL_OpenEP+0x1c>)
 8003cee:	2002      	movhi	r0, #2
 8003cf0:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8003cf2:	bd10      	pop	{r4, pc}
 8003cf4:	08004120 	.word	0x08004120

08003cf8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003cf8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003cfa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003cfe:	f7fd fb27 	bl	8001350 <HAL_PCD_EP_Close>
 8003d02:	2803      	cmp	r0, #3
 8003d04:	bf96      	itet	ls
 8003d06:	4b02      	ldrls	r3, [pc, #8]	; (8003d10 <USBD_LL_CloseEP+0x18>)
 8003d08:	2002      	movhi	r0, #2
 8003d0a:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8003d0c:	bd08      	pop	{r3, pc}
 8003d0e:	bf00      	nop
 8003d10:	08004120 	.word	0x08004120

08003d14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d16:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d1a:	f7fd fb73 	bl	8001404 <HAL_PCD_EP_SetStall>
 8003d1e:	2803      	cmp	r0, #3
 8003d20:	bf96      	itet	ls
 8003d22:	4b02      	ldrls	r3, [pc, #8]	; (8003d2c <USBD_LL_StallEP+0x18>)
 8003d24:	2002      	movhi	r0, #2
 8003d26:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003d28:	bd08      	pop	{r3, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08004120 	.word	0x08004120

08003d30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d30:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003d32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d36:	f7fd fba1 	bl	800147c <HAL_PCD_EP_ClrStall>
 8003d3a:	2803      	cmp	r0, #3
 8003d3c:	bf96      	itet	ls
 8003d3e:	4b02      	ldrls	r3, [pc, #8]	; (8003d48 <USBD_LL_ClearStallEP+0x18>)
 8003d40:	2002      	movhi	r0, #2
 8003d42:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8003d44:	bd08      	pop	{r3, pc}
 8003d46:	bf00      	nop
 8003d48:	08004120 	.word	0x08004120

08003d4c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003d4c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d4e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8003d52:	d404      	bmi.n	8003d5e <USBD_LL_IsStallEP+0x12>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d54:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003d58:	f893 012a 	ldrb.w	r0, [r3, #298]	; 0x12a
  }
}
 8003d5c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d5e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003d62:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003d66:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003d6a:	4770      	bx	lr

08003d6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003d6c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003d6e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d72:	f7fd faa7 	bl	80012c4 <HAL_PCD_SetAddress>
 8003d76:	2803      	cmp	r0, #3
 8003d78:	bf96      	itet	ls
 8003d7a:	4b02      	ldrls	r3, [pc, #8]	; (8003d84 <USBD_LL_SetUSBAddress+0x18>)
 8003d7c:	2002      	movhi	r0, #2
 8003d7e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003d80:	bd08      	pop	{r3, pc}
 8003d82:	bf00      	nop
 8003d84:	08004120 	.word	0x08004120

08003d88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003d88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003d8a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d8e:	f7fd fb23 	bl	80013d8 <HAL_PCD_EP_Transmit>
 8003d92:	2803      	cmp	r0, #3
 8003d94:	bf96      	itet	ls
 8003d96:	4b02      	ldrls	r3, [pc, #8]	; (8003da0 <USBD_LL_Transmit+0x18>)
 8003d98:	2002      	movhi	r0, #2
 8003d9a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8003d9c:	bd08      	pop	{r3, pc}
 8003d9e:	bf00      	nop
 8003da0:	08004120 	.word	0x08004120

08003da4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003da4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003da6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003daa:	f7fd fafd 	bl	80013a8 <HAL_PCD_EP_Receive>
 8003dae:	2803      	cmp	r0, #3
 8003db0:	bf96      	itet	ls
 8003db2:	4b02      	ldrls	r3, [pc, #8]	; (8003dbc <USBD_LL_PrepareReceive+0x18>)
 8003db4:	2002      	movhi	r0, #2
 8003db6:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8003db8:	bd08      	pop	{r3, pc}
 8003dba:	bf00      	nop
 8003dbc:	08004120 	.word	0x08004120

08003dc0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
}
 8003dc0:	4800      	ldr	r0, [pc, #0]	; (8003dc4 <USBD_static_malloc+0x4>)
 8003dc2:	4770      	bx	lr
 8003dc4:	200001c8 	.word	0x200001c8

08003dc8 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop

08003dcc <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop

08003dd0 <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	4770      	bx	lr

08003dd4 <CUSTOM_HID_OutEvent_FS>:
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 6 */
	//LED2_GPIO_Port -> BSRR = LED2_Pin;
	USBD_CUSTOM_HID_HandleTypeDef		*hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <CUSTOM_HID_OutEvent_FS+0x80>)
 8003dd6:	4920      	ldr	r1, [pc, #128]	; (8003e58 <CUSTOM_HID_OutEvent_FS+0x84>)
 8003dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	428a      	cmp	r2, r1
 8003de0:	d902      	bls.n	8003de8 <CUSTOM_HID_OutEvent_FS+0x14>
 8003de2:	1d0a      	adds	r2, r1, #4
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d326      	bcc.n	8003e36 <CUSTOM_HID_OutEvent_FS+0x62>
{
 8003de8:	b430      	push	{r4, r5}
	for (uint8_t i = 0; i < 64; i++)
	{
		USB_RX_Buffer[i] = hhid->Report_buf[i];
 8003dea:	e9d3 4000 	ldrd	r4, r0, [r3]
 8003dee:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
 8003df2:	600c      	str	r4, [r1, #0]
 8003df4:	6048      	str	r0, [r1, #4]
 8003df6:	691c      	ldr	r4, [r3, #16]
 8003df8:	6958      	ldr	r0, [r3, #20]
 8003dfa:	608a      	str	r2, [r1, #8]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	60cd      	str	r5, [r1, #12]
 8003e00:	610c      	str	r4, [r1, #16]
 8003e02:	69dd      	ldr	r5, [r3, #28]
 8003e04:	6a1c      	ldr	r4, [r3, #32]
 8003e06:	6148      	str	r0, [r1, #20]
 8003e08:	618a      	str	r2, [r1, #24]
 8003e0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0e:	61cd      	str	r5, [r1, #28]
 8003e10:	620c      	str	r4, [r1, #32]
 8003e12:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003e14:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003e16:	6248      	str	r0, [r1, #36]	; 0x24
 8003e18:	628a      	str	r2, [r1, #40]	; 0x28
 8003e1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003e20:	638a      	str	r2, [r1, #56]	; 0x38
	}
	Flag_Rcvd_Data_HID = 1;
 8003e22:	2201      	movs	r2, #1
		USB_RX_Buffer[i] = hhid->Report_buf[i];
 8003e24:	62cd      	str	r5, [r1, #44]	; 0x2c
 8003e26:	630c      	str	r4, [r1, #48]	; 0x30
 8003e28:	6348      	str	r0, [r1, #52]	; 0x34
 8003e2a:	63cb      	str	r3, [r1, #60]	; 0x3c
	Flag_Rcvd_Data_HID = 1;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <CUSTOM_HID_OutEvent_FS+0x88>)
	//LED2_GPIO_Port -> BRR = LED2_Pin;
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003e2e:	2000      	movs	r0, #0
	Flag_Rcvd_Data_HID = 1;
 8003e30:	701a      	strb	r2, [r3, #0]
}
 8003e32:	bc30      	pop	{r4, r5}
 8003e34:	4770      	bx	lr
 8003e36:	1e4a      	subs	r2, r1, #1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	313f      	adds	r1, #63	; 0x3f
		USB_RX_Buffer[i] = hhid->Report_buf[i];
 8003e3c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003e40:	f802 0f01 	strb.w	r0, [r2, #1]!
	for (uint8_t i = 0; i < 64; i++)
 8003e44:	4291      	cmp	r1, r2
 8003e46:	d1f9      	bne.n	8003e3c <CUSTOM_HID_OutEvent_FS+0x68>
	Flag_Rcvd_Data_HID = 1;
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <CUSTOM_HID_OutEvent_FS+0x88>)
}
 8003e4c:	2000      	movs	r0, #0
	Flag_Rcvd_Data_HID = 1;
 8003e4e:	701a      	strb	r2, [r3, #0]
}
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000764 	.word	0x20000764
 8003e58:	200003b8 	.word	0x200003b8
 8003e5c:	200001bd 	.word	0x200001bd

08003e60 <CUSTOM_HID_DeInit_FS>:
 8003e60:	2000      	movs	r0, #0
 8003e62:	4770      	bx	lr

08003e64 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e64:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003e66:	4801      	ldr	r0, [pc, #4]	; (8003e6c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e68:	800b      	strh	r3, [r1, #0]
}
 8003e6a:	4770      	bx	lr
 8003e6c:	2000016c 	.word	0x2000016c

08003e70 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003e70:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003e72:	4801      	ldr	r0, [pc, #4]	; (8003e78 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003e74:	800b      	strh	r3, [r1, #0]
}
 8003e76:	4770      	bx	lr
 8003e78:	20000180 	.word	0x20000180

08003e7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003e7c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e7e:	4c04      	ldr	r4, [pc, #16]	; (8003e90 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003e80:	460a      	mov	r2, r1
 8003e82:	4804      	ldr	r0, [pc, #16]	; (8003e94 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003e84:	4621      	mov	r1, r4
 8003e86:	f7ff f80d 	bl	8002ea4 <USBD_GetString>
  return USBD_StrDesc;
}
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	bd10      	pop	{r4, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000c94 	.word	0x20000c94
 8003e94:	08004150 	.word	0x08004150

08003e98 <USBD_FS_ProductStrDescriptor>:
{
 8003e98:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e9a:	4c04      	ldr	r4, [pc, #16]	; (8003eac <USBD_FS_ProductStrDescriptor+0x14>)
 8003e9c:	460a      	mov	r2, r1
 8003e9e:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <USBD_FS_ProductStrDescriptor+0x18>)
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	f7fe ffff 	bl	8002ea4 <USBD_GetString>
}
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000c94 	.word	0x20000c94
 8003eb0:	08004164 	.word	0x08004164

08003eb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003eb4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003eb6:	4c04      	ldr	r4, [pc, #16]	; (8003ec8 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003eb8:	460a      	mov	r2, r1
 8003eba:	4804      	ldr	r0, [pc, #16]	; (8003ecc <USBD_FS_ConfigStrDescriptor+0x18>)
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	f7fe fff1 	bl	8002ea4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	bd10      	pop	{r4, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000c94 	.word	0x20000c94
 8003ecc:	08004124 	.word	0x08004124

08003ed0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003ed0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003ed2:	4c04      	ldr	r4, [pc, #16]	; (8003ee4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003ed8:	4621      	mov	r1, r4
 8003eda:	f7fe ffe3 	bl	8002ea4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003ede:	4620      	mov	r0, r4
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000c94 	.word	0x20000c94
 8003ee8:	08004138 	.word	0x08004138

08003eec <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003eec:	201a      	movs	r0, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003eee:	4a44      	ldr	r2, [pc, #272]	; (8004000 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003ef0:	4b44      	ldr	r3, [pc, #272]	; (8004004 <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003ef2:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8003ef4:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8003ef6:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 8003ef8:	18d2      	adds	r2, r2, r3
 8003efa:	d101      	bne.n	8003f00 <USBD_FS_SerialStrDescriptor+0x14>
}
 8003efc:	4842      	ldr	r0, [pc, #264]	; (8004008 <USBD_FS_SerialStrDescriptor+0x11c>)
 8003efe:	4770      	bx	lr
{
 8003f00:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003f02:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8003f04:	0f13      	lsrs	r3, r2, #28
 8003f06:	b2d8      	uxtb	r0, r3
 8003f08:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003f0a:	4940      	ldr	r1, [pc, #256]	; (800400c <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f0c:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <USBD_FS_SerialStrDescriptor+0x11c>)
 8003f0e:	bf94      	ite	ls
 8003f10:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f12:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003f14:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f16:	7098      	strb	r0, [r3, #2]
    if (((value >> 28)) < 0xA)
 8003f18:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8003f1c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8003f1e:	70dc      	strb	r4, [r3, #3]
 8003f20:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f22:	bf94      	ite	ls
 8003f24:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f26:	3437      	addhi	r4, #55	; 0x37
 8003f28:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 8003f2a:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8003f2c:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8003f30:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8003f32:	715c      	strb	r4, [r3, #5]
 8003f34:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f36:	bf94      	ite	ls
 8003f38:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f3a:	3437      	addhi	r4, #55	; 0x37
 8003f3c:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 8003f3e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8003f40:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8003f44:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8003f46:	71dc      	strb	r4, [r3, #7]
 8003f48:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f4a:	bf94      	ite	ls
 8003f4c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f4e:	3437      	addhi	r4, #55	; 0x37
 8003f50:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 8003f52:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8003f54:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8003f58:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8003f5a:	725c      	strb	r4, [r3, #9]
 8003f5c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f5e:	bf94      	ite	ls
 8003f60:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f62:	3437      	addhi	r4, #55	; 0x37
 8003f64:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 8003f66:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8003f68:	f3c2 2003 	ubfx	r0, r2, #8, #4
 8003f6c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8003f6e:	72dc      	strb	r4, [r3, #11]
 8003f70:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f72:	bf94      	ite	ls
 8003f74:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f76:	3437      	addhi	r4, #55	; 0x37
 8003f78:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 8003f7a:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8003f7c:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8003f80:	2809      	cmp	r0, #9
 8003f82:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 8003f86:	735c      	strb	r4, [r3, #13]
 8003f88:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f8a:	bf98      	it	ls
 8003f8c:	3430      	addls	r4, #48	; 0x30
 8003f8e:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f90:	bf88      	it	hi
 8003f92:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8003f94:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f96:	bf94      	ite	ls
 8003f98:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f9a:	3037      	addhi	r0, #55	; 0x37
 8003f9c:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 8003f9e:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8003fa0:	0f0a      	lsrs	r2, r1, #28
 8003fa2:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8003fa4:	7458      	strb	r0, [r3, #17]
 8003fa6:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8003fa8:	bf94      	ite	ls
 8003faa:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003fac:	3037      	addhi	r0, #55	; 0x37
 8003fae:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 8003fb0:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8003fb2:	f3c1 6203 	ubfx	r2, r1, #24, #4
 8003fb6:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8003fb8:	74d8      	strb	r0, [r3, #19]
 8003fba:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8003fbc:	bf94      	ite	ls
 8003fbe:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003fc0:	3037      	addhi	r0, #55	; 0x37
 8003fc2:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 8003fc4:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8003fc6:	f3c1 5203 	ubfx	r2, r1, #20, #4
 8003fca:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8003fcc:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 8003fce:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8003fd2:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8003fd4:	bf98      	it	ls
 8003fd6:	3030      	addls	r0, #48	; 0x30
 8003fd8:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003fda:	bf88      	it	hi
 8003fdc:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8003fde:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8003fe0:	bf94      	ite	ls
 8003fe2:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003fe4:	3237      	addhi	r2, #55	; 0x37
 8003fe6:	739c      	strb	r4, [r3, #14]
 8003fe8:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8003fea:	2400      	movs	r4, #0
 8003fec:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003fee:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	75d8      	strb	r0, [r3, #23]
 8003ff4:	73dc      	strb	r4, [r3, #15]
 8003ff6:	765a      	strb	r2, [r3, #25]
}
 8003ff8:	4803      	ldr	r0, [pc, #12]	; (8004008 <USBD_FS_SerialStrDescriptor+0x11c>)
 8003ffa:	bc10      	pop	{r4}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	1ffff7e8 	.word	0x1ffff7e8
 8004004:	1ffff7f0 	.word	0x1ffff7f0
 8004008:	20000184 	.word	0x20000184
 800400c:	1ffff7ec 	.word	0x1ffff7ec

08004010 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004010:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004012:	e003      	b.n	800401c <LoopCopyDataInit>

08004014 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004016:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004018:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800401a:	3104      	adds	r1, #4

0800401c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800401c:	480a      	ldr	r0, [pc, #40]	; (8004048 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004020:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004022:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004024:	d3f6      	bcc.n	8004014 <CopyDataInit>
  ldr r2, =_sbss
 8004026:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004028:	e002      	b.n	8004030 <LoopFillZerobss>

0800402a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800402a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800402c:	f842 3b04 	str.w	r3, [r2], #4

08004030 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004032:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004034:	d3f9      	bcc.n	800402a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004036:	f7ff fd53 	bl	8003ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800403a:	f000 f80f 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800403e:	f7ff f8b3 	bl	80031a8 <main>
  bx lr
 8004042:	4770      	bx	lr
  ldr r3, =_sidata
 8004044:	08004184 	.word	0x08004184
  ldr r0, =_sdata
 8004048:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800404c:	200001a0 	.word	0x200001a0
  ldr r2, =_sbss
 8004050:	200001a0 	.word	0x200001a0
  ldr r3, = _ebss
 8004054:	20000e94 	.word	0x20000e94

08004058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004058:	e7fe      	b.n	8004058 <ADC1_2_IRQHandler>
	...

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	2500      	movs	r5, #0
 8004060:	4e0c      	ldr	r6, [pc, #48]	; (8004094 <__libc_init_array+0x38>)
 8004062:	4c0d      	ldr	r4, [pc, #52]	; (8004098 <__libc_init_array+0x3c>)
 8004064:	1ba4      	subs	r4, r4, r6
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	42a5      	cmp	r5, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	f000 f83c 	bl	80040e8 <_init>
 8004070:	2500      	movs	r5, #0
 8004072:	4e0a      	ldr	r6, [pc, #40]	; (800409c <__libc_init_array+0x40>)
 8004074:	4c0a      	ldr	r4, [pc, #40]	; (80040a0 <__libc_init_array+0x44>)
 8004076:	1ba4      	subs	r4, r4, r6
 8004078:	10a4      	asrs	r4, r4, #2
 800407a:	42a5      	cmp	r5, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004084:	4798      	blx	r3
 8004086:	3501      	adds	r5, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800408e:	4798      	blx	r3
 8004090:	3501      	adds	r5, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	0800417c 	.word	0x0800417c
 8004098:	0800417c 	.word	0x0800417c
 800409c:	0800417c 	.word	0x0800417c
 80040a0:	08004180 	.word	0x08004180

080040a4 <memmove>:
 80040a4:	4288      	cmp	r0, r1
 80040a6:	b510      	push	{r4, lr}
 80040a8:	eb01 0302 	add.w	r3, r1, r2
 80040ac:	d807      	bhi.n	80040be <memmove+0x1a>
 80040ae:	1e42      	subs	r2, r0, #1
 80040b0:	4299      	cmp	r1, r3
 80040b2:	d00a      	beq.n	80040ca <memmove+0x26>
 80040b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80040bc:	e7f8      	b.n	80040b0 <memmove+0xc>
 80040be:	4283      	cmp	r3, r0
 80040c0:	d9f5      	bls.n	80040ae <memmove+0xa>
 80040c2:	1881      	adds	r1, r0, r2
 80040c4:	1ad2      	subs	r2, r2, r3
 80040c6:	42d3      	cmn	r3, r2
 80040c8:	d100      	bne.n	80040cc <memmove+0x28>
 80040ca:	bd10      	pop	{r4, pc}
 80040cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80040d4:	e7f7      	b.n	80040c6 <memmove+0x22>

080040d6 <memset>:
 80040d6:	4603      	mov	r3, r0
 80040d8:	4402      	add	r2, r0
 80040da:	4293      	cmp	r3, r2
 80040dc:	d100      	bne.n	80040e0 <memset+0xa>
 80040de:	4770      	bx	lr
 80040e0:	f803 1b01 	strb.w	r1, [r3], #1
 80040e4:	e7f9      	b.n	80040da <memset+0x4>
	...

080040e8 <_init>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	bf00      	nop
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr

080040f4 <_fini>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr
