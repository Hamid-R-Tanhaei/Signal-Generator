package main_pack;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Properties;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Hamid
 */
public class MyJFrame extends javax.swing.JFrame {

    //
    MyHidDeviceHandler Device_Handler = new MyHidDeviceHandler(0x16c0, 0x05df, 64);

    /**
     * Creates new form MyJFrame
     */
    public MyJFrame() {
        initComponents();
        //ImageIcon img = new ImageIcon("icon.png");
        //setIconImage(img.getImage());
        //ImageIcon img = new ImageIcon(getClass().getClassLoader().getResource("./icon.png"));
        //setIconImage(img.getImage());
        //setIconImage(new ImageIcon(class.getResource("image.png")));

        //Image im = Toolkit.getDefaultToolkit().getImage("./icon.png");
        //setIconImage(im);
        Image im;
        try {
            im = ImageIO.read(getClass().getResource("/icon.png"));
            setIconImage(im);
        } catch (IOException ex) {
           // Logger.getLogger(MyJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JTableUtilities.setCellsAlignment(jTable_Freqs);
        //
        Device_Handler.Config_HID();
        Device_Handler.Connect2Device();
        //
        for (int i = 0; i < 100; i++) {
            jTable_Freqs.getModel().setValueAt(i + 1, i, 0);
        }
        //jTable_Freqs.setRowHeight(20);
    }

    //
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpFreq = new javax.swing.ButtonGroup();
        btngrpTime = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jBtnApply = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox_Presets = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jBtnSave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_Freqs = new javax.swing.JTable();
        jRadioButton_Hz = new javax.swing.JRadioButton();
        jRadioButton_KHz = new javax.swing.JRadioButton();
        jRadioButton_MHz = new javax.swing.JRadioButton();
        jRadioButton_Sec = new javax.swing.JRadioButton();
        jRadioButton_mSec = new javax.swing.JRadioButton();
        jRadioButton_uSec = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_ActLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Signal Generator");
        setLocation(new java.awt.Point(100, 100));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Time Unit");

        jBtnApply.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBtnApply.setText("Apply");
        jBtnApply.setMaximumSize(new java.awt.Dimension(100, 50));
        jBtnApply.setMinimumSize(new java.awt.Dimension(75, 25));
        jBtnApply.setPreferredSize(new java.awt.Dimension(75, 35));
        jBtnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnApplyActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Freq. Unit");
        jLabel1.setAlignmentX(0.5F);

        jComboBox_Presets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "preset1", "preset2", "preset3", "preset4" }));
        jComboBox_Presets.setPreferredSize(new java.awt.Dimension(75, 25));
        jComboBox_Presets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_PresetsActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Presets:");

        jBtnSave.setText("Save");
        jBtnSave.setMaximumSize(new java.awt.Dimension(100, 30));
        jBtnSave.setPreferredSize(new java.awt.Dimension(75, 25));
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Activity Log:");

        jScrollPane4.setAutoscrolls(true);
        jScrollPane4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jTable_Freqs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable_Freqs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "#", "Freq", "Gain", "Duration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Freqs.setFillsViewportHeight(true);
        jTable_Freqs.setMinimumSize(new java.awt.Dimension(100, 1600));
        jTable_Freqs.setPreferredSize(new java.awt.Dimension(350, 2000));
        jTable_Freqs.setRowHeight(20);
        jScrollPane4.setViewportView(jTable_Freqs);
        if (jTable_Freqs.getColumnModel().getColumnCount() > 0) {
            jTable_Freqs.getColumnModel().getColumn(0).setResizable(false);
            jTable_Freqs.getColumnModel().getColumn(0).setPreferredWidth(30);
        }

        btngrpFreq.add(jRadioButton_Hz);
        jRadioButton_Hz.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jRadioButton_Hz.setSelected(true);
        jRadioButton_Hz.setText("Hz");

        btngrpFreq.add(jRadioButton_KHz);
        jRadioButton_KHz.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jRadioButton_KHz.setText("KHz");

        btngrpFreq.add(jRadioButton_MHz);
        jRadioButton_MHz.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jRadioButton_MHz.setText("MHz");

        btngrpTime.add(jRadioButton_Sec);
        jRadioButton_Sec.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jRadioButton_Sec.setSelected(true);
        jRadioButton_Sec.setText("Sec");

        btngrpTime.add(jRadioButton_mSec);
        jRadioButton_mSec.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jRadioButton_mSec.setText("mSec");

        btngrpTime.add(jRadioButton_uSec);
        jRadioButton_uSec.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jRadioButton_uSec.setText("uSec");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Freq. range : 0 ~ 10MHz");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Gain range : 0 ~ 10");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Duration range : 0 ~ 400Sec");

        jTextArea_ActLog.setEditable(false);
        jTextArea_ActLog.setColumns(20);
        jTextArea_ActLog.setLineWrap(true);
        jTextArea_ActLog.setRows(5);
        jTextArea_ActLog.setMargin(new java.awt.Insets(4, 4, 4, 4));
        jScrollPane1.setViewportView(jTextArea_ActLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton_Hz)
                                            .addComponent(jRadioButton_Sec))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton_mSec)
                                            .addComponent(jRadioButton_KHz))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton_uSec)
                                            .addComponent(jRadioButton_MHz)))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jBtnApply, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jBtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(50, 50, 50)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jLabel5)
                                                    .addComponent(jLabel6)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jComboBox_Presets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel4))
                        .addGap(0, 32, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jRadioButton_Hz)
                    .addComponent(jRadioButton_KHz)
                    .addComponent(jRadioButton_MHz))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jRadioButton_Sec)
                    .addComponent(jRadioButton_mSec)
                    .addComponent(jRadioButton_uSec))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBtnApply, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_Presets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnApplyActionPerformed
        ///////////////////
        //byte[] host_preamble = new byte[10];
        byte[] host_preamble = {'S', 'i', 'G', 'n', 'V', '1', 'H', 'o', 's', 't'};
        byte[] device_preamble_OK = {'S', 'i', 'G', 'n', 'V', '1', 'D', 'e', 'O', 'K'};
        byte[] device_preamble_Error = {'S', 'i', 'G', 'n', 'V', '1', 'D', 'e', 'E', 'r'};
        int verifier_counter = 0;
        //
        byte[] TX_Buffer = new byte[64];
        byte[] RX_Buffer = new byte[64];
        //
        int no_of_freq = 0;
        Double[] Freqs = new Double[100];
        Double[] Gains = new Double[100];
        Double[] Durations = new Double[100];

        for (int i = 0; i < 100; i++) {
            try {
                Freqs[i] = Double.parseDouble(jTable_Freqs.getModel().getValueAt(i, 1).toString());
                if (Freqs[i] == null) {
                    break;
                }
                //if (jComboBox_FreqUnits.getModel().getSelectedItem().equals("KHz")){
                if (jRadioButton_KHz.getModel().isSelected()) {
                    Freqs[i] = (Freqs[i] * 1000);
                } //else if (jComboBox_FreqUnits.getModel().getSelectedItem().equals("MHz")){
                else if (jRadioButton_MHz.getModel().isSelected()) {
                    Freqs[i] = Freqs[i] * 1000000;
                }
                if ((Freqs[i] > 10000000) || (Freqs[i] < 0)) {
                    WriteLog("Wrong data! Freq. range: 0 ~ 10MHz", true);
                    break;
                }

                //jTextArea_SentBytes.append(Freqs[i] + "\n");
                //Gains[i] = (short) jTable_Freqs.getModel().getValueAt(i, 2);
                Gains[i] = Double.parseDouble(jTable_Freqs.getModel().getValueAt(i, 2).toString());
                if ((Gains[i] >= 0) && (Gains[i] <= 5)) {
                    Gains[i] = Gains[i] / 0.056;
                } else if ((Gains[i] > 5) && (Gains[i] <= 10)) {
                    Gains[i] = Gains[i] / 0.4;
                    Gains[i] += 128;
                } else {
                    WriteLog("Wrong data! Gain range: 0 ~ 10", true);
                    break;
                }
                //if (Gains[i] == null) {break;}
                //jTextArea_SentBytes.append(Gains[i] + "\n");
                //Durations[i] = (Double) jTable_Freqs.getModel().getValueAt(i, 3);
                Durations[i] = Double.parseDouble(jTable_Freqs.getModel().getValueAt(i, 3).toString());

                if (Durations[i] == null) {
                    break;
                }
                //if (jComboBox_TimeUnits.getModel().getSelectedItem().equals("mSec")){
                if (jRadioButton_mSec.getModel().isSelected()) {

                    Durations[i] = Durations[i] * 1000;
                } //else if (jComboBox_TimeUnits.getModel().getSelectedItem().equals("Sec")){
                else if (jRadioButton_Sec.getModel().isSelected()) {

                    Durations[i] = Durations[i] * 1000000;
                }
                if ((Durations[i] > 400000000) || (Durations[i] < 0)) {
                    WriteLog("Wrong data! Durations range: 0 ~ 400Sec", true);
                    break;
                }

                //jTextArea_SentBytes.append(Durations[i] + "\n");
                no_of_freq++;
            } catch (Exception ex) {
                break;
            }
        }
        WriteLog(String.format("no. of freqs: %d", no_of_freq), true);
        //
        //jTextArea_SentBytes.setText(null);
        //jTextArea_Rcvd.setText(null);
        if (Device_Handler.getConnectionStatus()) {
            for (byte idx = 0; idx < no_of_freq; idx++) {
                int k = 0;
                TX_Buffer[k++] = 0;
                // preamble:
                for (int i = 0; i < host_preamble.length; i++) {
                    TX_Buffer[k++] = host_preamble[i];
                }
                //payload:
                TX_Buffer[k++] = idx;
                TX_Buffer[k++] = (byte) no_of_freq;
                TX_Buffer[k++] = (byte) (Freqs[idx] % 256);
                TX_Buffer[k++] = (byte) ((Freqs[idx] / (Math.pow(2, 8))) % 256);
                TX_Buffer[k++] = (byte) ((Freqs[idx] / (Math.pow(2, 16))) % 256);
                TX_Buffer[k++] = (byte) ((Freqs[idx] / (Math.pow(2, 24))) % 256);
                TX_Buffer[k++] = (byte) (Gains[idx] % 256);
                TX_Buffer[k++] = (byte) (Durations[idx] % 256);
                TX_Buffer[k++] = (byte) ((Durations[idx] / (1 << 8)) % 256);
                TX_Buffer[k++] = (byte) ((Durations[idx] / (1 << 16)) % 256);
                TX_Buffer[k++] = (byte) ((Durations[idx] / (1 << 24)) % 256);
                Device_Handler.InteractWithDevice(TX_Buffer, RX_Buffer);
                /* Monitoring for Debugging:
                WriteLog(String.format("Message Sent %d of %d\t", (idx+1), no_of_freq), true);
                for (int i = 1; i < TX_Buffer.length; i++){
                WriteLog(String.format(", %d", TX_Buffer[i]), false);
                }
                WriteLog(String.format("Message Received %d of %d\t", (idx+1), no_of_freq), true);
                for (int i = 0; i < RX_Buffer.length; i++){
                WriteLog(String.format(", %d", RX_Buffer[i]), false);
                }
                 */

                verifier_counter = 0;
                for (int i = 0; i < device_preamble_Error.length; i++) {
                    if (RX_Buffer[i] == device_preamble_Error[i]) {
                        verifier_counter++;
                    }
                }
                if (verifier_counter == device_preamble_Error.length) {
                    WriteLog(String.format("Message rejected by device! %d of %d", (idx + 1), no_of_freq), true);
                } else {
                    verifier_counter = 0;
                    for (int i = 0; i < device_preamble_OK.length; i++) {
                        if (RX_Buffer[i] == device_preamble_OK[i]) {
                            verifier_counter++;
                        }
                    }

                    for (int i = device_preamble_OK.length; i < (TX_Buffer.length - 1); i++) {
                        if (RX_Buffer[i] == TX_Buffer[i + 1]) {
                            verifier_counter++;
                        }
                    }
                    //WriteLog(String.format("Bytes Verified = %d , ...", verifier_counter), true);

                    if (verifier_counter == (TX_Buffer.length - 1)) {
                        WriteLog(String.format("Message Sent %d of %d", (idx + 1), no_of_freq), true);
                    } else {
                        WriteLog(String.format("Message Error! %d of %d", (idx + 1), no_of_freq), true);
                    }
                }
            }
        } else {
            WriteLog("Warning: Device is NOT Connected!", true);
        }
    }//GEN-LAST:event_jBtnApplyActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        Device_Handler.Device_Close();
        //System.out.println("main_pack.MyJFrame.formWindowClosing()");

    }//GEN-LAST:event_formWindowClosing

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed

        if (jComboBox_Presets.getModel().getSelectedItem().toString().equals("None")) {
            WriteLog("WARNING: Select a preset first!", true);
        } else {
            Save_presets(jComboBox_Presets.getModel().getSelectedItem().toString());
            WriteLog(String.format("%s saved successfuly.", jComboBox_Presets.getModel().getSelectedItem().toString()), true);
        }
    }

    private void Save_presets(String preset) {
        File tempFile = new File("Presets.properties");
        Properties prop = new Properties() {
            @Override
            public synchronized Enumeration<Object> keys() {
                return Collections.enumeration(new TreeSet<>(super.keySet()));
            }
        };

        if (tempFile.exists()) {
            try (InputStream input = new FileInputStream("Presets.properties")) {
                // load a properties file
                prop.load(input);
                for (int i = 0; i < 100; i++) {
                    try {

                        prop.remove(String.format("%s_Freq%d", preset, i + 1));
                        prop.remove(String.format("%s_Gain%d", preset, i + 1));
                        prop.remove(String.format("%s_Time%d", preset, i + 1));
                    } catch (Exception ex) {
                        //WriteLog(ex.toString(), true);
                    }
                }
            } catch (Exception ex) {
            }
        }
        //
        try (OutputStream output = new FileOutputStream("Presets.properties")) {
            // set the properties value

            //System.out.println(btngrpFreq.getSelection().getActionCommand());
            String fu = "";
            if (jRadioButton_Hz.getModel().isSelected()) {
                fu = "Hz";
            } else if (jRadioButton_KHz.getModel().isSelected()) {
                fu = "KHz";
            } else if (jRadioButton_MHz.getModel().isSelected()) {
                fu = "MHz";
            }
            String Tu = "";
            if (jRadioButton_Sec.getModel().isSelected()) {
                Tu = "Sec";
            } else if (jRadioButton_mSec.getModel().isSelected()) {
                Tu = "mSec";
            } else if (jRadioButton_uSec.getModel().isSelected()) {
                Tu = "uSec";
            }

            prop.setProperty(String.format("%s__Funit", preset), fu);
            prop.setProperty(String.format("%s__Tunit", preset), Tu);

            for (int i = 0; i < 100; i++) {
                try {

                    prop.setProperty(String.format("%s_Freq%d", preset, i + 1), jTable_Freqs.getModel().getValueAt(i, 1).toString());
                    prop.setProperty(String.format("%s_Gain%d", preset, i + 1), jTable_Freqs.getModel().getValueAt(i, 2).toString());
                    prop.setProperty(String.format("%s_Time%d", preset, i + 1), jTable_Freqs.getModel().getValueAt(i, 3).toString());
                } catch (Exception ex) {
                    //WriteLog(ex.toString(), true);
                }
            }

            // save properties to project root folder
            prop.store(output, null);

        } catch (Exception io) {
            io.printStackTrace();
            WriteLog(io.toString(), true);
        }

    }//GEN-LAST:event_jBtnSaveActionPerformed

    private void jComboBox_PresetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_PresetsActionPerformed
        String str = jComboBox_Presets.getModel().getSelectedItem().toString();
        Properties prop;
        File tempFile = new File("Presets.properties");
        if (tempFile.exists()) {
            try (InputStream input = new FileInputStream("Presets.properties")) {

                prop = new Properties();
                // load a properties file
                prop.load(input);

                // get the property value and print it out
                //jComboBox_FreqUnits.getModel().setSelectedItem(prop.getProperty(String.format("%s__Funit", str)));
                //jComboBox_TimeUnits.getModel().setSelectedItem(prop.getProperty(String.format("%s__Tunit", str)));
                try {
                    if (prop.getProperty(String.format("%s__Funit", str)).equals("Hz")) {
                        jRadioButton_Hz.getModel().setSelected(true);
                    } else if (prop.getProperty(String.format("%s__Funit", str)).equals("KHz")) {
                        jRadioButton_KHz.getModel().setSelected(true);
                    } else if (prop.getProperty(String.format("%s__Funit", str)).equals("MHz")) {
                        jRadioButton_MHz.getModel().setSelected(true);
                    }
                    //
                    if (prop.getProperty(String.format("%s__Tunit", str)).equals("Sec")) {
                        jRadioButton_Sec.getModel().setSelected(true);
                    } else if (prop.getProperty(String.format("%s__Tunit", str)).equals("mSec")) {
                        jRadioButton_mSec.getModel().setSelected(true);
                    } else if (prop.getProperty(String.format("%s__Tunit", str)).equals("uSec")) {
                        jRadioButton_uSec.getModel().setSelected(true);
                    }
                } catch (Exception ex) {
                }
                //
                String val;
                for (int i = 0; i < 100; i++) {
                    val = prop.getProperty(String.format("%s_Freq%d", str, i + 1), null);
                    jTable_Freqs.getModel().setValueAt(val, i, 1);
                    val = prop.getProperty(String.format("%s_Gain%d", str, i + 1), null);
                    jTable_Freqs.getModel().setValueAt(val, i, 2);
                    val = prop.getProperty(String.format("%s_Time%d", str, i + 1), null);
                    jTable_Freqs.getModel().setValueAt(val, i, 3);
                }
                WriteLog(str + " loaded...", true);
            } catch (IOException ex) {
                // ex.printStackTrace();
                //    WriteLog(ex.toString(), true);
            }
    }//GEN-LAST:event_jComboBox_PresetsActionPerformed
        
        else {
            WriteLog("Warning: No saved preset found!", true);
        }
    }

    public static void WriteLog(String log_message, boolean newline) {
        if (newline) {
            jTextArea_ActLog.append("\n" + (DateTimeFormatter.ofPattern("yyyy/MM/dd  HH:mm:ss   ").format(LocalDateTime.now())));
        }
        jTextArea_ActLog.append(log_message);
        jTextArea_ActLog.setCaretPosition(jTextArea_ActLog.getText().length());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyJFrame().setVisible(true);
            }
        });
        //

        //setIconImage(getIconImage());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btngrpFreq;
    private javax.swing.ButtonGroup btngrpTime;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jBtnApply;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JComboBox<String> jComboBox_Presets;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRadioButton_Hz;
    private javax.swing.JRadioButton jRadioButton_KHz;
    private javax.swing.JRadioButton jRadioButton_MHz;
    private javax.swing.JRadioButton jRadioButton_Sec;
    private javax.swing.JRadioButton jRadioButton_mSec;
    private javax.swing.JRadioButton jRadioButton_uSec;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable_Freqs;
    private static javax.swing.JTextArea jTextArea_ActLog;
    // End of variables declaration//GEN-END:variables
}
